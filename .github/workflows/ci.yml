name: CI

on:
  pull_request:
  push:
    branches:
      - main
  merge_group:

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: hashintel
  TURBO_REMOTE_ONLY: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:
      be-tests: ${{ steps.packages.outputs.be-tests }}
      pw-tests: ${{ steps.packages.outputs.pw-tests }}
      ai-worker-ts: ${{ steps.packages.outputs.ai-worker-ts }}
      ai-worker-py: ${{ steps.packages.outputs.ai-worker-py }}
      integration-worker: ${{ steps.packages.outputs.integration_worker }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          fetch-depth: 2

      - name: Install turbo
        run: yarn global add turbo

      - name: Check changed packages
        id: packages
        run: |
          # We filter by the package we want to test. If the package is not changed, we don't need to run the tests.
          BE_TESTS=$(turbo run test --filter "@tests/hash-backend-integration...[HEAD^]" --dry-run=json | jq -r '.packages != []')
          PW_TESTS=$(turbo run test --filter "@tests/hash-playwright...[HEAD^]" --dry-run=json | jq -r '.packages != []')
          BUILD_AI_WORKER_TS=$(turbo run build:docker --filter "@apps/hash-ai-worker-ts...[HEAD^]" --dry-run=json | jq -r '.packages != []')
          BUILD_AI_WORKER_PY=$(turbo run build:docker --filter "@apps/hash-ai-worker-py...[HEAD^]" --dry-run=json | jq -r '.packages != []')
          BUILD_INTEGRATION_WORKER=$(turbo run build:docker --filter "@apps/hash-integration-worker...[HEAD^]" --dry-run=json | jq -r '.packages != []')

          # Output some information for debugging purposes
          echo "Checking packages:"
          echo "- Backend Integration Tests: $BE_TESTS"
          echo "- Playwright Tests:          $PW_TESTS"
          echo "- AI Worker TS:              $BUILD_AI_WORKER_TS"
          echo "- AI Worker PY:              $BUILD_AI_WORKER_PY"
          echo "- Integration Worker:        $BUILD_INTEGRATION_WORKER"

          # Output the results to the GitHub Actions output
          echo "be-tests=$BE_TESTS" >> $GITHUB_OUTPUT
          echo "pw-tests=$PW_TESTS" >> $GITHUB_OUTPUT
          echo "ai-worker-ts=$BUILD_AI_WORKER_TS" >> $GITHUB_OUTPUT
          echo "ai-worker-py=$BUILD_AI_WORKER_PY" >> $GITHUB_OUTPUT
          echo "integration-worker=$BUILD_INTEGRATION_WORKER" >> $GITHUB_OUTPUT

  build-hash-graph:
    runs-on: ubuntu-latest
    needs: [setup]
    if: needs.setup.outputs.be-tests == 'true' || needs.setup.outputs.pw-tests == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Build image
        uses: ./.github/actions/build-docker-images
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          hash-graph: true

  build-hash-ai-worker-ts:
    runs-on: ubuntu-latest
    needs: [setup]
    if: needs.setup.outputs.ai-worker-ts == 'true' || needs.setup.outputs.pw-tests == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Build image
        uses: ./.github/actions/build-docker-images
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          hash-ai-worker-ts: true

  build-hash-ai-worker-py:
    runs-on: ubuntu-latest
    needs: [setup]
    if: needs.setup.outputs.ai-worker-py == 'true' || needs.setup.outputs.pw-tests == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Build image
        uses: ./.github/actions/build-docker-images
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          hash-ai-worker-py: true

  build-hash-integration-worker:
    runs-on: ubuntu-latest
    needs: [setup]
    if: needs.setup.outputs.integration-worker == 'true' || needs.setup.outputs.pw-tests == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Build image
        uses: ./.github/actions/build-docker-images
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          hash-integration-worker: true

  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - uses: ./.github/actions/warm-up-repo
        if: ${{ success() || failure() }}

      - name: Setup python
        run: yarn poetry:install

      - name: Run yarn lint:dependency-version-consistency
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:dependency-version-consistency; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try running `yarn fix:dependency-version-consistency` locally to apply autofixes.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:eslint
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:eslint; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try running `yarn fix:eslint` locally to apply autofixes.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:lockfile-lint
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:lockfile-lint; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try resetting yarn.lock to its previous state and then run `yarn install`.'
            echo 'If your `~/.npmrc` mentions a custom registry, you should remove this setting first.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:lock-files
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:lock-files; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try running `yarn fix:lock-files` locally to apply autofixes.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:license-in-workspaces
        if: ${{ success() || failure() }}
        env:
          FORCE_COLOR: "1" ## https://www.npmjs.com/package/chalk#supportsColor
        run: |
          if ! yarn lint:license-in-workspaces; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Please fix the above errors locally for the check to pass.'
            echo 'If you don’t see them, try merging target branch into yours.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:markdownlint
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:markdownlint; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try running `yarn fix:markdownlint` locally to apply autofixes.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:prettier
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:prettier; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try running `yarn fix:prettier` locally to apply autofixes.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:black
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:black; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try running `yarn fix:black` locally to apply autofixes.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:tsc
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:tsc; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Please fix the above errors locally for the check to pass.'
            echo 'If you don’t see them, try merging target branch into yours.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:ruff
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:ruff; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Try running `yarn fix:ruff` locally to apply autofixes.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

      - name: Run yarn lint:mypy
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:mypy; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Please fix the above errors locally for the check to pass.'
            echo 'If you don’t see them, try merging target branch into yours.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

        ## TODO: Replace with `yarn fix:yarn-dedupe` after upgrading to Yarn v3+
        ## https://yarnpkg.com/cli/dedupe
        ## https://github.com/yarnpkg/berry/issues/2297
      - name: Run yarn lint:yarn-deduplicate
        if: ${{ success() || failure() }}
        run: |
          if ! yarn lint:yarn-deduplicate; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Some dependencies can be deduplicated, which will make node_modules'
            echo 'lighter and potentially save us from unexplainable bugs.'
            echo 'Please run `yarn fix:yarn-deduplicate` locally and commit yarn.lock.'
            echo 'You may need to run the command 2-3 times in some rare cases.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

        ## yarn --frozen-lockfile does not work for monorepos, so using a workaround:
        ## https://github.com/yarnpkg/yarn/issues/5840#issuecomment-467516207
        ## TODO: Use `yarn install --immutable` after upgrading to Yarn v3+
      - name: Check yarn.lock stability
        if: ${{ success() || failure() }}
        run: |
          git diff yarn.lock
          if ! git diff --exit-code yarn.lock; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Changes were detected in yarn.lock file after running `yarn install`.'
            echo 'This makes runtime less stable, so should be avoided.'
            echo 'Please run `yarn install` locally and commit yarn.lock.'
            echo 'You may also want to run `yarn fix:yarn-deduplicate` just in case.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1;
          fi

      - name: Validate renovate config
        if: ${{ success() || failure() }}
        run: |
          # Adding renovate in `package.json` causes incompatibility between our dependencies and their dependencies.
          npm install --global renovate
          if ! renovate-config-validator; then
            echo ''
            echo ''
            echo 'ℹ️ ℹ️ ℹ️'
            echo 'Please fix the above errors locally for the check to pass.'
            echo 'If you don’t see them, try merging target branch into yours.'
            echo 'ℹ️ ℹ️ ℹ️'
            exit 1
          fi

  backend-integration-tests:
    name: Backend integration tests
    needs: [setup, build-hash-graph]
    if: always() && needs.setup.outputs.be-tests == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - uses: ./.github/actions/warm-up-repo

      - name: Create temp files and folders
        run: mkdir -p var/logs

      - name: Load Docker images
        uses: ./.github/actions/load-docker-images
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          hash-graph: true

      - name: Launch external services
        run: |
          yarn turbo codegen --filter '@apps/hash-external-services'
          yarn workspace @apps/hash-external-services deploy:test up graph kratos --wait

      - run: yarn test:backend-integration
        env:
          TEST_COVERAGE: true

      - uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4
        name: Upload coverage to https://app.codecov.io/gh/hashintel/hash
        with:
          ## Temporarily disabled until https://github.com/codecov/codecov-action/issues/720 is resolved, and/or we rely
          ## on coverage reports more strictly
          fail_ci_if_error: false
          files: tests/hash-backend-integration/coverage/lcov.info
          flags: backend-integration-tests
          token: ${{ secrets.CODECOV_TOKEN }} ## not required for public repos, can be removed when https://github.com/codecov/codecov-action/issues/837 is resolved

      - name: Show container logs
        if: ${{ success() || failure() }}
        run: yarn workspace @apps/hash-external-services deploy:test logs --timestamps

      - name: Upload artifact backend-integration-tests-var
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        if: ${{ success() || failure() }}
        with:
          name: backend-integration-tests-var
          path: |
            var/api
            var/logs
          ## Getting permission denied for docker volumes (e.g. postgres data)
          ## https://github.com/actions/upload-artifact/issues/192

  playwright-tests:
    name: Playwright tests
    needs:
      [
        setup,
        build-hash-graph,
        build-hash-ai-worker-ts,
        build-hash-ai-worker-py,
        build-hash-integration-worker,
      ]
    if: always() && needs.setup.outputs.pw-tests == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: apps/hash-frontend/.next/cache
          key: ${{ runner.os }}-frontend-next-cache-${{ hashFiles('yarn.lock') }}-${{ hashFiles('apps/hash-frontend/**') }}
          restore-keys: |
            ${{ runner.os }}-frontend-next-cache-${{ hashFiles('yarn.lock') }}-
            ${{ runner.os }}-frontend-next-cache

      - uses: ./.github/actions/warm-up-repo
        with:
          playwright-deps: chrome

      - name: Create temp files and folders
        run: mkdir -p var/logs

      - name: Load Docker images
        uses: ./.github/actions/load-docker-images
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          hash-graph: true
          hash-ai-worker-ts: true
          hash-ai-worker-py: true
          hash-integration-worker: true

      - name: Launch external services
        run: |
          yarn turbo codegen --filter '@apps/hash-external-services'
          # if we use turbo here, this would cost time with the docker build step needing to check that all the layers are cached          
          yarn workspace @apps/hash-external-services deploy up --detach

      ## @todo: re-implement seed-data scripts for the new type system, so that they can be used here. Can potentially be addressed as part of https://app.asana.com/0/1202805690238892/1203106234191606/f
      # - name: Seed data
      #   if: ${{ success() || failure() }}
      #   run: |
      #     yarn seed-data

      - name: Launch backend
        run: |
          yarn dev:backend 2>&1 | tee var/logs/backend.log & ## ampersand enables background mode
          yarn wait-on --timeout 120000 http://0.0.0.0:5001

      - name: Build and launch frontend
        run: |
          yarn workspace @apps/hash-frontend next build
          yarn workspace @apps/hash-frontend start 2>&1 | tee var/logs/frontend.log & ## ampersand enables background mode
          yarn wait-on --timeout 30000 http://0.0.0.0:3000

      - name: Run Playwright tests
        run: |
          yarn test:playwright

      - name: Show backend logs
        if: ${{ success() || failure() }}
        run: cat var/logs/backend.log

      - name: Show frontend logs
        if: ${{ success() || failure() }}
        run: cat var/logs/frontend.log

      - name: Show container logs
        if: ${{ success() || failure() }}
        run: yarn workspace @apps/hash-external-services deploy logs --timestamps

      - name: Upload artifact playwright-report
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: playwright-report
          path: tests/hash-playwright/playwright-report

      - name: Upload artifact playwright-var
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        if: ${{ success() || failure() }}
        with:
          name: playwright-var
          path: |
            var/api
            var/logs
          ## Getting permission denied for docker volumes (e.g. postgres data)
          ## https://github.com/actions/upload-artifact/issues/192

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - uses: ./.github/actions/warm-up-repo

      - run: yarn test:unit
        if: ${{ success() || failure() }}
        env:
          TEST_COVERAGE: true

      - uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4
        if: ${{ success() || failure() }}
        name: Upload coverage to https://app.codecov.io/gh/hashintel/hash
        with:
          ## Temporarily disabled until https://github.com/codecov/codecov-action/issues/720 is resolved, and/or we rely
          ## on coverage reports more strictly
          fail_ci_if_error: false
          files: apps/hash-api/coverage/lcov.info,apps/hash-frontend/coverage/lcov.info,libs/@local/hash-backend-utils/coverage/lcov.info,libs/@local/hash-isomorphic-utils/coverage/lcov.info,
          flags: unit-tests
          token: ${{ secrets.CODECOV_TOKEN }} ## not required for public repos, can be removed when https://github.com/codecov/codecov-action/issues/837 is resolved
