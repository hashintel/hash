on:
  # We could allow configuring environment here.
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - "apps/hash-graph/**"
      - "apps/hash-api/**"
      - "apps/hash-external-services/kratos/**"
      - "libs/@local/hash-backend-utils-utils/**"
      - "libs/@local/hash-isomorphic-utils/**"
      - "libs/@local/status/**"

env:
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}

  GH_RUN_ID: ${{ github.run_id }}

  HASH_API_RESOURCE_NAME: ${{ secrets.HASH_API_RESOURCE_NAME }}
  HASH_GRAPH_RESOURCE_NAME: ${{ secrets.HASH_GRAPH_RESOURCE_NAME }}
  HASH_KRATOS_RESOURCE_NAME: ${{ secrets.HASH_KRATOS_RESOURCE_NAME }}

  HASH_ECS_CLUSTER_NAME: ${{ secrets.HASH_ECS_CLUSTER_NAME }}
  HASH_APP_SERVICE_NAME: ${{ secrets.HASH_APP_SERVICE_NAME }}

name: HASH backend deployment
jobs:
  build-graph:
    name: Build and push HASH graph image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate Vault
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          exportToken: true
          url: ${{ env.VAULT_ADDR }}
          method: jwt
          role: prod
          # Even though it could look like separate calls to fetch the secrets
          # the responses here are cached, so we're only issuing a single set of credentials
          secrets: |
            aws/creds/prod-deploy access_key | AWS_ACCESS_KEY_ID ;
            aws/creds/prod-deploy secret_key | AWS_SECRET_ACCESS_KEY ;
            aws/creds/prod-deploy security_token | AWS_SESSION_TOKEN

      - name: Docker image build through docker-build-push
        uses: ./.github/actions/docker-build-push
        id: build
        env:
          IMAGE_NAME: ${{ env.HASH_GRAPH_RESOURCE_NAME }}
        with:
          SHORTNAME: "graph"
          CONTEXT_PATH: ${{ github.workspace }}/
          DOCKERFILE_LOCATION: ${{ github.workspace }}/apps/hash-graph/docker/Dockerfile
          AWS_ACCESS_KEY_ID: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.secrets.outputs.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ECR_URL: ${{ env.AWS_ECR_URL }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

  build-api:
    name: Build and push HASH api image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate Vault
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          exportToken: true
          url: ${{ env.VAULT_ADDR }}
          method: jwt
          role: prod
          # Even though it could look like separate calls to fetch the secrets
          # the responses here are cached, so we're only issuing a single set of credentials
          secrets: |
            aws/creds/prod-deploy access_key | AWS_ACCESS_KEY_ID ;
            aws/creds/prod-deploy secret_key | AWS_SECRET_ACCESS_KEY ;
            aws/creds/prod-deploy security_token | AWS_SESSION_TOKEN

      - name: Docker image build through docker-build-push
        uses: ./.github/actions/docker-build-push
        id: build
        env:
          IMAGE_NAME: ${{ env.HASH_API_RESOURCE_NAME }}
        with:
          SHORTNAME: "api"
          CONTEXT_PATH: ${{ github.workspace }}
          DOCKERFILE_LOCATION: ${{ github.workspace }}/infra/docker/api/prod/Dockerfile
          AWS_ACCESS_KEY_ID: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.secrets.outputs.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ECR_URL: ${{ env.AWS_ECR_URL }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

  build-kratos:
    name: Build and push Kratos image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate Vault
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          exportToken: true
          url: ${{ env.VAULT_ADDR }}
          method: jwt
          role: prod
          # Even though it could look like separate calls to fetch the secrets
          # the responses here are cached, so we're only issuing a single set of credentials
          secrets: |
            aws/creds/prod-deploy access_key | AWS_ACCESS_KEY_ID ;
            aws/creds/prod-deploy secret_key | AWS_SECRET_ACCESS_KEY ;
            aws/creds/prod-deploy security_token | AWS_SESSION_TOKEN

      - name: Docker image build through docker-build-push
        uses: ./.github/actions/docker-build-push
        id: build
        env:
          IMAGE_NAME: ${{ env.HASH_KRATOS_RESOURCE_NAME }}
        with:
          SHORTNAME: "kratos"
          CONTEXT_PATH: ${{ github.workspace }}/apps/hash-external-services/kratos
          DOCKERFILE_LOCATION: ${{ github.workspace }}/apps/hash-external-services/kratos/Dockerfile
          AWS_ACCESS_KEY_ID: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.secrets.outputs.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ECR_URL: ${{ env.AWS_ECR_URL }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          BUILD_ARGS: |
            ENV=prod
            API_SECRET=${{ secrets.HASH_KRATOS_API_SECRET }}

  deploy:
    name: Deploy HASH images
    runs-on: ubuntu-latest
    needs:
      - build-graph
      - build-api
      - build-kratos
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate Vault
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          exportToken: true
          url: ${{ env.VAULT_ADDR }}
          method: jwt
          role: prod
          # Even though it could look like separate calls to fetch the secrets
          # the responses here are cached, so we're only issuing a single set of credentials
          secrets: |
            aws/creds/prod-deploy access_key | AWS_ACCESS_KEY_ID ;
            aws/creds/prod-deploy secret_key | AWS_SECRET_ACCESS_KEY ;
            aws/creds/prod-deploy security_token | AWS_SESSION_TOKEN

      - uses: ./.github/actions/docker-ecr-login
        with:
          AWS_ACCESS_KEY_ID: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.secrets.outputs.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Redeploy api service
        env:
          HASH_ECS_CLUSTER_NAME: ${{ env.HASH_ECS_CLUSTER_NAME }}
          HASH_APP_SERVICE_NAME: ${{ env.HASH_APP_SERVICE_NAME }}
        run: |
          aws ecs update-service --cluster ${{ env.HASH_ECS_CLUSTER_NAME }} --service ${{ env.HASH_APP_SERVICE_NAME }} --force-new-deployment 1> /dev/null
