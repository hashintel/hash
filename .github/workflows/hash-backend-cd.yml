on:
  # We could allow configuring environment here.
  workflow_dispatch: {}
  push:
    branches: [main]
    paths:
      - "packages/hash/**"
      - "!packages/hash/frontend/**"
      - "!packages/hash/playwright/**"

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}

  # Format "user:pass"
  HASH_POSTGRES_MIGRATE_USER_PASS: ${{ secrets.HASH_POSTGRES_MIGRATE_USER_PASS }}
  # Format: "env.id.region.rds.amazonaws.com/database"
  HASH_POSTGRES_HOST_DB: ${{ secrets.HASH_POSTGRES_HOST_DB }}

  GH_RUN_ID: ${{ github.run_id }}

  HASH_API_RESOURCE_NAME: ${{ secrets.HASH_API_RESOURCE_NAME }}
  HASH_REALTIME_RESOURCE_NAME: ${{ secrets.HASH_REALTIME_RESOURCE_NAME }}
  HASH_SEARCHLOADER_RESOURCE_NAME: ${{ secrets.HASH_SEARCHLOADER_RESOURCE_NAME }}

  HASH_ECS_CLUSTER_NAME: ${{ secrets.HASH_ECS_CLUSTER_NAME }}

name: HASH backend deployment
jobs:
  build-api:
    name: Build and push HASH api image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Docker image build through docker-build-push
        uses: ./.github/actions/docker-build-push
        env:
          HASH_API_IMAGE_NAME: ${{ env.HASH_API_RESOURCE_NAME }}ecr
        with:
          SHORTNAME: "api"
          DOCKERFILE_LOCATION: ${{ github.workspace }}/packages/hash/docker/api/prod/Dockerfile
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ECR_URL: ${{ env.AWS_ECR_URL }}
          IMAGE_NAME: ${{ env.HASH_API_IMAGE_NAME }}

  build-realtime:
    name: Build and push HASH realtime image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Docker image build through docker-build-push
        uses: ./.github/actions/docker-build-push
        env:
          HASH_REALTIME_IMAGE_NAME: ${{ env.HASH_REALTIME_RESOURCE_NAME }}ecr
        with:
          SHORTNAME: "realtime"
          DOCKERFILE_LOCATION: ${{ github.workspace }}/packages/hash/docker/realtime/prod/Dockerfile
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ECR_URL: ${{ env.AWS_ECR_URL }}
          IMAGE_NAME: ${{ env.HASH_REALTIME_IMAGE_NAME }}

  build-searchloader:
    name: Build and push HASH searchloader image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Docker image build through docker-build-push
        uses: ./.github/actions/docker-build-push
        env:
          HASH_SEARCHLOADER_IMAGE_NAME: ${{ env.HASH_SEARCHLOADER_RESOURCE_NAME }}ecr
        with:
          SHORTNAME: "search-loader"
          DOCKERFILE_LOCATION: ${{ github.workspace }}/packages/hash/docker/search-loader/prod/Dockerfile
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ECR_URL: ${{ env.AWS_ECR_URL }}
          IMAGE_NAME: ${{ env.HASH_SEARCHLOADER_IMAGE_NAME }}

  deploy:
    name: Deploy HASH images
    runs-on: ubuntu-latest
    needs:
      - build-api
      - build-realtime
      - build-searchloader
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/docker-ecr-login
        with:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # Node is used for migrating the DB
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: yarn

      - name: Prepare dev tools for DB migration
        run: yarn install
        shell: bash

      # TODO: should we stop the services before migrating the db?
      - name: Migrate database
        run: |
          HASH_MIGRATION_PG_URL=postgres://${{ env.HASH_POSTGRES_MIGRATE_USER_PASS }}@${{ env.HASH_POSTGRES_HOST_DB }} \
            yarn workspace @hashintel/hash-datastore pg:migrate up

      - name: Redeploy api service
        env:
          HASH_API_SERVICE_NAME: ${{ env.HASH_API_RESOURCE_NAME }}svc
        run: |
          aws ecs update-service --cluster ${{ env.HASH_ECS_CLUSTER_NAME }} --service ${{ env.HASH_API_SERVICE_NAME }} --force-new-deployment 1> /dev/null

      - name: Redeploy realtime service
        env:
          HASH_REALTIME_SERVICE_NAME: ${{ env.HASH_REALTIME_RESOURCE_NAME }}svc
        run: |
          aws ecs update-service --cluster ${{ env.HASH_ECS_CLUSTER_NAME }} --service ${{ env.HASH_REALTIME_SERVICE_NAME }} --force-new-deployment 1> /dev/null

      - name: Redeploy serach-loader service
        env:
          HASH_SEARCHLOADER_SERVICE_NAME: ${{ env.HASH_SEARCHLOADER_RESOURCE_NAME }}svc
        run: |
          aws ecs update-service --cluster ${{ env.HASH_ECS_CLUSTER_NAME }} --service ${{ env.HASH_SEARCHLOADER_SERVICE_NAME }} --force-new-deployment 1> /dev/null
