on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}

  # Format "user:pass"
  HASH_POSTGRES_MIGRATE_USER_PASS: ${{ secrets.HASH_POSTGRES_MIGRATE_USER_PASS }}
  # Format: "env.id.region.rds.amazonaws.com/database"
  HASH_POSTGRES_HOST_DB: ${{ secrets.HASH_POSTGRES_HOST_DB }}

  GH_RUN_ID: ${{ github.run_id }}

  HASH_API_RESOURCE_NAME: ${{ secrets.HASH_API_RESOURCE_NAME }}
  HASH_REALTIME_RESOURCE_NAME: ${{ secrets.HASH_REALTIME_RESOURCE_NAME }}
  HASH_SEARCHLOADER_RESOURCE_NAME: ${{ secrets.HASH_SEARCHLOADER_RESOURCE_NAME }}

  HASH_ECS_CLUSTER_NAME: ${{ secrets.HASH_ECS_CLUSTER_NAME }}

name: HASH backend deployment
jobs:
  build-api:
    name: Build and push HASH api image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/docker-ecr-login
        with:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # Build images and push to ECR
      - name: Build and push api
        uses: docker/build-push-action@v2
        env:
          HASH_API_IMAGE_NAME: ${{ env.HASH_API_RESOURCE_NAME }}ecr
        with:
          # The Dockerfile is in a leaf-folder without access to what it needs.
          # Thus the context is within the root, while the dockerfile is deeply nested.
          context: ${{ github.workspace }}
          push: true
          file: ${{ github.workspace }}/packages/hash/docker/api/prod/Dockerfile
          tags: ${{ env.AWS_ECR_URL }}/${{ env.HASH_API_IMAGE_NAME }}:latest , ${{ env.AWS_ECR_URL }}/${{ env.HASH_API_IMAGE_NAME }}:run-${{ env.GH_RUN_ID }}

  build-realtime:
    name: Build and push HASH realtime image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/docker-ecr-login
        with:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Build and push realtime
        uses: docker/build-push-action@v2
        env:
          HASH_REALTIME_IMAGE_NAME: ${{ env.HASH_REALTIME_RESOURCE_NAME }}ecr
        with:
          context: ${{ github.workspace }}
          push: true
          file: ${{ github.workspace }}/packages/hash/docker/realtime/prod/Dockerfile
          tags: ${{ env.AWS_ECR_URL }}/${{ env.HASH_REALTIME_IMAGE_NAME }}:latest , ${{ env.AWS_ECR_URL }}/${{ env.HASH_REALTIME_IMAGE_NAME }}:run-${{ env.GH_RUN_ID }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

  build-searchloader:
    name: Build and push HASH searchloader image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/docker-ecr-login
        with:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Build and push search-loader
        uses: docker/build-push-action@v2
        env:
          HASH_SEARCHLOADER_IMAGE_NAME: ${{ env.HASH_SEARCHLOADER_RESOURCE_NAME }}ecr
        with:
          context: ${{ github.workspace }}
          push: true
          file: ${{ github.workspace }}/packages/hash/docker/search-loader/prod/Dockerfile
          tags: ${{ env.AWS_ECR_URL }}/${{ env.HASH_SEARCHLOADER_IMAGE_NAME }}:latest , ${{ env.AWS_ECR_URL }}/${{ env.HASH_SEARCHLOADER_IMAGE_NAME }}:run-${{ env.GH_RUN_ID }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

  deploy:
    name: Deploy HASH images
    runs-on: ubuntu-latest
    needs:
      - build-api
      - build-realtime
      - build-searchloader
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/docker-ecr-login
        with:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Prepare dev tools for DB migration
        run: yarn install
        shell: bash

      # TODO: should we stop the services before migrating the db?
      - name: Migrate database
        run: |
          HASH_MIGRATION_PG_URL=postgres://${{ env.HASH_POSTGRES_MIGRATE_USER_PASS }}@${{ env.HASH_POSTGRES_HOST_DB }} \
            yarn workspace @hashintel/hash-datastore pg:migrate up

      - name: Redeploy api service
        env:
          HASH_API_SERVICE_NAME: ${{ env.HASH_API_RESOURCE_NAME }}svc
        run: |
          aws ecs update-service --cluster ${{ env.HASH_ECS_CLUSTER_NAME }} --service ${{ env.HASH_API_SERVICE_NAME }} --force-new-deployment 1> /dev/null

      - name: Redeploy realtime service
        env:
          HASH_REALTIME_SERVICE_NAME: ${{ env.HASH_REALTIME_RESOURCE_NAME }}svc
        run: |
          aws ecs update-service --cluster ${{ env.HASH_ECS_CLUSTER_NAME }} --service ${{ env.HASH_REALTIME_SERVICE_NAME }} --force-new-deployment 1> /dev/null

      - name: Redeploy serach-loader service
        env:
          HASH_SEARCHLOADER_SERVICE_NAME: ${{ env.HASH_SEARCHLOADER_RESOURCE_NAME }}svc
        run: |
          aws ecs update-service --cluster ${{ env.HASH_ECS_CLUSTER_NAME }} --service ${{ env.HASH_SEARCHLOADER_SERVICE_NAME }} --force-new-deployment 1> /dev/null
