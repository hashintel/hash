on:
  # We could allow configuring environment here.
  workflow_dispatch: {}
  push:
    branches: [main]
    paths:
      - "apps/hash-api/**"
      - "libs/@local/hash-backend-utils-utils/**"
      - "libs/@local/hash-isomorphic-utils/**"
      - "packages/graph/**"
      - "packages/hash/**"

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}

  GH_RUN_ID: ${{ github.run_id }}

  HASH_API_RESOURCE_NAME: ${{ secrets.HASH_API_RESOURCE_NAME }}
  HASH_GRAPH_RESOURCE_NAME: ${{ secrets.HASH_GRAPH_RESOURCE_NAME }}
  HASH_KRATOS_RESOURCE_NAME: ${{ secrets.HASH_KRATOS_RESOURCE_NAME }}

  HASH_ECS_CLUSTER_NAME: ${{ secrets.HASH_ECS_CLUSTER_NAME }}
  HASH_APP_SERVICE_NAME: ${{ secrets.HASH_APP_SERVICE_NAME }}

  # To be uncommented once we migrate in the job below
  # HASH_GRAPH_PG_USER: ${{ secrets.HASH_GRAPH_PG_USER }}
  # HASH_GRAPH_PG_PASSWORD: ${{ secrets.HASH_GRAPH_PG_PASSWORD }}
  # HASH_GRAPH_PG_HOST: ${{ secrets.HASH_GRAPH_PG_HOST }}
  # HASH_GRAPH_PG_PORT: ${{ secrets.HASH_GRAPH_PG_PORT }}
  # HASH_GRAPH_PG_DATABASE: ${{ secrets.HASH_GRAPH_PG_DATABASE }}

name: HASH backend deployment
jobs:
  build-graph:
    name: Build and push HASH graph image
    runs-on: ubuntu-latest
    outputs:
      ECR_IMAGE: ${{ steps.build.outputs.ECR_IMAGE }}
    steps:
      - uses: actions/checkout@v3

      - name: Docker image build through docker-build-push
        uses: ./.github/actions/docker-build-push
        id: build
        env:
          IMAGE_NAME: ${{ env.HASH_GRAPH_RESOURCE_NAME }}
        with:
          SHORTNAME: "graph"
          CONTEXT_PATH: ${{ github.workspace }}/packages/graph
          DOCKERFILE_LOCATION: ${{ github.workspace }}/packages/graph/deployment/graph/Dockerfile
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ECR_URL: ${{ env.AWS_ECR_URL }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

  build-api:
    name: Build and push HASH api image
    runs-on: ubuntu-latest
    outputs:
      ECR_IMAGE: ${{ steps.build.outputs.ECR_IMAGE }}
    steps:
      - uses: actions/checkout@v3

      - name: Docker image build through docker-build-push
        uses: ./.github/actions/docker-build-push
        id: build
        env:
          IMAGE_NAME: ${{ env.HASH_API_RESOURCE_NAME }}
        with:
          SHORTNAME: "api"
          CONTEXT_PATH: ${{ github.workspace }}
          DOCKERFILE_LOCATION: ${{ github.workspace }}/packages/hash/docker/api/prod/Dockerfile
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ECR_URL: ${{ env.AWS_ECR_URL }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

  build-kratos:
    name: Build and push Kratos image
    runs-on: ubuntu-latest
    outputs:
      ECR_IMAGE: ${{ steps.build.outputs.ECR_IMAGE }}
    steps:
      - uses: actions/checkout@v3

      - name: Docker image build through docker-build-push
        uses: ./.github/actions/docker-build-push
        id: build
        env:
          IMAGE_NAME: ${{ env.HASH_KRATOS_RESOURCE_NAME }}
        with:
          SHORTNAME: "kratos"
          CONTEXT_PATH: ${{ github.workspace }}/apps/hash-external-services/kratos
          DOCKERFILE_LOCATION: ${{ github.workspace }}/apps/hash-external-services/kratos/Dockerfile
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ECR_URL: ${{ env.AWS_ECR_URL }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          BUILD_ARGS: |
            ENV=prod
            API_SECRET=${{ secrets.HASH_KRATOS_API_SECRET }}

  # We need a SSH tunnel to migrate the DB, for now we disable the entire job.
  deploy:
    name: Deploy HASH images
    if: false
    runs-on: ubuntu-latest
    needs:
      - build-graph
      - build-api
      - build-kratos
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/docker-ecr-login
        with:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # TODO: should we stop the services before migrating the db?
      - name: Migrate database
        env:
          HASH_GRAPH_ECR_IMAGE: ${{ needs.build-graph.outputs.ECR_IMAGE }}
          # Env vars for running the migrations
          HASH_GRAPH_PG_USER: ${{ env.HASH_GRAPH_PG_USER }}
          HASH_GRAPH_PG_PASSWORD: ${{ env.HASH_GRAPH_PG_PASSWORD }}
          HASH_GRAPH_PG_HOST: ${{ env.HASH_GRAPH_PG_HOST }}
          HASH_GRAPH_PG_PORT: ${{ env.HASH_GRAPH_PG_PORT }}
          HASH_GRAPH_PG_DATABASE: ${{ env.HASH_GRAPH_PG_DATABASE }}
          RUST_LOG: "graph=info,debug"
        run: |
          docker run --rm \
            -e HASH_GRAPH_PG_USER \
            -e HASH_GRAPH_PG_PASSWORD \
            -e HASH_GRAPH_PG_HOST \
            -e HASH_GRAPH_PG_PORT \
            -e HASH_GRAPH_PG_DATABASE \
            ${{ env.HASH_GRAPH_ECR_IMAGE }} \
            migrate

      - name: Redeploy api service
        env:
          HASH_API_SERVICE_NAME: ${{ env.HASH_API_RESOURCE_NAME }}svc
        run: |
          aws ecs update-service --cluster ${{ env.HASH_ECS_CLUSTER_NAME }} --service ${{ env.HASH_API_SERVICE_NAME }} --force-new-deployment 1> /dev/null
