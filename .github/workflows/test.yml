name: Test

on:
  pull_request:
  push:
    branches:
      - main
  merge_group:

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: hashintel
  TURBO_REMOTE_ONLY: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:
      units: ${{ steps.packages.outputs.units }}
      integrations: ${{ steps.packages.outputs.integrations }}
      dockers: ${{ steps.packages.outputs.dockers }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          fetch-depth: 2

      - name: Install turbo
        run: yarn global add turbo

      - name: Determine changed packages
        id: packages
        run: |
          UNIT_PACKAGES=$(turbo run test \
              --filter '!@tests/*...[HEAD^]' \
              --dry-run=json \
            | jq '.tasks[] | select(.task == "test" and .command != "<NONEXISTENT>") | {package: .package}' \
            | jq -c --slurp '{ include: . }')

          INTEGRATION_PACKAGES=$(turbo run test \
              --filter '@tests/*...[HEAD^]' \
              --dry-run=json \
            | jq '.tasks[] | select(.task == "test" and .command != "<NONEXISTENT>") | {package: .package}' \
            | jq -c --slurp '{ include: . }')

          REQUIRES_GRAPH=$(turbo run build --filter '@apps/hash-graph...[HEAD^]' --dry-run=json | jq '.packages != []')
          REQUIRES_AI_WORKER_TS=$(turbo run build --filter '@apps/hash-ai-worker-ts...[HEAD^]' --dry-run=json | jq '.packages != []')
          REQUIRES_AI_WORKER_PY=$(turbo run build --filter '@apps/hash-ai-worker-py...[HEAD^]' --dry-run=json | jq '.packages != []')
          REQUIRES_INTEGRATION_WORKER=$(turbo run build --filter '@apps/hash-integration-worker...[HEAD^]' --dry-run=json | jq '.packages != []')
          if echo "$INTEGRATION_PACKAGES" | grep -q '@tests/hash-backend-integration'; then
              REQUIRES_GRAPH=true
          fi
          if echo "$INTEGRATION_PACKAGES" | grep -q '@tests/hash-playwright'; then
            REQUIRES_GRAPH=true
            REQUIRES_AI_WORKER_TS=true
            REQUIRES_AI_WORKER_PY=true
            REQUIRES_INTEGRATION_WORKER=true
          fi

          DOCKER_PACKAGES = []

          if [[ $REQUIRES_GRAPH == 'true' ]]; then
            DOCKER_PACKAGES=$(echo "$DOCKER_PACKAGES" | jq -c '. += ["@apps/hash-graph"]')
          fi
          if [[ $REQUIRES_AI_WORKER_TS == 'true' ]]; then
            DOCKER_PACKAGES=$(echo "$DOCKER_PACKAGES" | jq -c '. += ["@apps/hash-ai-worker-ts"]')
          fi
          if [[ $REQUIRES_AI_WORKER_PY == 'true' ]]; then
            DOCKER_PACKAGES=$(echo "$DOCKER_PACKAGES" | jq -c '. += ["@apps/hash-ai-worker-py"]')
          fi
          if [[ $REQUIRES_INTEGRATION_WORKER == 'true' ]]; then
            DOCKER_PACKAGES=$(echo "$DOCKER_PACKAGES" | jq -c '. += ["@apps/hash-integration-worker"]')
          fi

          set -x
          echo "units=$UNIT_PACKAGES" >> $GITHUB_OUTPUT
          echo "integrations=$INTEGRATION_PACKAGES" >> $GITHUB_OUTPUT
          echo "dockers=$DOCKER_PACKAGES" >> $GITHUB_OUTPUT

  unit:
    name: Unit
    needs: [setup]
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.units) }}
      fail-fast: false
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Install turbo
        run: yarn global add turbo

      - name: Prune repository
        run: |
          turbo prune --scope="${{ matrix.package }}"
          cp .env out/.env
          cp yarn.lock out/yarn.lock
          cp -r patches out/patches

      - name: Install yarn dependencies
        env:
          HUSKY: 0
        run: yarn install --cwd out

      - name: Run tests
        working-directory: out
        run: turbo run test --filter "${{ matrix.package }}"

  build:
    name: Build
    runs-on: ubuntu-22.04
    needs: [setup]
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.dockers) }}
      fail-fast: false
    steps:
      - name: Build image
        uses: ./.github/actions/build-docker-images
        with:
          hash-graph: ${{ matrix.package == '@apps/hash-graph' }}
          hash-ai-worker-ts: ${{ matrix.package == '@apps/hash-ai-worker-ts' }}
          hash-ai-worker-py: ${{ matrix.package == '@apps/hash-ai-worker-py' }}
          hash-integration-worker: ${{ matrix.package == '@apps/hash-integration-worker' }}

  integration:
    name: Integrations
    needs: [setup, build]
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.integrations) }}
      fail-fast: false
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Install turbo
        run: yarn global add turbo

      - name: Prune repository
        run: |
          turbo prune --scope="${{ matrix.package }}"
          cp .env out/.env
          cp yarn.lock out/yarn.lock
          cp -r patches out/patches

      - name: Install yarn dependencies
        env:
          HUSKY: 0
        run: yarn install --cwd out

      - name: Load Docker images
        uses: ./.github/actions/load-docker-images
        with:
          hash-graph: true
          hash-ai-worker-ts: ${{ matrix.package == '@tests/hash-playwright' }}
          hash-ai-worker-py: ${{ matrix.package == '@tests/hash-playwright' }}
          hash-integration-worker: ${{ matrix.package == '@tests/hash-playwright' }}

      - name: Launch external services
        working-directory: out
        run: |
          turbo codegen --filter '@apps/hash-external-services'
          if [[ ${{ matrix.package }} != '@tests/hash-playwright' ]]; then
            yarn workspace @apps/hash-external-services deploy:test up graph kratos --wait
          else 
            yarn workspace @apps/hash-external-services deploy up --detach
          fi

      - name: Launch HASH-API
        if: matrix.package == '@tests/hash-playwright'
        working-directory: out
        run: |
          turbo run dev --filter "@apps/hash-api" &
          yarn wait-on --timeout 120000 http://0.0.0.0:5001

      - name: Launch frontend
        if: matrix.package == '@tests/hash-playwright'
        working-directory: out
        run: |
          turbo run start --filter "@apps/hash-frontend" &
          yarn wait-on --timeout 30000 http://0.0.0.0:3000

      - name: Run tests
        working-directory: out
        run: turbo run test --filter "${{ matrix.package }}"
