name: Bench

on:
  pull_request:
  push:
    branches:
      - main

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: hashintel
  TURBO_REMOTE_ONLY: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:
      unit: ${{ steps.packages.outputs.unit }}
      integration: ${{ steps.packages.outputs.integration }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
        with:
          fetch-depth: 2

      - name: Install turbo
        uses: ./.github/actions/install-turbo

      - name: Determine changed packages
        id: packages
        run: |
          UNIT_BENCH_FILTER=$(turbo run bench:unit --dry-run=json --filter '...[HEAD^]' | jq -e '.packages | contains(["//"])' > /dev/null && echo '' || echo '--filter ...[HEAD^]')
          UNIT_BENCH_TASKS=$(sh -c "turbo run bench:unit --dry-run=json $UNIT_BENCH_FILTER" | jq -c '.tasks[]')
          UNIT_BENCH_PACKAGES=$(echo "$UNIT_BENCH_TASKS" \
            | jq 'select(.task == "bench:unit" and .command != "<NONEXISTENT>")' \
            | jq --compact-output --slurp '{ package: [.[].package] | unique, include: [( .[] | {package: .package, directory: .directory })] | unique }')

          INTEGRATION_BENCH_FILTER=$(turbo run bench:integration --dry-run=json --filter '...[HEAD^]' | jq -e '.packages | contains(["//"])' > /dev/null && echo '' || echo '--filter ...[HEAD^]')
          INTEGRATION_BENCH_TASKS=$(sh -c "turbo run bench:integration --dry-run=json $INTEGRATION_BENCH_FILTER" | jq -c '.tasks[]')
          INTEGRATION_BENCH_PACKAGES=$(echo "$INTEGRATION_BENCH_TASKS" \
            | jq 'select(.task == "bench:integration" and .command != "<NONEXISTENT>")' \
            | jq --compact-output --slurp '{ package: [.[].package] | unique, include: [( .[] | {package: .package, directory: .directory })] | unique }')

          set -x
          echo "unit=$UNIT_BENCH_PACKAGES" >> $GITHUB_OUTPUT
          echo "integration=$INTEGRATION_BENCH_PACKAGES" >> $GITHUB_OUTPUT

  unit-benches:
    name: Unit
    needs: [setup]
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.unit) }}
      fail-fast: false
    if: needs.setup.outputs.unit != '{"package":[],"include":[]}'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install turbo
        uses: ./.github/actions/install-turbo

      - name: Find bench steps to run
        id: benches
        run: |
          HAS_RUST=$([[ -f "${{ matrix.directory }}/Cargo.toml" || ${{ matrix.directory }} = "apps/hash-graph" ]] && echo 'true' || echo 'false')
          echo "has-rust=$HAS_RUST" >> $GITHUB_OUTPUT
          if [[ $HAS_RUST = 'true' ]]; then
            if [[ -f "${{ matrix.directory }}/rust-toolchain.toml" ]]; then
              RUST_TOOLCHAIN_FILE="${{ matrix.directory }}/rust-toolchain.toml"
            else
              RUST_TOOLCHAIN_FILE="rust-toolchain.toml"
            fi
            echo "rust-toolchain=$(yq '.toolchain.channel' $RUST_TOOLCHAIN_FILE)" >> $GITHUB_OUTPUT
          fi

      - name: Prune repository
        uses: ./.github/actions/prune-repository
        with:
          scope: ${{ matrix.package }}

      - name: Install Protobuf
        if: always() && steps.benches.outputs.has-rust == 'true'
        run: sudo apt install protobuf-compiler

      - name: Install Rust toolchain
        if: always() && steps.benches.outputs.has-rust == 'true'
        uses: ./.github/actions/install-rust-toolchain
        with:
          toolchain: ${{ steps.benches.outputs.rust-toolchain }}
          working-directory: ${{ matrix.directory }}

      - name: Install Rust tools
        if: always() && steps.benches.outputs.has-rust == 'true'
        uses: taiki-e/install-action@00a67321d66e038602baf558d366a594a7019ea2 # v2.33.9
        with:
          tool: just@1.13.0

      - name: Warm up repository
        uses: ./.github/actions/warm-up-repo

      - name: Cache Rust dependencies
        if: always() && steps.benches.outputs.has-rust == 'true'
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
        with:
          workspaces: ${{ matrix.directory }}
          save-if: ${{ !startsWith(github.ref, 'refs/heads/gh-readonly-queue') }}

      - name: Run benches
        continue-on-error: ${{ steps.benches.outputs.allow-failure == 'true' }}
        run: turbo run bench:unit --filter "${{ matrix.package }}"

  integration-benches:
    name: Integration
    needs: [setup]
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.integration) }}
      fail-fast: false
    if: needs.setup.outputs.integration != '{"package":[],"include":[]}'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Install turbo
        uses: ./.github/actions/install-turbo

      - name: Find bench steps to run
        id: benches
        run: |
          COMPARE=$(turbo run bench:compare --dry-run=json --filter "${{ matrix.package }}" | jq -c '.tasks[] | select(.task == "bench:compare" and .command != "<NONEXISTENT>") != []')
          echo "compare-results=$COMPARE" >> $GITHUB_OUTPUT

          HAS_RUST=$([[ -f "${{ matrix.directory }}/Cargo.toml" || ${{ matrix.directory }} = "apps/hash-graph" ]] && echo 'true' || echo 'false')
          echo "has-rust=$HAS_RUST" >> $GITHUB_OUTPUT
          if [[ $HAS_RUST = 'true' ]]; then
            if [[ -f "${{ matrix.directory }}/rust-toolchain.toml" ]]; then
              RUST_TOOLCHAIN_FILE="${{ matrix.directory }}/rust-toolchain.toml"
            else
              RUST_TOOLCHAIN_FILE="rust-toolchain.toml"
            fi
            echo "rust-toolchain=$(yq '.toolchain.channel' $RUST_TOOLCHAIN_FILE)" >> $GITHUB_OUTPUT
          fi

      - name: Prune repository
        uses: ./.github/actions/prune-repository
        with:
          scope: |
            ${{ matrix.package }}
            @apps/hash-external-services

      #      - name: Install Rust toolchain
      #        if: always() && steps.benches.outputs.has-rust == 'true'
      #        uses: ./.github/actions/install-rust-toolchain
      #        with:
      #          toolchain: ${{ steps.benches.outputs.rust-toolchain }}
      #          working-directory: ${{ matrix.directory }}
      #
      #      - name: Install Rust tools
      #        if: always() && steps.benches.outputs.has-rust == 'true'
      #        uses: taiki-e/install-action@00a67321d66e038602baf558d366a594a7019ea2 # v2.33.9
      #        with:
      #          tool: just@1.13.0,critcmp@0.1.8
      #
      #      - name: Warm up repository
      #        uses: ./.github/actions/warm-up-repo
      #
      #      - name: Install Protobuf
      #        if: always() && steps.benches.outputs.has-rust == 'true'
      #        run: sudo apt install protobuf-compiler
      #
      #      - name: Cache Rust dependencies
      #        if: always() && steps.benches.outputs.has-rust == 'true'
      #        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
      #        with:
      #          workspaces: ${{ matrix.directory }}
      #          save-if: ${{ !startsWith(github.ref, 'refs/heads/gh-readonly-queue') }}
      #
      #      - name: Launch external services
      #        run: |
      #          turbo codegen --filter '@apps/hash-external-services'
      #
      #          SERVICES="hydra kratos redis spicedb"
      #
      #          echo "Running services: $SERVICES"
      #          yarn workspace @apps/hash-external-services deploy:test up $SERVICES --wait

      - name: Run benches
        continue-on-error: ${{ steps.benches.outputs.allow-failure == 'true' }}
        run: turbo run bench:integration --filter "${{ matrix.package }}"

      - name: Compare results
        if: steps.benches.outputs.compare-results == 'true'
        run: |
          turbo run bench:compare --filter "${{ matrix.package }}"
          TRIMMED_PACKAGE_NAME=$(echo "${{ matrix.package }}" | sed 's|@||g' | sed 's|/|.|g')
          echo "TRIMMED_PACKAGE_NAME=$TRIMMED_PACKAGE_NAME" >> $GITHUB_ENV
          echo '<details><summary>##${{ matrix.package }}</summary>' > "/tmp/$TRIMMED_PACKAGE_NAME.md"
          echo ${{ matrix.directory }} out/index.md >> "/tmp/$TRIMMED_PACKAGE_NAME.md"
          echo '</details>' >> "/tmp/$TRIMMED_PACKAGE_NAME.md"

      - name: Upload benchmark results
        if: steps.benches.outputs.compare-results == 'true'
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: ${{ env.TRIMMED_PACKAGE_NAME }}_${{ github.job }}
          path: /tmp/${{ env.TRIMMED_PACKAGE_NAME }}.md

  #      - name: Show container logs
  #        if: ${{ success() || failure() }}
  #        run: yarn workspace @apps/hash-external-services deploy logs --timestamps

  passed:
    name: Benches passed
    needs: [setup, unit-benches, integration-benches]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check setup script
        run: |
          [[ ${{ needs.setup.result }} = success ]]
      - name: Check unit benches
        run: |
          [[ ${{ needs.unit-benches.result }} =~ success|skipped ]]
      - name: Check integration benches
        run: |
          [[ ${{ needs.integration-benches.result }} =~ success|skipped ]]

      - name: Notify Slack on failure
        uses: rtCamp/action-slack-notify@19c86e40d4bc3be986b18f1459d4549536887065
        if: ${{ failure() && github.event_name == 'merge_group' }}
        env:
          SLACK_LINK_NAMES: true
          SLACK_MESSAGE: "At least one bench job failed for a Pull Request in the Merge Queue failed <@U0143NL4GMP> <@U027NPY8Y3X> <@U02NLJY0FGX>"
          SLACK_TITLE: Tests failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: GitHub
          VAULT_ADDR: ""
          VAULT_TOKEN: ""

      - name: Checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Download reports' artifacts
        if: github.event_name == 'pull_request'
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          path: downloads

      - name: Post comment
        if: github.event_name == 'pull_request'
        run: |
          cat downloads/*/*.md
