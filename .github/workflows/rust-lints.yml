name: Rust-Lint

on:
  pull_request:

defaults:
  run:
    shell: bash


concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  find-crates:
    name: Find all crates
    runs-on: ubuntu-latest
    outputs:
      crates: ${{ steps.find.outputs.crates }}
      run_job: ${{ steps.check_files.outputs.run_job }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Find crates
        id: find
        run: echo "::set-output name=crates::$(find -name Cargo.toml -printf '%h\n' | sed 's:./::' | jq -R | jq -sc)"
      - name: check files
        id: check_files
        run: |
          echo "=============== list changed files ==============="
          git diff --name-only HEAD^ HEAD 
          
          echo "========== check paths of changed files =========="
          git diff --name-only HEAD^ HEAD | while read file; do
            echo $file
            if [[ $file == *.rs || $file == *.toml || $file == *Cargo* ]]; then
              echo "::set-output name=run_job::true"
              exit 0
            fi
          done
          echo "::set-output name=run_job::false"

  rustfmt:
    name: rustfmt
    needs: find-crates
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJSON(needs.find-crates.outputs.crates) }}
      fail-fast: false
    env:
      V8_PATH: ${{ github.workspace }}/.v8
    steps:
      - name: Checkout source code
        if: needs.check.outputs.run_job == 'true'
        uses: actions/checkout@v2
        
        # Emitting checkstyle results in multiple xml documents for each crate so rustfmt is run for each crate
      - name: Remove default members
        if: needs.check.outputs.run_job == 'true'
        run: |
          sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        if: needs.check.outputs.run_job == 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # TODO: Read this from rust-toolchain.toml
          toolchain: nightly-2021-12-14
          override: true
          components: rustfmt

      - name: Run rustfmt
        if: needs.check.outputs.run_job == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path ${{ matrix.directory }}/Cargo.toml -- --check

      - name: Setup PHP
        if: ${{ failure() && needs.check.outputs.run_job == 'true' }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.3
          coverage: none
          tools: cs2pr

      - name: Annotate
        if: ${{ failure() && needs.check.outputs.run_job == 'true' }}
        run: |
          cargo fmt --manifest-path ${{ matrix.directory }}/Cargo.toml -- --emit checkstyle | cs2pr

  clippy:
    name: clippy
    needs: find-crates
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory:
          - packages/engine
      fail-fast: false
    env:
      V8_PATH: ${{ github.workspace }}/.v8
    steps:
      - name: Checkout source code
        if: needs.check.outputs.run_job == 'true'
        uses: actions/checkout@v2

      - name: Install Rust
        if: needs.check.outputs.run_job == 'true'
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # TODO: Read this from rust-toolchain.toml
          toolchain: nightly-2021-12-14
          override: true
          components: clippy

      - name: Cache dependencies
        if: needs.check.outputs.run_job == 'true'
        uses: actions/cache@v2
        env:
          cache-name: cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            **/target/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.directory }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install v8
        if: needs.check.outputs.run_job == 'true'
        run: |
          mkdir -p ${V8_PATH}/tmp
          cd ${V8_PATH}/tmp
          curl -L -o libv8.tar.gz https://github.com/rubyjs/libv8/releases/download/v8.4.255.0/libv8-8.4.255.0-x86_64-linux.gem
          tar xf libv8.tar.gz # Extract the gem
          tar xf data.tar.gz # Extract the data folder
          mv -v vendor/v8/* .. # Move out the wanted files
          cd ..
          rm -rf tmp # Delete the tmp folder

      - name: Run clippy
        if: needs.check.outputs.run_job == 'true'
        run: |
          cargo clippy --manifest-path ${{ matrix.directory }}/Cargo.toml --all --all-features -- -D warnings

      - name: Annotate
        if: ${{ failure() && needs.check.outputs.run_job == 'true' }}
        # use `actions-rs/clippy-check@v1` when https://github.com/actions-rs/clippy-check/pull/158 is merged
        uses: reinismu/clippy-check@master
        with:
          name: clippy (${{ matrix.directory }})
          token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ${{ matrix.directory }}
          args: --all --all-features
