name: Rust

on:
  pull_request:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      rustfmt: ${{ steps.crates.outputs.rustfmt }}
      clippy: ${{ steps.crates.outputs.clippy }}
      test: ${{ steps.crates.outputs.test }}
      bench: ${{ steps.crates.outputs.bench }}
      miri: ${{ steps.crates.outputs.miri }}
      doc: ${{ steps.crates.outputs.doc }}
      publish: ${{ steps.crates.outputs.publish }}
      samples: ${{ steps.samples.outputs.samples }}
      nightly: ${{ steps.toolchains.outputs.nightly }}
      exclude: ${{ steps.crates.outputs.exclude }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Setup CI
        uses: ./.github/actions/setup-rust-ci

      - name: Find changed crates
        id: crates
        run: python .github/scripts/rust/setup.py

      - name: Find toolchain
        id: toolchains
        run: |
          nightly=$(cat $(find . -name rust-toolchain.toml) | grep channel | cut -d\" -f2)
          echo "::set-output name=nightly::$nightly"
          echo "use toolchains: $(echo $nightly | jq -r)"

      - name: Determine samples
        id: samples
        run: |
          if [[ ${{ github.event_name }} = pull_request ]]; then
            echo "::set-output name=samples::1"
          else
            echo "::set-output name=samples::10"
          fi
  rustfmt:
    name: rustfmt
    needs: setup
    if: needs.setup.outputs.rustfmt != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.rustfmt) }}
        toolchain:
          - ${{ needs.setup.outputs.nightly }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: rustfmt

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path ${{ matrix.directory }}/Cargo.toml -- --check

      - name: Setup PHP
        if: ${{ failure() }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.3
          coverage: none
          tools: cs2pr

      - name: Annotate
        if: ${{ failure() }}
        run: cargo fmt --manifest-path ${{ matrix.directory }}/Cargo.toml -- --emit checkstyle | cs2pr

  clippy:
    name: clippy
    needs: setup
    if: needs.setup.outputs.clippy != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.clippy) }}
        toolchain:
          - stable
          - ${{ needs.setup.outputs.nightly }}
        flags:
          - --all-features
          - --no-default-features
        exclude: ${{ fromJSON(needs.setup.outputs.exclude) }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/checkouts
            **/target/
          key: ${{ runner.os }}-clippy-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-clippy-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}
            ${{ runner.os }}-clippy-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Run clippy
        run: |
          # Even though we want to test without default features, NNG is a requirement for running so we either have to
          # enable the feature or acquire an NNG build in CI ourselves, so we re-enable the feature here.
          required_features=$(cat ${{ matrix.directory }}/Cargo.toml | grep -q 'build-nng' && echo "--features build-nng" || echo "")

          cargo clippy --manifest-path ${{ matrix.directory }}/Cargo.toml --no-deps --tests ${{ matrix.flags }} $required_features -- -D warnings

      - name: Annotate
        if: ${{ failure() }}
        # use `actions-rs/clippy-check@v1` when https://github.com/actions-rs/clippy-check/pull/158 is merged
        uses: reinismu/clippy-check@master
        with:
          name: clippy (${{ matrix.directory }})
          token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ${{ matrix.directory }}
          args: --no-deps --tests ${{ matrix.flags }}

  test:
    name: test
    needs: setup
    if: needs.setup.outputs.test != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.test) }}
        toolchain:
          - stable
          - ${{ needs.setup.outputs.nightly }}
        flags:
          - --all-features
          - --no-default-features
        exclude: ${{ fromJSON(needs.setup.outputs.exclude) }}
    env:
      OUTPUT_DIRECTORY: test-results
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/checkouts
            **/target/
          key: ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}
            ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Build tests
        if: matrix.directory == 'packages/engine'
        run: |
          # Even though we want to test without default features, NNG is a requirement for running so we either have to
          # enable the feature or acquire an NNG build in CI ourselves, so we re-enable the feature here.
          required_features=$(cat ${{ matrix.directory }}/Cargo.toml | grep -q 'build-nng' && echo "--features build-nng" || echo "")

          cargo test --manifest-path ${{ matrix.directory }}/Cargo.toml --no-run ${{ matrix.flags }} $required_features

      - name: Setup Python environment
        if: matrix.directory == 'packages/engine'
        working-directory: ${{ matrix.directory }}
        run: |
          lib/execution/src/runner/python/setup.sh python3.7

      - name: Run tests
        run: |
          # Even though we want to test without default features, NNG is a requirement for running so we either have to
          # enable the feature or acquire an NNG build in CI ourselves, so we re-enable the feature here.
          required_features=$(cat ${{ matrix.directory }}/Cargo.toml | grep -q 'build-nng' && echo "--features build-nng" || echo "")

          cargo test --manifest-path ${{ matrix.directory }}/Cargo.toml --no-fail-fast ${{ matrix.flags }} $required_features

      # Non-empty diff could be a Cargo.lock that wasn't committed.
      - name: Ensure empty git diff
        run: |
          # Restore files modified for CI
          git checkout HEAD -- "${{ matrix.directory }}/Cargo.toml"

          git --no-pager diff --exit-code --color

  bench:
    name: bench
    needs: setup
    if: needs.setup.outputs.bench != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.bench) }}
        toolchain:
          - stable
          - ${{ needs.setup.outputs.nightly }}
        tests:
          - integration
        flags:
          - --release
        exclude: ${{ fromJSON(needs.setup.outputs.exclude) }}
    env:
      OUTPUT_DIRECTORY: test-results
      SAMPLES: ${{ needs.setup.outputs.samples }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/checkouts
            **/target/
          key: ${{ runner.os }}-bench-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-bench-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}
            ${{ runner.os }}-bench-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Build tests
        if: matrix.directory == 'packages/engine'
        run: cargo test --manifest-path ${{ matrix.directory }}/Cargo.toml --no-run ${{ matrix.flags }}

      - name: Setup Python environment
        if: matrix.directory == 'packages/engine'
        working-directory: ${{ matrix.directory }}
        run: |
          lib/execution/src/runner/python/setup.sh python3.7

      - name: Run tests
        run: cargo test --test ${{ matrix.tests }} --manifest-path ${{ matrix.directory }}/Cargo.toml --no-fail-fast ${{ matrix.flags }} -- --test-threads=1

      - name: Upload to DataDog
        if: always()
        run: |
          message=$(find ${{ matrix.directory }}/${{ env.OUTPUT_DIRECTORY }} -name timing.json -exec cat {} + \
                    | sed 's|::|-|g' \
                    | jq '{(.test_path): . | del(.test_path)}' | jq -s add)
          directory="${{ matrix.directory }}"
          tags="crate:${directory##*/},event:${{ github.event_name }},test:${{ matrix.tests }},stage:dev,toolchain:${{ matrix.toolchain }},user:${{ github.actor }}"
          if [[ ${{ github.ref_type }} = branch ]]; then
            tags="$tags,branch:${{ github.ref_name }}"
          fi
          curl -X POST "https://http-intake.logs.datadoghq.com/api/v2/logs" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d $(jq -cn \
                    --argjson message "$message" \
                    --arg ddtags "$tags" \
                    '{ message: $message, ddsource: "hash-gh-actions", hostname: "github", service: "actions", ddtags: $ddtags }')

  miri:
    name: miri
    needs: setup
    if: needs.setup.outputs.miri != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.miri) }}
        toolchain:
          - ${{ needs.setup.outputs.nightly }}
        flags:
          - --no-default-features
          - --all-features
        exclude: ${{ fromJSON(needs.setup.outputs.exclude) }}
    env:
      OUTPUT_DIRECTORY: test-results
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: miri

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/checkouts
            **/target/
          key: ${{ runner.os }}-miri-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-miri-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}
            ${{ runner.os }}-miri-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Setup miri
        working-directory: ${{ matrix.directory }}
        run: cargo miri setup

      - name: Run miri
        working-directory: ${{ matrix.directory }}
        run: |
          # Even though we want to test without default features, NNG is a requirement for running so we either have to
          # enable the feature or acquire an NNG build in CI ourselves, so we re-enable the feature here.
          required_features=$(cat Cargo.toml | grep -q 'build-nng' && echo "--features build-nng" || echo "")

          cargo miri test ${{ matrix.flags }} $required_features

  doc:
    name: doc
    needs: setup
    if: needs.setup.outputs.doc != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.doc) }}
        toolchain:
          - ${{ needs.setup.outputs.nightly }}
        flags:
          - --all-features
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/checkouts
            **/target/
          key: ${{ runner.os }}-doc-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-doc-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}
            ${{ runner.os }}-doc-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Check public documentation
        uses: actions-rs/cargo@v1
        with:
          command: rustdoc
          args: --manifest-path ${{ matrix.directory }}/Cargo.toml ${{ matrix.flags }} -- -Z unstable-options --check -D warnings

      - name: Check private documentation
        uses: actions-rs/cargo@v1
        with:
          command: rustdoc
          args: --manifest-path ${{ matrix.directory }}/Cargo.toml ${{ matrix.flags }} -- -Z unstable-options --check --document-private-items -D warnings

      - name: Show public coverage
        if: always()
        uses: actions-rs/cargo@v1
        with:
          command: rustdoc
          args: --manifest-path ${{ matrix.directory }}/Cargo.toml ${{ matrix.flags }} -- -Z unstable-options --show-coverage

      - name: Show private coverage
        if: always()
        uses: actions-rs/cargo@v1
        with:
          command: rustdoc
          args: --manifest-path ${{ matrix.directory }}/Cargo.toml ${{ matrix.flags }} -- -Z unstable-options --show-coverage --document-private-items

  publish:
    name: publish
    needs: setup
    if: needs.setup.outputs.publish != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.publish) }}
        toolchain:
          - ${{ needs.setup.outputs.nightly }}
        flags:
          - --all-features
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Login
        run: |
          [[ -n "${{ secrets.CARGO_REGISTRY_TOKEN }}" ]]
          cargo login "${{ secrets.CARGO_REGISTRY_TOKEN }}"

      - name: Publish (dry run)
        if: github.event_name == 'pull_request'
        working-directory: ${{ matrix.directory }}
        run: cargo publish ${{ matrix.flags }} --dry-run

      - name: Publish
        if: github.event_name == 'push'
        working-directory: ${{ matrix.directory }}
        run: cargo publish ${{ matrix.flags }}

  merging-enabled:
    name: merging enabled
    needs: [rustfmt, clippy, test, bench, miri, doc, publish]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: check rustfmt
        run: |
          [[ ${{ needs.rustfmt.result }} =~ success|skipped ]]
      - name: check clippy
        run: |
          [[ ${{ needs.clippy.result }} =~ success|skipped ]]
      - name: check test
        run: |
          [[ ${{ needs.test.result }} =~ success|skipped ]]
      - name: check bench
        run: |
          [[ ${{ needs.bench.result }} =~ success|skipped ]]
      - name: check miri
        run: |
          [[ ${{ needs.miri.result }} =~ success|skipped ]]
      - name: check doc
        run: |
          [[ ${{ needs.doc.result }} =~ success|skipped ]]
      - name: check publish
        run: |
          [[ ${{ needs.publish.result }} =~ success|skipped ]]
