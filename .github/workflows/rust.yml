name: Rust

on:
  pull_request:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      rustfmt: ${{ steps.crates.outputs.rustfmt }}
      clippy: ${{ steps.crates.outputs.clippy }}
      test: ${{ steps.crates.outputs.test }}
      bench: ${{ steps.crates.outputs.bench }}
      samples: ${{ steps.samples.outputs.samples }}
      toolchains: ${{ steps.toolchains.outputs.toolchains }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Find changed crates
        id: crates
        run: |
          available_crates="$(find . -name Cargo.toml -printf '%h\n' | sed 's:./::' | sort | tac)"
          changed_files="$(git diff --name-only HEAD^ HEAD)"

          changed_crates=""

          while read -r file; do
            while read -r crate; do
              if [[ $file =~ $crate ]] || [[ $file =~ .github ]]; then
                changed_crates=$(echo -e "${crate}\n$changed_crates")
              fi
            done <<< "$available_crates"
          done <<< "$changed_files"

          # We always run "packages/engine" tests when a nested crate was changed
          test_crates="$changed_crates"
          if echo "$test_crates" | grep -qe "^packages/engine"; then
            test_crates=$(echo -e "${changed_crates}\npackages/engine")
          fi

          changed_crates=$(echo "$changed_crates" | sort | uniq | jq -R | jq -sc '[ .[] | select(length > 0) ]')
          bench_crates=$(echo "$test_crates" | sort | uniq | jq -R | jq -sc '[ .[] | select(. == "packages/engine") ]')
          test_crates=$(echo "$test_crates" | sort | uniq | jq -R | jq -sc '[ .[] | select(length > 0) ]')

          echo "::set-output name=rustfmt::$changed_crates"
          echo "::set-output name=clippy::$changed_crates"
          echo "::set-output name=test::$test_crates"
          echo "::set-output name=bench::$bench_crates"

          echo "run \`cargo fmt\` for: $(echo "$changed_crates" | jq -r)"
          echo "run \`cargo clippy\` for: $(echo "$changed_crates" | jq -r)"
          echo "run \`cargo test\` for: $(echo "$test_crates" | jq -r)"
          echo "run \`cargo test --release\` for: $(echo "$bench_crates" | jq -r)"
      - name: Find toolchain
        id: toolchains
        run: |
          toolchains=$(cat $(find . -name rust-toolchain.toml) | grep channel | cut -d\" -f2 | jq -R | jq -sc)
          echo "::set-output name=toolchains::$toolchains"
          echo "use toolchains: $(echo $toolchains | jq -r)"

      - name: Determine samples
        id: samples
        run: |
          if [[ ${{ github.event_name }} = pull_request ]]; then
            echo "::set-output name=samples::1"
          else
            echo "::set-output name=samples::10"
          fi
  rustfmt:
    name: rustfmt
    needs: setup
    if: needs.setup.outputs.rustfmt != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.rustfmt) }}
        toolchain: ${{ fromJSON(needs.setup.outputs.toolchains) }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: rustfmt

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path ${{ matrix.directory }}/Cargo.toml -- --check

      - name: Setup PHP
        if: ${{ failure() }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.3
          coverage: none
          tools: cs2pr

      - name: Annotate
        if: ${{ failure() }}
        run: cargo fmt --manifest-path ${{ matrix.directory }}/Cargo.toml -- --emit checkstyle | cs2pr

  clippy:
    name: clippy
    needs: setup
    if: needs.setup.outputs.clippy != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.clippy) }}
        toolchain: ${{ fromJSON(needs.setup.outputs.toolchains) }}
        flags:
          - --all-features
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            **/target/
          key: ${{ runner.os }}-clippy-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-clippy-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}
            ${{ runner.os }}-clippy-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Run clippy
        run: cargo clippy --manifest-path ${{ matrix.directory }}/Cargo.toml --no-deps ${{ matrix.flags }} -- -D warnings

      - name: Annotate
        if: ${{ failure() }}
        # use `actions-rs/clippy-check@v1` when https://github.com/actions-rs/clippy-check/pull/158 is merged
        uses: reinismu/clippy-check@master
        with:
          name: clippy (${{ matrix.directory }})
          token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ${{ matrix.directory }}
          args: --no-deps ${{ matrix.flags }}

  test:
    name: test
    needs: setup
    if: needs.setup.outputs.test != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.test) }}
        toolchain: ${{ fromJSON(needs.setup.outputs.toolchains) }}
        flags:
          - --all-features
          - ""
    env:
      OUTPUT_DIRECTORY: test-results
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            **/target/
          key: ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}
            ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Build tests
        if: matrix.directory == 'packages/engine'
        run: cargo test --manifest-path ${{ matrix.directory }}/Cargo.toml --no-run ${{ matrix.flags }}

      - name: Setup Python environment
        if: matrix.directory == 'packages/engine'
        working-directory: ${{ matrix.directory }}
        run: |
          src/worker/runner/python/setup.sh python3.7

      - name: Run tests
        run: cargo test --manifest-path ${{ matrix.directory }}/Cargo.toml --no-fail-fast ${{ matrix.flags }}

  bench:
    name: bench
    needs: setup
    if: needs.setup.outputs.bench != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.bench) }}
        toolchain: ${{ fromJSON(needs.setup.outputs.toolchains) }}
        tests:
          - integration
        flags:
          - --release
    env:
      OUTPUT_DIRECTORY: test-results
      SAMPLES: ${{ needs.setup.outputs.samples }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            **/target/
          key: ${{ runner.os }}-bench-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-bench-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}
            ${{ runner.os }}-bench-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Build tests
        if: matrix.directory == 'packages/engine'
        run: cargo test --manifest-path ${{ matrix.directory }}/Cargo.toml --no-run ${{ matrix.flags }}

      - name: Setup Python environment
        if: matrix.directory == 'packages/engine'
        working-directory: ${{ matrix.directory }}
        run: |
          src/worker/runner/python/setup.sh python3.7

      - name: Run tests
        run: cargo test --test ${{ matrix.tests }} --manifest-path ${{ matrix.directory }}/Cargo.toml --no-fail-fast ${{ matrix.flags }} -- --test-threads=1

      - name: Upload to DataDog
        if: always()
        run: |
          message=$(find ${{ matrix.directory }}/${{ env.OUTPUT_DIRECTORY }} -name timing.json -exec cat {} + \
                    | sed 's|::|-|g' \
                    | jq '{(.test_path): . | del(.test_path)}' | jq -s add)
          directory="${{ matrix.directory }}"
          tags="crate:${directory##*/},event:${{ github.event_name }},test:${{ matrix.tests }},stage:dev,toolchain:${{ matrix.toolchain }},user:${{ github.actor }}"
          if [[ ${{ github.ref_type }} = branch ]]; then
            tags="$tags,branch:${{ github.ref_name }}"
          fi
          curl -X POST "https://http-intake.logs.datadoghq.com/api/v2/logs" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d $(jq -cn \
                    --argjson message "$message" \
                    --arg ddtags "$tags" \
                    '{ message: $message, ddsource: "hash-gh-actions", hostname: "github", service: "actions", ddtags: $ddtags }')

  merging-enabled:
    name: merging enabled
    needs: [rustfmt, clippy, test, bench]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: check rustfmt
        run: |
          [[ ${{ needs.rustfmt.result }} =~ success|skipped ]]
      - name: check clippy
        run: |
          [[ ${{ needs.clippy.result }} =~ success|skipped ]]
      - name: check test
        run: |
          [[ ${{ needs.test.result }} =~ success|skipped ]]
      - name: check bench
        run: |
          [[ ${{ needs.bench.result }} =~ success|skipped ]]
