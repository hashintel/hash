name: Rust

on:
  pull_request:
  push:
    branches:
      - main
      - dev/**
      - "trunk-merge/**"

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      lint: ${{ steps.crates.outputs.lint }}
      test: ${{ steps.crates.outputs.test }}
      coverage: ${{ steps.crates.outputs.coverage }}
      docker: ${{ steps.crates.outputs.docker }}
      publish: ${{ steps.crates.outputs.publish }}
      samples: ${{ steps.samples.outputs.samples }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Setup CI
        uses: ./.github/actions/setup-rust-ci

      - name: Find changed crates
        id: crates
        run: |
          export GITHUB_OUTPUT_FILE_PATH=$(mktemp)
          python .github/scripts/rust/setup.py
          cat $GITHUB_OUTPUT_FILE_PATH >> $GITHUB_OUTPUT

      - name: Determine samples
        id: samples
        run: |
          if [[ ${{ github.event_name }} = pull_request ]]; then
            echo "samples=1" >> $GITHUB_OUTPUT
          else
            echo "samples=10" >> $GITHUB_OUTPUT
          fi

  lint:
    name: lint
    needs: setup
    if: needs.setup.outputs.lint != '{}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.lint) }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: ./.github/actions/install-rust-toolchain
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Install tools
        shell: bash
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall cargo-make --version 0.36.3 || cargo install --version 0.36.3 cargo-make
          cargo quickinstall cargo-hack --version 0.5.26 || cargo install --version 0.5.26 cargo-hack

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ matrix.directory }}

      # To be removed once https://github.com/open-telemetry/opentelemetry-rust/issues/934 is sorted
      - name: Install Protoc
        if: matrix.directory == 'apps/hash-graph'
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check formatting
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} make format -- --check

      - name: Check clippy
        working-directory: ${{ matrix.directory }}
        if: always()
        run: cargo +${{ matrix.toolchain }} make clippy -- -D warnings

      - name: Check public documentation
        working-directory: ${{ matrix.directory }}
        if: always()
        env:
          RUSTDOCFLAGS: "--check -Z unstable-options -D warnings"
        run: cargo +${{ matrix.toolchain }} make doc

      - name: Check private documentation
        working-directory: ${{ matrix.directory }}
        if: always()
        env:
          RUSTDOCFLAGS: "--check -Z unstable-options -D warnings"
        run: cargo +${{ matrix.toolchain }} make doc --document-private-items

      - name: Ensure empty git diff
        run: git --no-pager diff --exit-code --color

  test:
    name: test
    needs: setup
    if: needs.setup.outputs.test != '{}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.test) }}
    env:
      OUTPUT_DIRECTORY: test-results
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: ./.github/actions/install-rust-toolchain
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Install tools
        shell: bash
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall cargo-make --version 0.36.3 || cargo install --version 0.36.3 cargo-make
          cargo quickinstall cargo-hack --version 0.5.26 || cargo install --version 0.5.26 cargo-hack
          cargo quickinstall cargo-nextest --version 0.9.37 || cargo install --version 0.9.37 cargo-nextest

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ matrix.directory }}
          key: ${{ matrix.profile }}

      # To be removed once https://github.com/open-telemetry/opentelemetry-rust/issues/934 is sorted
      - name: Install Protoc
        if: matrix.directory == 'apps/hash-graph'
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Python
        if: matrix.directory == 'apps/engine'
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Run tests
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} make --profile ${{ matrix.profile }} test --no-fail-fast

      - name: Run miri
        if: ${{ startsWith(matrix.toolchain, 'nightly') }}
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} make --profile ${{ matrix.profile }} miri --no-fail-fast

      - name: Ensure empty git diff
        run: git --no-pager diff --exit-code --color

      - name: Upload to Datadog
        if: matrix.directory == 'apps/engine' && matrix.profile == 'production'
        run: |
          message=$(find ${{ matrix.directory }}/${{ env.OUTPUT_DIRECTORY }} -name timing.json -exec cat {} + \
                    | sed 's|::|-|g' \
                    | jq '{(.test_path): . | del(.test_path)}' | jq -s add)
          directory="${{ matrix.directory }}"
          tags="crate:${directory##*/},event:${{ github.event_name }},test:${{ matrix.tests }},stage:dev,toolchain:${{ matrix.toolchain }},user:${{ github.actor }}"
          if [[ ${{ github.ref_type }} = branch ]]; then
            tags="$tags,branch:${{ github.ref_name }}"
          fi
          curl -X POST "https://http-intake.logs.datadoghq.com/api/v2/logs" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d $(jq -cn \
                    --argjson message "$message" \
                    --arg ddtags "$tags" \
                    '{ message: $message, ddsource: "hash-gh-actions", hostname: "github", service: "actions", ddtags: $ddtags }')

  coverage:
    name: coverage
    needs: setup
    if: needs.setup.outputs.coverage != '{}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.coverage) }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Install tools
        shell: bash
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall cargo-make --version 0.36.3 || cargo install --version 0.36.3 cargo-make
          cargo quickinstall cargo-nextest --version 0.9.37 || cargo install --version 0.9.37 cargo-nextest
          cargo quickinstall cargo-llvm-cov --version 0.5.9 || cargo install --version 0.5.9 cargo-llvm-cov

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ matrix.directory }}
          key: ${{ matrix.profile }}

      # To be removed once https://github.com/open-telemetry/opentelemetry-rust/issues/934 is sorted
      - name: Install Protoc
        if: matrix.directory == 'apps/hash-graph'
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} make coverage --lcov --output-path lcov.info

      - uses: codecov/codecov-action@v3
        if: ${{ success() || failure() }}
        name: Upload coverage to https://app.codecov.io/gh/hashintel/hash
        with:
          ## Temporarily disabled until https://github.com/codecov/codecov-action/issues/720 is resolved, and/or we rely
          ## on coverage reports more strictly
          fail_ci_if_error: false
          files: ${{ matrix.directory }}/lcov.info
          flags: ${{ matrix.name }}
          token: ${{ secrets.CODECOV_TOKEN }} ## not required for public repos, can be removed when https://github.com/codecov/codecov-action/issues/837 is resolved

  docker:
    name: docker
    needs: setup
    if: needs.setup.outputs.docker != '{}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.docker) }}
    defaults:
      run:
        working-directory: ${{ matrix.directory }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install tools
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall cargo-make --version 0.36.3 || cargo install --version 0.36.3 cargo-make

      - name: Build Docker container
        run: cargo make --profile ${{ matrix.profile }} build-docker

      - name: Test Docker container
        run: cargo make --profile ${{ matrix.profile }} test-docker

      - name: Ensure empty git diff
        run: git --no-pager diff --exit-code --color

  publish:
    name: publish
    needs: setup
    if: needs.setup.outputs.publish != '{}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.publish) }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: ./.github/actions/install-rust-toolchain
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Install tools
        if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/trunk-merge/')) || github.event_name == 'pull_request' }}
        shell: bash
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall cargo-make --version 0.36.3 || cargo install --version 0.36.3 cargo-make
          cargo quickinstall cargo-hack --version 0.5.26 || cargo install --version 0.5.26 cargo-hack
          cargo quickinstall cargo-nextest --version 0.9.37 || cargo install --version 0.9.37 cargo-nextest
          cargo quickinstall cargo-semver-checks --version 0.17.0 || cargo install --version 0.17.0 cargo-semver-checks

      - name: Run lints
        if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/trunk-merge/')) || github.event_name == 'pull_request' }}
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} make --profile ${{ matrix.profile }} lint

      - name: Run tests
        if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/trunk-merge/')) || github.event_name == 'pull_request' }}
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} make --profile ${{ matrix.profile }} test --no-fail-fast

      - name: Login
        run: |
          [[ -n "${{ secrets.CARGO_REGISTRY_TOKEN }}" ]]
          cargo login "${{ secrets.CARGO_REGISTRY_TOKEN }}"

      - name: SemVer check
        if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/trunk-merge/')) || github.event_name == 'pull_request' }}
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} semver-checks check-release

      - name: Publish (dry run)
        if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/trunk-merge/')) || github.event_name == 'pull_request' }}
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} publish --all-features --dry-run

      - name: Publish
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} publish --all-features

  merging-enabled:
    name: Merging enabled
    needs: [setup, lint, test, coverage, docker, publish]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: check setup
        run: |
          [[ ${{ needs.setup.result }} = success ]]
      - name: check lint
        run: |
          [[ ${{ needs.lint.result }} =~ success|skipped ]]
      - name: check test
        run: |
          [[ ${{ needs.test.result }} =~ success|skipped ]]
      - name: check coverage
        run: |
          [[ ${{ needs.coverage.result }} =~ success|skipped ]]
      - name: check docker
        run: |
          [[ ${{ needs.docker.result }} =~ success|skipped ]]
      - name: check publish
        run: |
          [[ ${{ needs.publish.result }} =~ success|skipped ]]
