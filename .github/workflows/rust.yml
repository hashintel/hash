name: Rust

on:
  pull_request:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      lint: ${{ steps.crates.outputs.lint }}
      test: ${{ steps.crates.outputs.test }}
      bench: ${{ steps.crates.outputs.bench }}
      publish: ${{ steps.crates.outputs.publish }}
      exclude: ${{ steps.crates.outputs.exclude }}
      samples: ${{ steps.samples.outputs.samples }}
      nightly: ${{ steps.toolchains.outputs.nightly }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Setup CI
        uses: ./.github/actions/setup-rust-ci

      - name: Find changed crates
        id: crates
        run: python .github/scripts/rust/setup.py

      - name: Find toolchain
        id: toolchains
        run: |
          nightly=$(cat $(find . -name rust-toolchain.toml) | grep channel | cut -d\" -f2)
          echo "::set-output name=nightly::$nightly"
          echo "use toolchains: $(echo $nightly | jq -r)"

      - name: Determine samples
        id: samples
        run: |
          if [[ ${{ github.event_name }} = pull_request ]]; then
            echo "::set-output name=samples::1"
          else
            echo "::set-output name=samples::10"
          fi

  lint:
    name: lint
    needs: setup
    if: needs.setup.outputs.lint != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.lint) }}
        toolchain:
          - stable
          - ${{ needs.setup.outputs.nightly }}
        exclude: ${{ fromJSON(needs.setup.outputs.exclude) }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Install cargo-make
        run: |
          cargo install --debug cargo-quickinstall
          cargo quickinstall cargo-make

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/checkouts
            **/target/
          key: ${{ runner.os }}-lint-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-lint-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Check formatting
        if: matrix.toolchain != 'stable'
        working-directory: ${{ matrix.directory }}
        run: cargo make format

      - name: Check clippy
        working-directory: ${{ matrix.directory }}
        run: cargo make clippy

      - name: Check documentation
        if: matrix.toolchain != 'stable'
        working-directory: ${{ matrix.directory }}
        run: cargo make doc

  test:
    name: test
    needs: setup
    if: needs.setup.outputs.test != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.test) }}
        toolchain:
          - stable
          - ${{ needs.setup.outputs.nightly }}
        profile:
          - development
          - production
        exclude: ${{ fromJSON(needs.setup.outputs.exclude) }}
    env:
      OUTPUT_DIRECTORY: test-results
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Install cargo-make
        run: |
          cargo install --debug cargo-quickinstall
          cargo quickinstall cargo-make

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/checkouts
            **/target/
          key: ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.profile }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.profile }}

      - name: Run tests
        working-directory: ${{ matrix.directory }}
        run: cargo make --profile ${{ matrix.profile }} test

      - name: Run miri
        if: matrix.toolchain != 'stable'
        working-directory: ${{ matrix.directory }}
        run: cargo make --profile ${{ matrix.profile }} miri

      # Non-empty diff could be a Cargo.lock that wasn't committed.
      - name: Ensure empty git diff
        run: |
          # Restore files modified for CI
          git checkout HEAD -- "${{ matrix.directory }}/Cargo.toml"

          git --no-pager diff --exit-code --color

      - name: Upload to DataDog
        if: matrix.directory == 'packages/engine' && matrix.profile == 'production'
        run: |
          message=$(find ${{ matrix.directory }}/${{ env.OUTPUT_DIRECTORY }} -name timing.json -exec cat {} + \
                    | sed 's|::|-|g' \
                    | jq '{(.test_path): . | del(.test_path)}' | jq -s add)
          directory="${{ matrix.directory }}"
          tags="crate:${directory##*/},event:${{ github.event_name }},test:${{ matrix.tests }},stage:dev,toolchain:${{ matrix.toolchain }},user:${{ github.actor }}"
          if [[ ${{ github.ref_type }} = branch ]]; then
            tags="$tags,branch:${{ github.ref_name }}"
          fi
          curl -X POST "https://http-intake.logs.datadoghq.com/api/v2/logs" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d $(jq -cn \
                    --argjson message "$message" \
                    --arg ddtags "$tags" \
                    '{ message: $message, ddsource: "hash-gh-actions", hostname: "github", service: "actions", ddtags: $ddtags }')

  publish:
    name: publish
    needs: setup
    if: needs.setup.outputs.publish != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.publish) }}
        toolchain:
          - ${{ needs.setup.outputs.nightly }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Login
        run: |
          [[ -n "${{ secrets.CARGO_REGISTRY_TOKEN }}" ]]
          cargo login "${{ secrets.CARGO_REGISTRY_TOKEN }}"

      - name: Publish (dry run)
        if: github.event_name == 'pull_request'
        working-directory: ${{ matrix.directory }}
        run: cargo publish --all-features --dry-run

      - name: Publish
        if: github.event_name == 'push'
        working-directory: ${{ matrix.directory }}
        run: cargo publish --all-features

  merging-enabled:
    name: merging enabled
    needs: [lint, test, publish]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: check lint
        run: |
          [[ ${{ needs.lint.result }} =~ success|skipped ]]
      - name: check test
        run: |
          [[ ${{ needs.test.result }} =~ success|skipped ]]
      - name: check publish
        run: |
          [[ ${{ needs.publish.result }} =~ success|skipped ]]
