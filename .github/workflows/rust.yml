name: Rust

on:
  pull_request:

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      rustfmt: ${{ steps.crates.outputs.rustfmt }}
      clippy: ${{ steps.crates.outputs.clippy }}
      test: ${{ steps.crates.outputs.test }}
      toolchains: ${{ steps.toolchains.outputs.toolchains }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Find changed crates
        id: crates
        run: |
          available_crates="$(find . -name Cargo.toml -printf '%h\n' | sed 's:./::' | sort | tac)"
          changed_files="$(git diff --name-only HEAD^ HEAD)"

          changed_crates=""

          while read -r file; do
            while read -r crate; do
              if [[ $file =~ $crate ]]; then
                changed_crates=$(echo -e "${crate}\n$changed_crates")
                break
              fi
            done <<< "$available_crates"
          done <<< "$changed_files"

          changed_crates=$(echo "$changed_crates" | uniq | jq -R | jq -sc '[ .[] | select(length > 0) ]')

          echo "::set-output name=rustfmt::$changed_crates"
          echo "::set-output name=clippy::$changed_crates"
          echo "::set-output name=test::$changed_crates"

          echo "run \`cargo fmt\` for: $(echo $changed_crates | jq -r)"
          echo "run \`cargo clippy\` for: $(echo $changed_crates | jq -r)"
          echo "run \`cargo test\` for: $(echo $changed_crates | jq -r)"
      - name: Find toolchain
        id: toolchains
        run: |
          toolchains=$(cat $(find . -name rust-toolchain.toml) | grep channel | cut -d\" -f2 | jq -R | jq -sc)
          echo "::set-output name=toolchains::$toolchains"
          echo "use toolchains: $(echo $toolchains | jq -r)"

  rustfmt:
    name: rustfmt
    needs: setup
    if: needs.setup.outputs.rustfmt != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.rustfmt) }}
        toolchain: ${{ fromJSON(needs.setup.outputs.toolchains) }}
    env:
      V8_PATH: ${{ github.workspace }}/.v8
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: rustfmt

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path ${{ matrix.directory }}/Cargo.toml -- --check

      - name: Setup PHP
        if: ${{ failure() }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.3
          coverage: none
          tools: cs2pr

      - name: Annotate
        if: ${{ failure() }}
        run: cargo fmt --manifest-path ${{ matrix.directory }}/Cargo.toml -- --emit checkstyle | cs2pr

  clippy:
    name: clippy
    needs: setup
    if: needs.setup.outputs.clippy != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.clippy) }}
        toolchain: ${{ fromJSON(needs.setup.outputs.toolchains) }}
        flags:
          - --all-features
    env:
      V8_PATH: ${{ github.workspace }}/.v8
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            **/target/
          key: ${{ runner.os }}-clippy-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-clippy-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}
            ${{ runner.os }}-clippy-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Install v8
        run: |
          mkdir -p ${V8_PATH}/tmp
          cd ${V8_PATH}/tmp
          curl -L -o libv8.tar.gz https://github.com/rubyjs/libv8/releases/download/v8.4.255.0/libv8-8.4.255.0-x86_64-linux.gem
          tar xf libv8.tar.gz # Extract the gem
          tar xf data.tar.gz # Extract the data folder
          mv -v vendor/v8/* .. # Move out the wanted files
          cd ..
          rm -rf tmp # Delete the tmp folder

      - name: Run clippy
        run: cargo clippy --manifest-path ${{ matrix.directory }}/Cargo.toml ${{ matrix.flags }} -- -D warnings

      - name: Annotate
        if: ${{ failure() }}
        # use `actions-rs/clippy-check@v1` when https://github.com/actions-rs/clippy-check/pull/158 is merged
        uses: reinismu/clippy-check@master
        with:
          name: clippy (${{ matrix.directory }})
          token: ${{ secrets.GITHUB_TOKEN }}
          working-directory: ${{ matrix.directory }}
          args: ${{ matrix.flags }}

  test:
    name: test
    needs: setup
    if: needs.setup.outputs.test != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJSON(needs.setup.outputs.test) }}
        toolchain: ${{ fromJSON(needs.setup.outputs.toolchains) }}
        flags:
          - --all-features
    env:
      V8_PATH: ${{ github.workspace }}/.v8
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Remove default members
        run: sed '/default-members/d' -i ${{ matrix.directory }}/Cargo.toml

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            **/target/
          key: ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}-${{ matrix.flags }}
            ${{ runner.os }}-test-${{ matrix.directory }}-${{ matrix.toolchain }}

      - name: Install v8
        run: |
          mkdir -p ${V8_PATH}/tmp
          cd ${V8_PATH}/tmp
          curl -L -o libv8.tar.gz https://github.com/rubyjs/libv8/releases/download/v8.4.255.0/libv8-8.4.255.0-x86_64-linux.gem
          tar xf libv8.tar.gz # Extract the gem
          tar xf data.tar.gz # Extract the data folder
          mv -v vendor/v8/* .. # Move out the wanted files
          cd ..
          rm -rf tmp # Delete the tmp folder

      - name: Build test dependencies
        if: matrix.directory == 'packages/engine'
        run: cargo build -p server -p cli --manifest-path ${{ matrix.directory }}/Cargo.toml

      - name: Run tests (parallel)
        continue-on-error: true
        id: test-parallel
        run: cargo test --manifest-path ${{ matrix.directory }}/Cargo.toml ${{ matrix.flags }} --no-fail-fast

        # TODO: Only use parallel tests
      - name: Run tests (sequential)
        if: steps.test-parallel.outcome == 'failure'
        run: cargo test --manifest-path ${{ matrix.directory }}/Cargo.toml ${{ matrix.flags }} -- --test-threads=1

  merging-enabled:
    name: merging enabled
    needs: [rustfmt, clippy, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: check rustfmt
        run: |
          [[ ${{ needs.rustfmt.result }} =~ success|skipped ]]
      - name: check clippy
        run: |
          [[ ${{ needs.clippy.result }} =~ success|skipped ]]
      - name: check test
        run: |
          [[ ${{ needs.test.result }} =~ success|skipped ]]
