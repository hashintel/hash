name: Rust

on:
  pull_request:
  push:
    branches:
      - main
      - dev/**
  merge_group:

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: hashintel
  TURBO_REMOTE_ONLY: true

jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      lint: ${{ steps.crates.outputs.lint }}
      test: ${{ steps.crates.outputs.test }}
      coverage: ${{ steps.crates.outputs.coverage }}
      publish: ${{ steps.crates.outputs.publish }}
      build: ${{ steps.crates.outputs.build }}
      samples: ${{ steps.samples.outputs.samples }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          fetch-depth: 2

      - name: Setup CI
        uses: ./.github/actions/setup-rust-ci

      - name: Find changed crates
        id: crates
        run: |
          export GITHUB_OUTPUT_FILE_PATH=$(mktemp)
          python .github/scripts/rust/setup.py
          cat $GITHUB_OUTPUT_FILE_PATH >> $GITHUB_OUTPUT

      - name: Determine samples
        id: samples
        run: |
          if [[ ${{ github.event_name }} = pull_request ]]; then
            echo "samples=1" >> $GITHUB_OUTPUT
          else
            echo "samples=10" >> $GITHUB_OUTPUT
          fi

  build:
    name: build
    needs: setup
    if: needs.setup.outputs.build != '{}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.build) }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Build images
        uses: ./.github/actions/build-docker-images
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          hash-graph: true

  lint:
    name: lint
    needs: setup
    if: needs.setup.outputs.lint != '{}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.lint) }}
    env:
      RUSTFLAGS: "--cfg hash_graph_test_environment"
    steps:
      - name: Checkout source code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Warm-up repository
        uses: ./.github/actions/warm-up-repo
        if: matrix.directory == 'apps/hash-graph'

      - name: Install Rust toolchain
        uses: ./.github/actions/install-rust-toolchain
        with:
          toolchain: ${{ matrix.toolchain }}
          working-directory: ${{ matrix.directory }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4 # v2.6.2
        with:
          workspaces: ${{ matrix.directory }}
          save-if: ${{ !startsWith(github.ref, 'refs/heads/gh-readonly-queue') }}
          cache-all-crates: true

      - name: Install tools
        uses: taiki-e/install-action@0163f6cf65d9b9bb0e5d1f0e3ae19280a06be4b0 # v2.18.9
        with:
          tool: just@1.13.0,cargo-hack@0.6.7,rust-script@0.23.0,clippy-sarif@0.3.7,sarif-fmt@0.3.7

      - name: Check formatting
        working-directory: ${{ matrix.directory }}
        run: just format --check

      - name: Check clippy
        working-directory: ${{ matrix.directory }}
        if: always()
        run: |
          just clippy --message-format=json \
            | clippy-sarif \
            | jq '.runs[].results |= unique' \
            | tee clippy.sarif \
            | sarif-fmt

          jq -e '.runs[].results == []' clippy.sarif> /dev/null

      - name: Process SARIF file
        working-directory: ${{ matrix.directory }}
        if: always()
        run: |
          tmp=$(mktemp)

          jq --arg pwd "${{ matrix.directory }}" '.runs[].results[].locations[].physicalLocation.artifactLocation.uri |= $pwd + "/" + .' clippy.sarif > "$tmp"

          mv "$tmp" clippy.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@00e563ead9f72a8461b24876bee2d0c2e8bd2ee8 # v2.21.5
        if: always()
        with:
          sarif_file: ${{ matrix.directory }}/clippy.sarif
          category: ${{ matrix.name }}

      - name: Check public documentation
        working-directory: ${{ matrix.directory }}
        if: always()
        env:
          RUSTDOCFLAGS: "--check -Z unstable-options -D warnings"
        run: just doc

      - name: Check private documentation
        working-directory: ${{ matrix.directory }}
        if: always()
        env:
          RUSTDOCFLAGS: "--check -Z unstable-options -D warnings"
        run: just doc --document-private-items

      - name: Ensure empty git diff
        run: git --no-pager diff --exit-code --color

  test:
    name: test
    needs: [setup, build]
    if: always() && needs.setup.outputs.test != '{}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.test) }}
    env:
      OUTPUT_DIRECTORY: test-results
      RUST_BACKTRACE: 1
      PROFILE: ${{ matrix.profile }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Warm-up repository
        uses: ./.github/actions/warm-up-repo
        if: matrix.directory == 'apps/hash-graph'

      - name: Prune docker system
        if: matrix.directory == 'apps/hash-graph'
        run: docker system prune --all --force

      - name: Load Docker image
        uses: ./.github/actions/load-docker-images
        if: matrix.directory == 'apps/hash-graph'
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          hash-graph: true

      - name: Launch external services
        if: matrix.directory == 'apps/hash-graph'
        run: |
          yarn turbo codegen --filter '@apps/hash-external-services'
          yarn workspace @apps/hash-external-services deploy:test up graph --wait

      - name: Install Rust toolchain
        uses: ./.github/actions/install-rust-toolchain
        with:
          toolchain: ${{ matrix.toolchain }}
          working-directory: ${{ matrix.directory }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4 # v2.6.2
        with:
          workspaces: ${{ matrix.directory }}
          key: ${{ matrix.profile }}
          save-if: ${{ !startsWith(github.ref, 'refs/heads/gh-readonly-queue') }}
          cache-all-crates: true

      - name: Install tools
        uses: taiki-e/install-action@0163f6cf65d9b9bb0e5d1f0e3ae19280a06be4b0 # v2.18.9
        with:
          tool: just@1.13.0,cargo-hack@0.6.7,cargo-nextest@0.9.37

      - name: Install Poetry dependencies
        working-directory: ${{ matrix.directory }}
        if: matrix.directory == 'apps/hash-graph'
        run: just yarn poetry:install

      - name: Run tests
        working-directory: ${{ matrix.directory }}
        run: just test --no-fail-fast

      - name: Run miri
        if: ${{ startsWith(matrix.toolchain, 'nightly') }}
        working-directory: ${{ matrix.directory }}
        run: just miri --no-fail-fast

      - name: Show container logs
        if: ${{ (success() || failure()) && matrix.directory == 'apps/hash-graph' }}
        run: yarn workspace @apps/hash-external-services deploy:test logs --timestamps

      - name: Ensure empty git diff
        run: git --no-pager diff --exit-code --color

  coverage:
    name: coverage
    needs: [setup, build]
    if: always() && needs.setup.outputs.coverage != '{}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.coverage) }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Warm-up repository
        uses: ./.github/actions/warm-up-repo
        if: matrix.directory == 'apps/hash-graph'

      - name: Prune docker system
        if: matrix.directory == 'apps/hash-graph'
        run: docker system prune --all --force

      - name: Load Docker image
        uses: ./.github/actions/load-docker-images
        if: matrix.directory == 'apps/hash-graph'
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          hash-graph: true

      - name: Launch external services
        if: matrix.directory == 'apps/hash-graph'
        run: |
          yarn turbo codegen --filter '@apps/hash-external-services'
          yarn workspace @apps/hash-external-services deploy:test up graph --wait

      - name: Install Rust toolchain
        uses: ./.github/actions/install-rust-toolchain
        with:
          toolchain: ${{ matrix.toolchain }}
          working-directory: ${{ matrix.directory }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4 # v2.6.2
        with:
          workspaces: ${{ matrix.directory }}
          key: ${{ matrix.profile }}
          save-if: ${{ !startsWith(github.ref, 'refs/heads/gh-readonly-queue') }}
          cache-all-crates: true

      - name: Install tools
        uses: taiki-e/install-action@0163f6cf65d9b9bb0e5d1f0e3ae19280a06be4b0 # v2.18.9
        with:
          tool: just@1.13.0,cargo-nextest@0.9.37,cargo-llvm-cov@0.5.9

      - name: Run tests
        working-directory: ${{ matrix.directory }}
        run: just coverage --lcov --output-path lcov.info

      - uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4
        if: ${{ success() || failure() }}
        name: Upload coverage to https://app.codecov.io/gh/hashintel/hash
        with:
          ## Temporarily disabled until https://github.com/codecov/codecov-action/issues/720 is resolved, and/or we rely
          ## on coverage reports more strictly
          fail_ci_if_error: false
          files: ${{ matrix.directory }}/lcov.info
          flags: ${{ matrix.name }}
          token: ${{ secrets.CODECOV_TOKEN }} ## not required for public repos, can be removed when https://github.com/codecov/codecov-action/issues/837 is resolved

      - name: Show container logs
        if: ${{ (success() || failure()) && matrix.directory == 'apps/hash-graph' }}
        run: yarn workspace @apps/hash-external-services deploy:test logs --timestamps

  publish:
    name: publish
    needs: setup
    if: needs.setup.outputs.publish != '{}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.publish) }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Install Rust toolchain
        uses: ./.github/actions/install-rust-toolchain
        with:
          toolchain: ${{ matrix.toolchain }}
          working-directory: ${{ matrix.directory }}

      - name: Install tools
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
        uses: taiki-e/install-action@0163f6cf65d9b9bb0e5d1f0e3ae19280a06be4b0 # v2.18.9
        with:
          tool: just@1.13.0,cargo-hack@0.6.7,cargo-nextest@0.9.37,rust-script@0.23.0,cargo-semver-checks

      - name: Run lints
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
        working-directory: ${{ matrix.directory }}
        run: just lint

      - name: Run tests
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
        working-directory: ${{ matrix.directory }}
        run: just test

      - name: Login
        run: |
          [[ -n "${{ secrets.CARGO_REGISTRY_TOKEN }}" ]]
          cargo login "${{ secrets.CARGO_REGISTRY_TOKEN }}"

      - name: SemVer check
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
        working-directory: ${{ matrix.directory }}
        run: |
          # Only run semver checks if this is not the initial release
          grep '^version' Cargo.toml | grep -q -v 0.0.0-reserved || exit 0

          # Temporarily disabled as `error-stack@0.3.1` does not compile on the current nightly toolchain
          # cargo +${{ matrix.toolchain }} semver-checks check-release

      - name: Publish (dry run)
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} publish --all-features --dry-run

      - name: Publish
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        working-directory: ${{ matrix.directory }}
        run: cargo +${{ matrix.toolchain }} publish --all-features

  merging-enabled:
    name: Merging enabled
    needs: [setup, lint, test, coverage, publish]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: check setup
        run: |
          [[ ${{ needs.setup.result }} = success ]]
      - name: check lint
        run: |
          [[ ${{ needs.lint.result }} =~ success|skipped ]]
      - name: check test
        run: |
          [[ ${{ needs.test.result }} =~ success|skipped ]]
      - name: check coverage
        run: |
          [[ ${{ needs.coverage.result }} =~ success|skipped ]]
      - name: check publish
        run: |
          [[ ${{ needs.publish.result }} =~ success|skipped ]]
