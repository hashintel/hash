name: Build docker images
description: "Build docker images"
inputs:
  hash-graph:
    description: "Build hash-graph image"
    required: false
    default: "false"
  hash-ai-worker-ts:
    description: "Build hash-ai-worker-ts image"
    required: false
    default: "false"
  hash-ai-worker-py:
    description: "Build hash-ai-worker-py image"
    required: false
    default: "false"
  hash-integration-worker:
    description: "Build hash-integration-worker image"
    required: false
    default: "false"
  repo-token:
    description: "GitHub token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Load tags
      shell: bash
      run: |
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          IMAGE_TAG=""
          BUILD_CACHE_TAG=":build-cache"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          PR_NUMBER="${{ github.event.pull_request.number }}"
          IMAGE_TAG=":pr-$PR_NUMBER"
          BUILD_CACHE_TAG="${IMAGE_TAG}_build-cache"
        elif [[ "${{ github.event_name }}" == "merge_group" ]]; then
          # e.g. gh-readonly-queue/main/pr-1234-<SHA>
          PR_NUMBER=$(echo "${{ github.ref_name }}" | cut -d/ -f3 | cut -d- -f2)
          IMAGE_TAG=":pr-$PR_NUMBER"
          BUILD_CACHE_TAG="${IMAGE_TAG}_build-cache"
        else
          IMAGE_TAG=":$(echo ${{ github.ref_name }} | sed 's|/|-|g')"
          BUILD_CACHE_TAG="${IMAGE_TAG}_build-cache"
        fi

        GRAPH_PROFILE="$([ "${{ github.ref_name }}" == "main" ] && echo "release" || echo "dev")"

        set -x
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "BUILD_CACHE_TAG=$BUILD_CACHE_TAG" >> $GITHUB_ENV
        echo "BUILD_CACHE_FALLBACK_TAG=:build-cache" >> $GITHUB_ENV
        echo "GRAPH_PROFILE=$GRAPH_PROFILE" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.repo-token }}

    - name: Build hash-graph image
      if: inputs.hash-graph == 'true'
      uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4
      with:
        context: .
        file: apps/hash-graph/docker/Dockerfile
        tags: ghcr.io/hashintel/hash-graph${{ env.IMAGE_TAG }}
        cache-from: |
          type=registry,ref=ghcr.io/hashintel/hash-graph${{ env.BUILD_CACHE_TAG }}
          type=registry,ref=ghcr.io/hashintel/hash-graph${{ env.BUILD_CACHE_FALLBACK_TAG }}
        cache-to: |
          type=registry,ref=ghcr.io/hashintel/hash-graph${{ env.BUILD_CACHE_TAG }},mode=max
        push: true
        labels: |
          org.opencontainers.image.source="https://github.com/hashintel/hash"
          org.opencontainers.image.licenses="AGPL-3.0-only,"
          org.opencontainers.image.description="The entity-graph query-layer for the HASH datastore"
        # `dev` is large (~400 MB), slow, and fast to build
        # `production` is small (~10 MB), fast, and slow to build (a few minutes linking time due to LTO)
        # `release` is a compromise between the two (~30 MB, no LTO)
        build-args: |
          PROFILE=${{ env.GRAPH_PROFILE }}
          ENABLE_TYPE_FETCHER=yes
          ENABLE_TEST_SERVER=yes

    - name: Build hash-ai-worker-ts image
      if: inputs.hash-ai-worker-ts == 'true'
      uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4
      with:
        context: .
        file: apps/hash-ai-worker-ts/docker/Dockerfile
        tags: ghcr.io/hashintel/hash-ai-worker-ts${{ env.IMAGE_TAG }}
        cache-from: |
          type=registry,ref=ghcr.io/hashintel/hash-ai-worker-ts${{ env.BUILD_CACHE_TAG }}
          type=registry,ref=ghcr.io/hashintel/hash-ai-worker-ts${{ env.BUILD_CACHE_FALLBACK_TAG }}
        cache-to: |
          type=registry,ref=ghcr.io/hashintel/hash-ai-worker-ts${{ env.BUILD_CACHE_TAG }},mode=max
        push: true
        labels: |
          org.opencontainers.image.source="https://github.com/hashintel/hash"
          org.opencontainers.image.licenses="AGPL-3.0-only,"
          org.opencontainers.image.description="A TypeScript 'AI' worker for HASH"

    - name: Build hash-ai-worker-py image
      if: inputs.hash-ai-worker-py == 'true'
      uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4
      with:
        context: .
        file: apps/hash-ai-worker-py/docker/Dockerfile
        tags: ghcr.io/hashintel/hash-ai-worker-py${{ env.IMAGE_TAG }}
        cache-from: |
          type=registry,ref=ghcr.io/hashintel/hash-ai-worker-py${{ env.BUILD_CACHE_TAG }}
          type=registry,ref=ghcr.io/hashintel/hash-ai-worker-py${{ env.BUILD_CACHE_FALLBACK_TAG }}
        cache-to: |
          type=registry,ref=ghcr.io/hashintel/hash-ai-worker-py${{ env.BUILD_CACHE_TAG }},mode=max
        push: true
        labels: |
          org.opencontainers.image.source="https://github.com/hashintel/hash"
          org.opencontainers.image.licenses="AGPL-3.0-only,"
          org.opencontainers.image.description="A Python 'AI' worker for HASH"

    - name: Build hash-integration-worker image
      if: inputs.hash-integration-worker == 'true'
      uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4
      with:
        context: .
        file: apps/hash-integration-worker/docker/Dockerfile
        tags: ghcr.io/hashintel/hash-integration-worker${{ env.IMAGE_TAG }}
        cache-from: |
          type=registry,ref=ghcr.io/hashintel/hash-integration-worker${{ env.BUILD_CACHE_TAG }}
          type=registry,ref=ghcr.io/hashintel/hash-integration-worker${{ env.BUILD_CACHE_FALLBACK_TAG }}
        cache-to: |
          type=registry,ref=ghcr.io/hashintel/hash-integration-worker${{ env.BUILD_CACHE_TAG }},mode=max
        push: true
        labels: |
          org.opencontainers.image.source="https://github.com/hashintel/hash"
          org.opencontainers.image.licenses="AGPL-3.0-only,"
          org.opencontainers.image.description="A TypeScript worker for HASH for data integration"
