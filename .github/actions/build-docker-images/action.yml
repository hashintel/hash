name: Build docker images
description: "Build docker images"
inputs:
  hash-graph:
    description: "Build hash-graph image"
    required: false
    default: "false"
  hash-ai-worker-ts:
    description: "Build hash-ai-worker-ts image"
    required: false
    default: "false"
  hash-ai-worker-py:
    description: "Build hash-ai-worker-py image"
    required: false
    default: "false"
  hash-integration-worker:
    description: "Build hash-integration-worker image"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to registry
      shell: bash
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Load hash-graph image
      if: inputs.hash-graph == 'true'
      shell: bash
      run: |
        TAG="ghcr.io/hashintel/hash-graph$([ "${{ github.ref_name }}" != "main" ] && echo :${{ github.ref_name }} | sed 's|/|_|g')"
        docker pull $TAG && docker tag $TAG hash-graph || true
        echo "HASH_GRAPH_TAG=$TAG" >> $GITHUB_ENV

    - name: Build hash-graph image
      if: inputs.hash-graph == 'true'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: apps/hash-graph/docker/Dockerfile
        tags: ${{ env.HASH_GRAPH_TAG }}
        push: true
        # `dev` is large (~400 MB), slow, and fast to build
        # `production` is small (~10 MB), fast, and slow to build (a few minutes linking time due to LTO)
        # `release` is a compromise between the two (~30 MB, no LTO)
        # TODO: As caching does not work very reliably, we use `dev` for now
        #   see https://app.asana.com/0/0/1202790039552161/f
        #       https://app.asana.com/0/0/1203893407788521/f
        build-args: |
          PROFILE=dev
          ENABLE_TYPE_FETCHER=yes
          ENABLE_TEST_SERVER=yes

    - name: Load hash-ai-worker-ts image
      if: inputs.hash-ai-worker-ts == 'true'
      shell: bash
      run: |
        TAG="ghcr.io/hashintel/hash-ai-worker-ts$([ "${{ github.ref_name }}" != "main" ] && echo :${{ github.ref_name }} | sed 's|/|_|g')"
        docker pull $TAG && docker tag $TAG hash-graph || true
        echo "HASH_AI_WORKER_TS_TAG=$TAG" >> $GITHUB_ENV

    - name: Build hash-ai-worker-ts image
      if: inputs.hash-ai-worker-ts == 'true'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: apps/hash-ai-worker-ts/docker/Dockerfile
        tags: ${{ env.HASH_AI_WORKER_TS_TAG }}
        push: true

    - name: Load hash-ai-worker-py image
      if: inputs.hash-ai-worker-py == 'true'
      shell: bash
      run: |
        TAG="ghcr.io/hashintel/hash-ai-worker-py$([ "${{ github.ref_name }}" != "main" ] && echo :${{ github.ref_name }} | sed 's|/|_|g')"
        docker pull $TAG && docker tag $TAG hash-graph || true
        echo "HASH_AI_WORKER_PY_TAG=$TAG" >> $GITHUB_ENV

    - name: Build hash-ai-worker-py image
      if: inputs.hash-ai-worker-py == 'true'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: apps/hash-ai-worker-py/docker/Dockerfile
        tags: ${{ env.HASH_AI_WORKER_PY_TAG }}
        push: true

    - name: Load hash-integration-worker image
      if: inputs.hash-integration-worker == 'true'
      shell: bash
      run: |
        TAG="ghcr.io/hashintel/hash-integration-worker$([ "${{ github.ref_name }}" != "main" ] && echo :${{ github.ref_name }} | sed 's|/|_|g')"
        docker pull $TAG && docker tag $TAG hash-graph || true
        echo "HASH_INTEGRATION_WORKER_TAG=$TAG" >> $GITHUB_ENV

    - name: Build hash-integration-worker image
      if: inputs.hash-integration-worker == 'true'
      uses: docker/build-push-action@v4
      with:
        context: .
        file: apps/hash-integration-worker/docker/Dockerfile
        tags: ${{ env.HASH_INTEGRATION_WORKER_TAG }}
        push: true
