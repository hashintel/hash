name: Prune repository
description: "Prunes the repository to only the files required for the given scope"
inputs:
  scope:
    description: "Scope to prune to"
    required: true

runs:
  using: "composite"
  steps:
    - name: Prune repository
      shell: bash
      run: |
        # Convert newline-separated input to space-separated arguments
        SCOPES=$(echo "${{ inputs.scope }}" | tr '\n' ' ')

        while IFS= read -r scope; do
          # Read all the dependencies for the given scope.
          # The result will contain strings for the scope and all its dependencies so it can be grepped later.
          DEPENDENCIES=$(turbo query "query { packages(filter: { equal: { field: NAME, value: \"$scope\" } }) { items { name, allDependencies { items { name  } }}  } }")

          # TODO: remove once deer is in labs
          #   see https://linear.app/hash/issue/H-3692/move-deer-to-labs
          # Nested crates are pruned in a way where the lockfile does not correctly reflect the pruned workspace, leading to an installation failure.
          # Check if any of the scopes start with @rust/deer
          # If any deer crate is in scope, include all deer crates
          if echo "$DEPENDENCIES" | grep -q "@rust/deer\(-desert\|-macros\|-json\)\?"; then
            SCOPES="$SCOPES @rust/deer @rust/deer-desert @rust/deer-macros @rust/deer-json"
          fi

          # Workaround as turbo doesn't allow for cyclic dependencies
          if echo "$DEPENDENCIES" | grep -q "@rust/hashql-ast"; then
            SCOPES="$SCOPES @rust/hashql-compiletest"
          fi
          if echo "$DEPENDENCIES" | grep -q "@rust/hash-graph-postgres-queries"; then
            SCOPES="$SCOPES @local/repo-chores"
          fi
        done <<< "${{ inputs.scope }}"

        # Deduplicate scopes
        SCOPES=$(echo "$SCOPES" | tr ' ' '\n' | sort -u | tr '\n' ' ')

        # Run turbo prune with all scopes as arguments
        turbo prune $SCOPES

        while IFS= read -r line; do
          DIRECTORY=$(dirname "$line")
          # Create a dummy crate if it does not exist
          if [[ ! -f "out/$DIRECTORY/Cargo.toml" ]]; then
            mkdir -p "out/$DIRECTORY/src"
            echo > "out/$DIRECTORY/src/lib.rs"
            echo "[package]" >> "out/$DIRECTORY/Cargo.toml"
            echo "name = \"$(yq '.package.name' -p toml -oy $line)\"" >> "out/$DIRECTORY/Cargo.toml"
            echo "edition.workspace = true" >> "out/$DIRECTORY/Cargo.toml"
          fi
        done < <(find $(yq '.workspace.members' -p toml -o tsv Cargo.toml | sed -e 's#/\*##g') -maxdepth 2 -name Cargo.toml | uniq)

    - name: Copy required files
      shell: bash
      run: |
        cp -R Cargo.toml Cargo.lock rust-toolchain.toml biome.jsonc out/

        # Globs are fun, especially in Bash. Covers all dot-files except `.`, `..`, and `.git`.
        shopt -s extglob
        cp -R .[!.!(.git)]* .git?* out/

    - name: Remove old repository files
      shell: bash
      run: |
        git ls-files -z | xargs -0 rm -f
        git ls-tree --name-only -d -r -z HEAD | sort -rz | xargs -0 rm -rf

    - name: Restore `out` directory
      shell: bash
      run: |
        shopt -s dotglob
        mv out/* .
        rmdir out
