name: Terraform execute
description: Run `terraform` [command] with AWS credentials fetched through Vault.

inputs:
  vault-address:
    description: Vault address
    required: true
  working-directory:
    description: Directory to run the command in
    required: false
    default: .
  command:
    description: Terraform command to run
    required: true
  env:
    description: Environment to run the command within
    required: true

runs:
  using: composite
  steps:
    - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
      with:
        # pin until https://github.com/cyrilgdn/terraform-provider-postgresql/issues/357 is fixed
        terraform_version: 1.5.7

    - name: Authenticate Vault
      id: secrets
      uses: hashicorp/vault-action@d1720f055e0635fd932a1d2a48f87a666a57906c # v3.0.0
      with:
        exportToken: true
        url: ${{ inputs.vault-address }}
        method: jwt
        role: ${{ inputs.env }}
        # Even though it could look like separate calls to fetch the secrets
        # the responses here are cached, so we're only issuing a single set of credentials
        secrets: |
          aws/creds/${{ inputs.env }}-deploy access_key | AWS_ACCESS_KEY_ID ;
          aws/creds/${{ inputs.env }}-deploy secret_key | AWS_SECRET_ACCESS_KEY ;
          aws/creds/${{ inputs.env }}-deploy security_token | AWS_SESSION_TOKEN

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
      with:
        aws-access-key-id: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ steps.secrets.outputs.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: "[${{ inputs.env }}] Terraform init"
      id: init
      env:
        TF_WORKSPACE: ${{ inputs.env }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: terraform init -no-color 2>&1 | tee init.out

    - name: Terraform Validate
      id: validate
      env:
        TF_WORKSPACE: ${{ inputs.env }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: terraform validate -no-color | tee validate.out

    - name: "[${{ inputs.env }}] Terraform ${{ inputs.command }}"
      id: cmd
      env:
        TF_VAR_in_ci: true
        TF_WORKSPACE: ${{ inputs.env }}
        VAULT_ADDR: ${{ inputs.vault-address }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: terraform ${{ inputs.command == 'plan' && 'plan' || 'apply -auto-approve' }} -no-color -var-file=${{ inputs.env }}-usea1.tfvars | tee cmd.out

    - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const fs = require('fs').promises;

          const [init, validate, cmd] = (
            await Promise.all(
              ["init.out", "validate.out", "cmd.out"].map((f) => fs.readFile(`${{inputs.working-directory}}/${f}`))
            )
          );

          const heading = `Terraform [${{inputs.env}}] ${{ inputs.command }} results 🧪`

          // TODO: these "addDetail" calls are not ideal as it seems the stdout
          // is rendered as markdown within the code block.
          await core.summary
            .addHeading(heading)
            .addDetails(
              "Output of Terraform initialization ⚙️ (${{ steps.init.outcome }})",
              `<pre><code>${init}</code></pre>`
            )
            .addDetails(
              "Output of validation 🤖 (${{ steps.validate.outcome }})",
              `<pre><code>${validate}</code></pre>`
            )
            .addDetails("Output of ${{ inputs.command }} 📖 (${{ steps.cmd.outcome }})",
              `<pre><code lang="diff">${cmd}</code></pre>`
            )
            .write();
