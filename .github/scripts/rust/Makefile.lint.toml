[tasks.clippy-collect]
private = true
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! serde = {version = "*", features = ["derive"]}
//! toml = {version = "*", features = ["serde"]}
//! serde_json = {version = "*"}
//! ```
use serde::Deserialize;
use std::env;
use std::fs;
use std::collections::{HashMap, HashSet};

enum LintLevel {
    Deny,
    Allow,
    Forbid,
    Warn
}

struct Lints(HashMap<String, LintLevel>);

impl Lints {
    pub fn new() -> Self {
        Self(HashMap::new())
    }

    // if defined multiple times this is the priority order
    // * allow
    // * warn
    // * deny
    // * forbid
    pub fn apply(&mut self, file: LintFile) {
        for lint in file.allow {
            self.0.insert(lint, LintLevel::Allow);
        }

        for lint in file.warn {
            self.0.insert(lint, LintLevel::Warn);
        }

        for lint in file.deny {
            self.0.insert(lint, LintLevel::Deny);
        }

        for lint in file.forbid {
            self.0.insert(lint, LintLevel::Forbid);
        }
    }
}

#[derive(Deserialize, Default)]
struct LintFile {
    allow: HashSet<String>,
    warn: HashSet<String>,
    deny: HashSet<String>,
    forbid: HashSet<String>,
}

fn main() {
    let cwd = env::get("CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY").expect("environment variable should exist");
    let cwd = PathBuf::from(cwd);

    let mut active = &cwd;
    let mut files = vec![];

    // go up the directory tree and find all files in `.config/lints.toml`
    loop {
        let candidate = active.join(".config/lints.toml");

        if candidate.exists() && candidate.is_file() {
            files.push(candidate);
        }

        // we do this until we reach the root of the git repo (a `.git` folder is present)
        if active.join(".git").exists() && active.join(".git").is_dir() {
            break;
        }

        // ... or we have no parent anymore
        if let Some(parent) = active.parent() {
            active = parent;
        } else {
            break;
        }
    }

    // we now apply them into a single configuration this allows for easy overwrites in child directories
    files.reverse();

    let mut lints = Lints::new;

    for file in files {
        let contents = fs::read_to_string(&file).expect(&format!("should be able to read {file}"));

        let file = toml::from_str(&contents).expect(&format!("should be valid toml ({file})"));
        lints.apply(file);
    }
}
'''
