[tasks.clippy-collect-lints]
private = true
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! serde = {version = "*", features = ["derive"]}
//! toml = {version = "*", features = ["parse"]}
//! serde_json = {version = "*"}
//! ```
use serde::{Deserialize, Serialize};
use std::env;
use std::fs;
use std::collections::{HashMap, HashSet};
use std::path::PathBuf;

enum LintLevel {
    Allow,
    Warn,
    Deny,
    Forbid,
}

struct Lints(HashMap<String, LintLevel>);

impl Lints {
    pub fn new() -> Self {
        Self(HashMap::new())
    }

    // if defined multiple times this is the priority order
    // * allow
    // * warn
    // * deny
    // * forbid
    pub fn apply(&mut self, file: LintFile) {
        for lint in file.allow {
            self.0.insert(lint, LintLevel::Allow);
        }

        for lint in file.warn {
            self.0.insert(lint, LintLevel::Warn);
        }

        for lint in file.deny {
            self.0.insert(lint, LintLevel::Deny);
        }

        for lint in file.forbid {
            self.0.insert(lint, LintLevel::Forbid);
        }

        for lint in file.default {
            self.0.remove(&lint);
        }
    }

    pub fn into_file(self) -> LintFile {
        self.0.into_iter().fold(LintFile::default(), |mut acc, (lint, level)| {
            match level {
                LintLevel::Allow => acc.allow.insert(lint),
                LintLevel::Warn => acc.warn.insert(lint),
                LintLevel::Deny => acc.deny.insert(lint),
                LintLevel::Forbid => acc.forbid.insert(lint),
            };

            acc
        })
    }
}

#[derive(Deserialize, Serialize, Default)]
struct LintFile {
    #[serde(default)]
    allow: HashSet<String>,
    #[serde(default)]
    warn: HashSet<String>,
    #[serde(default)]
    deny: HashSet<String>,
    #[serde(default)]
    forbid: HashSet<String>,
    #[serde(default)]
    default: HashSet<String>,
}

fn main() {
    let cwd = env::var("CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY").expect("environment variable should exist");
    let cwd = PathBuf::from(cwd);

    let mut active = cwd.as_path();
    let mut files = vec![];

    // go up the directory tree and find all files in `.config/lints.toml`
    loop {
        let candidate = active.join(".config/lints.toml");

        if candidate.exists() && candidate.is_file() {
            files.push(candidate);
        }

        // we do this until we reach the root of the git repo (a `.git` folder is present)
        if active.join(".git").exists() && active.join(".git").is_dir() {
            break;
        }

        // ... or we have no parent anymore
        if let Some(parent) = active.parent() {
            active = parent;
        } else {
            break;
        }
    }

    // we now apply them into a single configuration this allows for easy overwrites in child directories
    files.reverse();

    let mut lints = Lints::new();

    for file in files {
        let contents = fs::read_to_string(&file).expect(&format!("should be able to read {}", file.display()));

        let file = toml::from_str(&contents).expect(&format!("should be valid toml ({})", file.display()));
        lints.apply(file);
    }

    println!("{}", serde_json::to_string_pretty(&lints.into_file()).expect("able to serialize"))
}
'''


[tasks.clippy-collect-cargo]
private = true
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! serde = {version = "*", features = ["derive"]}
//! toml_edit = {version = "*"}
//! serde_json = {version = "*"}
//! ```
use std::env;
use std::fs;
use std::collections::{HashMap, HashSet};
use std::path::PathBuf;
use toml_edit::Document;

#[derive(Deserialize, Serialize, Default)]
struct LintFile {
    #[serde(default)]
    allow: HashSet<String>,
    #[serde(default)]
    warn: HashSet<String>,
    #[serde(default)]
    deny: HashSet<String>,
    #[serde(default)]
    forbid: HashSet<String>,
    #[serde(default)]
    default: HashSet<String>,
}

fn main() {
    let cwd = env::var("CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY").expect("environment variable should exist");
    let cwd = PathBuf::from(cwd);

    let path = cwd.join(".cargo/config.toml");

    if !path.exists() || !path.is_file() {
        println!("{}", serde_json::to_string_pretty(&LintFile::default()).expect("able to serialize"));
        return;
    }

    let contents = path::read_to_string(&path).expect(&format!("should be able to read {}", path.display()));
    let document = contents.parse::<Document>();

    // TODO: find decor that matches our string
    // TODO: parse all strings
    // TODO: return result
}
'''
