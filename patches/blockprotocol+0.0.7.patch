diff --git a/node_modules/blockprotocol/core.d.ts b/node_modules/blockprotocol/core.d.ts
index 20a9bbd..db7b133 100644
--- a/node_modules/blockprotocol/core.d.ts
+++ b/node_modules/blockprotocol/core.d.ts
@@ -1,3 +1,6 @@
+import { BlockProtocolStyling } from "./styling" 
+export * from "./styling" 
+
 // ---------------------------- UTILITIES ----------------------------- //
 
 type DistributedOmit<T, K extends PropertyKey> = T extends T
@@ -27,7 +30,7 @@ export type BlockVariant = {
   /**
    * @deprecated - Use the `name` field instead.
    */
-  displayName: string;
+  displayName?: string;
   properties: JSONObject;
   examples?: JSONObject[] | null;
 };
@@ -191,10 +194,12 @@ export type BlockProtocolMultiFilter = {
   operator: BlockProtocolMultiFilterOperatorType;
 };
 
-export type BlockProtocolMultiSort = {
+export type BlockProtocolSort = {
   field: string;
   desc?: boolean | undefined | null;
-}[];
+};
+
+export type BlockProtocolMultiSort = BlockProtocolSort[];
 
 export type BlockProtocolAggregateOperationInput = {
   entityTypeId?: string | null;
@@ -249,7 +254,8 @@ export type BlockProtocolUploadFileFunction = {
 
 // ----------------------------- LINKS -------------------------------- //
 
-type SingleTargetLinkFields = {
+export type SingleTargetLinkFields = {
+  linkId: string;
   destinationEntityId: string;
   destinationEntityTypeId?: string | null;
   destinationEntityVersionId?: string | null;
@@ -260,7 +266,6 @@ type AggregationTargetLinkFields = {
 };
 
 export type BlockProtocolLink = {
-  linkId: string;
   sourceAccountId?: string | null;
   sourceEntityId: string;
   sourceEntityTypeId?: string | null;
@@ -304,14 +309,16 @@ export type BlockProtocolCreateLinksFunction = {
   (actions: BlockProtocolCreateLinksAction[]): Promise<BlockProtocolLink[]>;
 };
 
+export type BlockProtocolUpdateLinkedAggregationActionFragment = {
+  // temporary identifiers for LinkedAggregations - to be replaced with a single id
+  sourceAccountId?: string | null;
+  sourceEntityId: string;
+  path: string;
+  }
+
 export type BlockProtocolUpdateLinksAction =
   | { linkId: string; data: Pick<BlockProtocolLink, "index"> }
-  | ({
-      // temporary identifiers for LinkedAggregations - to be replaced with a single id
-      sourceAccountId?: string | null;
-      sourceEntityId: string;
-      path: string;
-    } & { data: BlockProtocolAggregateOperationInput });
+  | (BlockProtocolUpdateLinkedAggregationActionFragment & { data: BlockProtocolAggregateOperationInput });
 
 export type BlockProtocolUpdateLinksFunction = {
   (actions: BlockProtocolUpdateLinksAction[]): Promise<BlockProtocolLink[]>;
@@ -452,4 +459,4 @@ export type BlockProtocolProps = {
   linkedAggregations?: BlockProtocolLinkedAggregation[];
   linkedEntities?: BlockProtocolEntity[];
   linkGroups?: BlockProtocolLinkGroup[];
-} & BlockProtocolFunctions;
+} & BlockProtocolFunctions & BlockProtocolStyling;
diff --git a/node_modules/blockprotocol/styling.d.ts b/node_modules/blockprotocol/styling.d.ts
new file mode 100644
index 0000000..5d01daf
--- /dev/null
+++ b/node_modules/blockprotocol/styling.d.ts
@@ -0,0 +1,33 @@
+/**
+ * Block Protocol them is inspired by MUI
+ * @see https://mui.com/customization/theming/
+ * @see 
+ */
+
+export interface Color {
+  50: string;
+  100: string;
+  200: string;
+  300: string;
+  400: string;
+  500: string;
+  600: string;
+  700: string;
+  800: string;
+  900: string;
+  A100: string;
+  A200: string;
+  A400: string;
+  A700: string;
+}
+
+export type ColorPartial = Partial<Color>;
+
+
+export type BlockProtocolTheme = {
+  
+}
+
+export type BlockProtocolStyling = {
+  theme?: BlockProtocolTheme | undefined
+}
diff --git a/node_modules/blockprotocol/styling.js b/node_modules/blockprotocol/styling.js
new file mode 100644
index 0000000..f855b68
--- /dev/null
+++ b/node_modules/blockprotocol/styling.js
@@ -0,0 +1,2 @@
+// Current version of this package only provides TypeScript types.
+// Watch https://github.com/blockprotocol/blockprotocol for the updates!
