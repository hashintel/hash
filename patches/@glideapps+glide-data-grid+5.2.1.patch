diff --git a/node_modules/@glideapps/glide-data-grid/dist/cjs/index.js b/node_modules/@glideapps/glide-data-grid/dist/cjs/index.js
index 44bb7a8..7faa7a7 100644
--- a/node_modules/@glideapps/glide-data-grid/dist/cjs/index.js
+++ b/node_modules/@glideapps/glide-data-grid/dist/cjs/index.js
@@ -10011,8 +10011,9 @@ var DataEditorImpl = (p, forwardedRef) => {
           break;
       }
     },
-    scrollTo
-  }), [appendRow, onCopy, onKeyDown, onPasteInternal, rowMarkerOffset, scrollTo]);
+    scrollTo,
+    setOverlaySimple
+  }), [appendRow, onCopy, onKeyDown, onPasteInternal, rowMarkerOffset, scrollTo, setOverlaySimple]);
   const [selCol, selRow] = currentCell != null ? currentCell : [];
   const onCellFocused = React36.useCallback((cell) => {
     const [col, row] = cell;
diff --git a/node_modules/@glideapps/glide-data-grid/dist/js/index.js b/node_modules/@glideapps/glide-data-grid/dist/js/index.js
index 58fcf67..90a728d 100644
--- a/node_modules/@glideapps/glide-data-grid/dist/js/index.js
+++ b/node_modules/@glideapps/glide-data-grid/dist/js/index.js
@@ -9687,8 +9687,9 @@ var DataEditorImpl = (p, forwardedRef) => {
           break;
       }
     },
-    scrollTo
-  }), [appendRow, onCopy, onKeyDown, onPasteInternal, rowMarkerOffset, scrollTo]);
+    scrollTo,
+    setOverlaySimple
+  }), [appendRow, onCopy, onKeyDown, onPasteInternal, rowMarkerOffset, scrollTo, setOverlaySimple]);
   const [selCol, selRow] = currentCell != null ? currentCell : [];
   const onCellFocused = React34.useCallback((cell) => {
     const [col, row] = cell;
diff --git a/node_modules/@glideapps/glide-data-grid/dist/ts/data-editor/data-editor.d.ts b/node_modules/@glideapps/glide-data-grid/dist/ts/data-editor/data-editor.d.ts
index 22f180d..3dfe70a 100644
--- a/node_modules/@glideapps/glide-data-grid/dist/ts/data-editor/data-editor.d.ts
+++ b/node_modules/@glideapps/glide-data-grid/dist/ts/data-editor/data-editor.d.ts
@@ -434,6 +434,14 @@ export interface DataEditorRef {
      * Scrolls to the desired cell or location in the grid.
      */
     scrollTo: ScrollToFn;
+    setOverlaySimple: (val: NonNullable<{
+        target: Rectangle;
+        content: GridCell;
+        initialValue: string | undefined;
+        cell: Item;
+        highlight: boolean;
+        forceEditMode: boolean;
+    }>) => void
 }
 /**
  * The primary component of Glide Data Grid.
diff --git a/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/cells/cell-types.d.ts b/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/cells/cell-types.d.ts
index ba1b224..3105602 100644
--- a/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/cells/cell-types.d.ts
+++ b/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/cells/cell-types.d.ts
@@ -19,6 +19,7 @@ export interface BaseDrawArgs {
 /** @category Drawing */
 export interface DrawArgs<T extends InnerGridCell> extends BaseDrawArgs {
     cell: T;
+    tableId: string;
 }
 /** @category Drawing */
 export interface PrepResult {
diff --git a/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/data-grid-sprites.d.ts b/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/data-grid-sprites.d.ts
index f13ff02..9747490 100644
--- a/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/data-grid-sprites.d.ts
+++ b/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/data-grid-sprites.d.ts
@@ -6,6 +6,39 @@ declare type Sprite = HeaderIconMap["headerArray"];
 export declare type SpriteMap = Record<string | HeaderIcon, Sprite>;
 /** @category Columns */
 export declare type SpriteVariant = "normal" | "selected" | "special";
+
+export declare type CustomIcon =
+  | "bpLabel"
+  | "bpError"
+  | "bpAsteriskCircle"
+  | "bpAsterisk"
+  | "bpChevronRight"
+  | "bpCheck"
+  | "bpCross"
+  | "bpList"
+  | "bpLink"
+  | "bpTrash"
+  | "bpRightLeft"
+  | "bpTypeBoolean"
+  | "bpTypeText"
+  | "bpTypeNumber"
+  | "bpBracketsCurly"
+  | "bpBracketsSquare"
+  | "bpEmptySet"
+  | "bpChevronDown"
+  | "calendarRegular"
+  | "calendarClockRegular"
+  | "clockRegular"
+  | "inputPipeRegular"
+  | "atRegular"
+  | "rulerRegular"
+  | "arrowUpAzLight"
+  | "arrowDownAzLight"
+  | "filterLight"
+  | "userRegular"
+  | "wandMagicSparklesRegular"
+  | "hashSolid";
+
 /** @category Columns */
 export declare class SpriteManager {
     private onSettled;
@@ -13,7 +46,7 @@ export declare class SpriteManager {
     private headerIcons;
     private inFlight;
     constructor(headerIcons: SpriteMap | undefined, onSettled: () => void);
-    drawSprite(sprite: HeaderIcon | string, variant: SpriteVariant, ctx: CanvasRenderingContext2D, x: number, y: number, size: number, theme: Theme, alpha?: number): void;
+    drawSprite(sprite: HeaderIcon | CustomIcon, variant: SpriteVariant, ctx: CanvasRenderingContext2D, x: number, y: number, size: number, theme: Theme, alpha?: number): void;
 }
 export {};
 //# sourceMappingURL=data-grid-sprites.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/data-grid-types.d.ts b/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/data-grid-types.d.ts
index 8ead3e1..5763081 100644
--- a/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/data-grid-types.d.ts
+++ b/node_modules/@glideapps/glide-data-grid/dist/ts/data-grid/data-grid-types.d.ts
@@ -225,7 +225,7 @@ export declare function isSizedGridColumn(c: GridColumn): c is SizedGridColumn;
 /** @category Columns */
 export interface SizedGridColumn extends BaseGridColumn {
     readonly width: number;
-    readonly id?: string;
+    readonly id: string;
 }
 /** @category Columns */
 export interface AutoGridColumn extends BaseGridColumn {
