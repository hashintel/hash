---
description: Rust Documentation Practices
globs: "**/*.rs"
alwaysApply: false
---

# Rust Documentation Practices

## Documentation Structure

- Each public item must have a doc comment
- Begin doc comments with a single-line summary of the item's purpose
- Include a blank line after the summary line for longer documentation
- Structure complex documentation with Markdown headers
- Always use intra-doc links (`[`Item`]`) whenever referencing other items in the codebase
- Prefer inline descriptions over section headers for parameters and return values

```rust
/// Retrieves an entity by its UUID.
///
/// Loads the entity from the store and verifies access permissions for the
/// requesting account. Returns an [`Entity`] object if found.
```

## Intra-Doc Links

- Use intra-doc links (Rust's reference syntax) liberally to improve user experience
- Link to every type, trait, function, or other item you mention in documentation
- Use the full path for items from other modules: `[`crate::module::Item`]`
- When referring to items in the current module, just use `[`Item`]`
- Add reference link definitions at the bottom of the doc comment if needed

```rust
/// Updates the [`User`] in the system based on provided changes.
///
/// This process uses the [`UserUpdateStrategy`] to determine which fields to update
/// and applies validations defined in [`validation::user`].
///
/// [`validation::user`]: crate::validation::user
```

## Special Documentation Sections

### Error Documentation

- Always document errors with an "# Errors" section for fallible functions
- List each error variant with a bullet point
- Link error variants with Rust's reference syntax `[`VariantName`]` for actual error types
- For errors coming from external crates or generated via `Error::custom()`, use a simple description without links

```rust
/// Creates a new web in the system.
///
/// This function registers a new web with the given parameters and ensures its
/// uniqueness in the system.
///
/// # Errors
///
/// - [`WebAlreadyExists`] if a web with the same ID already exists
/// - [`AuthorizationError`] if the account lacks permission
/// - [`DatabaseError`] if the operation fails at the database level
///
/// [`WebAlreadyExists`]: WebError::WebAlreadyExists
/// [`AuthorizationError`]: WebError::Authorization
/// [`DatabaseError`]: WebError::Database
pub fn create_web(&mut self) -> Result<WebId, Report<WebError>> {
```

For custom errors created at runtime (like validation errors):

```rust
/// Validates that all input values are unique.
///
/// # Errors
///
/// - Returns a validation error if the input contains duplicate values
pub fn validate_unique(values: &[String]) -> Result<(), Report<ValidationError>> {
```

### Panic Documentation

- Document potential panics with a "# Panics" section
- Include the exact conditions that could cause a panic

```rust
/// Converts the entity ID to a UUID.
///
/// # Panics
///
/// Panics if the entity ID contains an invalid UUID format.
```

### Examples

- Add "# Examples" sections for public API functions
- Keep examples minimal but complete
- Include error handling in examples
- Use comment-based error handling for brevity when appropriate
- Include assertions to demonstrate expected behavior
- Doc comments should follow high-quality standards like those in crates such as `time`, `jiff`, or `serde`
- Never mention variable types in doc comments when that information is already available in function signatures
- Ensure all code examples compile and function correctly
- Use `#` comments to hide necessary setup code from documentation display

```rust
/// # Examples
///
/// ```rust
/// let entities = get_entities_by_type(type_id)?;
/// assert_eq!(entities.len(), 2);
/// for entity in entities {
///     println!("Found entity: {}", entity.title);
/// }
/// # Ok::<(), Box<dyn core::error::Error>>(())
/// ```
```

## API Documentation

### Function Documentation

- Begin with a clear, single-line summary of what the function does
- Include a detailed description of the function's behavior
- For simple functions (0-2 parameters), describe parameters inline in the main description
- For complex functions (3+ parameters), use an explicit "# Arguments" section with bullet points
- Always describe return values in the main description text, not in a separate "# Returns" section
- Link to relevant types using intra-doc links

For simple functions:

```rust
/// Processes the input elements and returns a filtered collection.
///
/// Takes a collection of `input` elements, applies the `filter_fn` predicate
/// to each, and returns a [`Vec`] containing only the elements that passed
/// the filter condition.
```

For complex functions:

```rust
/// Merges multiple data sources and applies transformation rules.
///
/// This function combines data from various sources, applies the specified
/// transformation rules, and returns a unified data structure. The process
/// preserves metadata from all sources when possible.
///
/// # Arguments
///
/// * `sources` - Collection of data sources to merge
/// * `rules` - Transformation rules to apply during merging
/// * `options` - Configuration options controlling the merge behavior
/// * `callback` - Optional function called for each merged item
///
/// # Errors
///
/// - [`SourceError`] if any data source cannot be accessed
/// - [`RuleError`] if transformation rules are invalid
```

### Type Documentation

- Document the purpose of the type and its invariants
- For structs, document each field with field-level doc comments
- For enums, document each variant
- Include examples for non-trivial instantiation
- Describe arguments and return values in the main description rather than in separate sections

```rust
/// A unique identifier for an entity in the system.
///
/// This is a combination of the entity UUID and the web it belongs to.
/// Used throughout the API to precisely reference entities.
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct EntityId {
    /// The UUID of the entity
    pub entity_uuid: EntityUuid,

    /// The web this entity belongs to
    pub web_id: WebId,
}
```

### Trait Documentation

- Document the purpose and contract of the trait
- Document each method, even if it seems self-explanatory
- Specify implementation requirements in the trait documentation

```rust
/// Represents a store for entity data.
///
/// Implementers of this trait provide storage and retrieval capabilities
/// for [`Entity`] instances in the system. All implementations must ensure
/// thread safety and handle concurrent access appropriately.
pub trait EntityStore: Send + Sync {
    /// Retrieves an entity by its ID.
    ///
    /// Looks up the entity with the given `id` in the store and returns
    /// it if found.
    ///
    /// # Errors
    ///
    /// - [`NotFound`] if the entity does not exist
    /// - [`DatabaseError`] if the operation fails
    ///
    /// [`NotFound`]: StoreError::NotFound
    /// [`DatabaseError`]: StoreError::Database
    fn get_entity(&self, id: EntityId) -> Result<Entity, Report<StoreError>>;

    // Additional methods...
}

```### Trait Documentation

- Document the purpose and contract of the trait
- Document each method, even if it seems self-explanatory
- Specify implementation requirements in the trait documentation

```rust
/// Represents a store for entity data.
///
/// Implementers of this trait provide storage and retrieval capabilities
/// for [`Entity`] instances in the system. All implementations must ensure
/// thread safety and handle concurrent access appropriately.
pub trait EntityStore: Send + Sync {
    /// Retrieves an entity by its ID.
    ///
    /// Looks up the entity with the given `id` in the store and returns
    /// it if found.
    ///
    /// # Errors
    ///
    /// - [`NotFound`] if the entity does not exist
    /// - [`DatabaseError`] if the operation fails
    ///
    /// [`NotFound`]: StoreError::NotFound
    /// [`DatabaseError`]: StoreError::Database
    fn get_entity(&self, id: EntityId) -> Result<Entity, Report<StoreError>>;

    // Additional methods...
}
```

### Trait Implementation Documentation

- Don't create documentation for trait implementations, conversions, or trait-derived functions if upstream documentation already exists
- Skip documentation for standard trait implementations like `From`, `Display`, `Debug`, `Serialize`, etc. unless your implementation has unique behavior
- Only document implementations when:
  - The implementation has specific behavior beyond the trait's definition
  - There are performance considerations users should be aware of
  - The implementation has different failure modes or edge cases
  - The implementation provides additional functionality beyond the trait contract

```rust
// Good: No documentation needed for standard traits
impl Debug for MyType {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        // implementation...
    }
}

// Good: No documentation needed for standard conversions
impl From<MyType> for String {
    fn from(value: MyType) -> Self {
        // implementation...
    }
}

// Good: Documentation needed due to special behavior
/// Custom serialization that handles legacy formats.
///
/// This implementation supports both the current schema and the deprecated v1 format
/// to maintain backward compatibility with older data.
impl Serialize for ComplexType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error> {
        // implementation with special behavior...
    }
}
```

### Module Documentation

- Add a doc comment at the top of each module file
- Describe the module's purpose, contents, and how it fits into the overall architecture
- Include links to key types and functions
- Add usage examples for the module as a whole when appropriate

```rust
//! Entity management functionality.
//!
//! This module provides types and functions for creating, updating, and
//! querying entities in the system. The main types are:
//!
//! - [`Entity`]: The core entity type
//! - [`EntityId`]: Unique identifier for entities
//! - [`EntityStore`]: Trait for storing and retrieving entities
//!
//! # Examples
//!
//! ```
//! use hash_graph::entity::{Entity, EntityStore};
//!
//! // Example code showing module usage
//! ```
```

## Code Comments

### Inline Comments

- Place comments on separate lines above the code they describe, not on the same line
- Use descriptive comments to explain "why", not just "what" the code does
- For complex algorithms, add comments explaining the approach
- Comments should not simply restate what is obvious from the code itself

```rust
// Bad:
let result = calculate_sum(values); // Calculate the sum of values

// Good:
// Calculate the weighted sum to prioritize recent values
let result = calculate_sum(values);
```

### Test Documentation

For guidance on structuring test documentation and writing assertions, refer to the [Rust Testing Strategy](mdc:.cursor/rules/rust-testing-strategy.mdc) file.

Key points:

- Document test scenarios with clear comments
- Use descriptive function names that explain the test scenario
- Follow the project's assertion formatting standards

## Project-Specific Patterns

### Performance Notes

- Add "# Performance" sections for performance-critical functions
- Document complexity and potential bottlenecks

```rust
/// Retrieves all entities matching the filter.
///
/// # Performance
///
/// This operation performs pagination internally and has O(n) complexity
/// where n is the number of entities matching the filter. For large result
/// sets, consider using the streaming version instead.
```

- Apply performance documentation when:
  - **Processing variable-sized inputs** - Document how performance scales with input size
  - **In hot paths** - Document components used in performance-critical code paths
  - **Complex algorithms** - Document non-obvious time or space complexity
  - **Public APIs** - Document performance characteristics of public interfaces
  - **Resource-intensive operations** - Document memory usage, I/O, or CPU consumption
  - **Operations with tradeoffs** - Document performance vs. correctness/convenience tradeoffs

- Skip performance documentation when:
  - The performance characteristics are obvious (e.g., simple getters/setters)
  - The component is an internal implementation detail with predictable characteristics
  - The component uses well-documented standard library features with no special usage patterns
  - The code is not performance-sensitive and prioritizes other aspects (safety, correctness)

### Async Documentation

- Document concurrency considerations for async functions
- Specify if a function spawns tasks or requires specific executor context

```rust
/// Processes the entity asynchronously.
///
/// # Concurrency
///
/// This function spawns multiple tasks to process entity attributes in
/// parallel. It should be called from a multi-threaded runtime context.
```

## Tooling Integration

- Use `#[cfg_attr(doc, doc = "...")]` for conditional documentation when appropriate
- Apply `#[doc(hidden)]` for items that are public for technical reasons but not part of the public API
- Support rustdoc search with descriptive wording in documentation
- Use `cargo doc --no-deps --all-features` to verify documentation
