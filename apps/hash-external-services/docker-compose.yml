volumes:
  hash-postgres-data:
  hash-vault-data:
  logs:

services:
  hash-dev-opensearch:
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      HASH_OPENSEARCH_ENABLED: "${HASH_OPENSEARCH_ENABLED}"
      ## Tell OpenSearch that it's operating in single-node mode
      discovery.type: single-node
      ## Disable the security module for development so we can connect over plain HTTP
      plugins.security.disabled: true
      ## Docker volumes are ~10GB by default which is typically much smaller than the
      ## host's drive size. This can cause OpenSearch to shutdown if it thinks disk
      ## space is running low. Set the disk high watermark to 100% to ignore this.
      cluster.routing.allocation.disk.watermark.high: 100%
      cluster.routing.allocation.disk.watermark.flood_stage: 100%
    build:
      context: ./opensearch
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    ## Mounting open search data to a local directory may lead to java.nio.file.AccessDeniedException.
    ## Details: https://github.com/opensearch-project/OpenSearch/issues/1579.
    ## We can revisit the setup after upgrading base image or by fixing permissions in a custom image.
    # volumes:
    #   - ../../var/hash-external-service/opensearch/data:/usr/share/opensearch/data

  postgres:
    build:
      context: ./postgres
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      PGDATA: /data/pgdata
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      HASH_KRATOS_PG_USER: "${HASH_KRATOS_PG_USER}"
      HASH_KRATOS_PG_PASSWORD: "${HASH_KRATOS_PG_PASSWORD}"
      HASH_KRATOS_PG_DATABASE: "${HASH_KRATOS_PG_DATABASE}"
      HASH_TEMPORAL_PG_USER: "${HASH_TEMPORAL_PG_USER}"
      HASH_TEMPORAL_PG_PASSWORD: "${HASH_TEMPORAL_PG_PASSWORD}"
      HASH_TEMPORAL_PG_DATABASE: "${HASH_TEMPORAL_PG_DATABASE}"
      HASH_TEMPORAL_VISIBILITY_PG_DATABASE: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      HASH_GRAPH_PG_USER: "${HASH_GRAPH_PG_USER}"
      HASH_GRAPH_PG_PASSWORD: "${HASH_GRAPH_PG_PASSWORD}"
      HASH_GRAPH_PG_DATABASE: "${HASH_GRAPH_PG_DATABASE}"
      HASH_GRAPH_REALTIME_PG_USER: "${HASH_GRAPH_REALTIME_PG_USER}"
      HASH_GRAPH_REALTIME_PG_PASSWORD: "${HASH_GRAPH_REALTIME_PG_PASSWORD}"
    volumes:
      - hash-postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro
    healthcheck:
      test:
        ["CMD", "pg_isready", "-q", "-h", "postgres", "-U", "${POSTGRES_USER}"]
      interval: 2s
      timeout: 2s
      retries: 5
    command: -c 'config_file=/etc/postgresql/postgresql.conf' --track_commit_timestamp=on

  graph-migrate:
    init: true
    depends_on:
      postgres:
        condition: service_healthy
    image: hash-graph
    read_only: true
    security_opt:
      - no-new-privileges:true
    volumes:
      - logs:/logs
    command: migrate
    environment:
      # Intentionally use the POSTGRES user as it's the "superadmin" which has access to schema
      HASH_GRAPH_PG_USER: "${POSTGRES_USER}"
      HASH_GRAPH_PG_PASSWORD: "${POSTGRES_PASSWORD}"
      HASH_GRAPH_PG_HOST: "postgres"
      HASH_GRAPH_PG_PORT: "5432"
      HASH_GRAPH_PG_DATABASE: "${HASH_GRAPH_PG_DATABASE}"
      HASH_GRAPH_LOG_FORMAT: "${HASH_GRAPH_LOG_FORMAT:-pretty}"
      HASH_GRAPH_LOG_FOLDER: "/logs/graph-migrations"
      HASH_GRAPH_SENTRY_DSN: "${HASH_GRAPH_SENTRY_DSN-}"
      RUST_LOG: "${HASH_GRAPH_LOG_LEVEL:-graph=trace,hash-graph=trace,tokio_postgres=debug}"
      RUST_BACKTRACE: 1

  graph:
    init: true
    depends_on:
      postgres:
        condition: service_healthy
      graph-migrate:
        condition: service_completed_successfully
    image: hash-graph
    read_only: true
    security_opt:
      - no-new-privileges:true
    volumes:
      - logs:/logs
    command: server --offline
    environment:
      HASH_GRAPH_PG_USER: "${HASH_GRAPH_PG_USER}"
      HASH_GRAPH_PG_PASSWORD: "${HASH_GRAPH_PG_PASSWORD}"
      HASH_GRAPH_PG_HOST: "postgres"
      HASH_GRAPH_PG_PORT: "5432"
      HASH_GRAPH_PG_DATABASE: "${HASH_GRAPH_PG_DATABASE}"
      HASH_GRAPH_LOG_FORMAT: "${HASH_GRAPH_LOG_FORMAT:-pretty}"
      HASH_GRAPH_LOG_FOLDER: "/logs/graph-service"
      HASH_GRAPH_API_HOST: "0.0.0.0"
      HASH_GRAPH_API_PORT: "${HASH_GRAPH_API_PORT}"
      HASH_GRAPH_SENTRY_DSN: "${HASH_GRAPH_SENTRY_DSN-}"
      # For unknown reasons, our error return values are consumed when we
      # configure the OTLP endpoint for the Graph. For now, we've disabled traces.
      # https://app.asana.com/0/1201095311341924/1203636955054323/f
      # HASH_GRAPH_OTLP_ENDPOINT: "http://telemetry-collector:4317"
      RUST_LOG: "${HASH_GRAPH_LOG_LEVEL:-info,graph=trace,hash_graph=trace,tokio_postgres=debug}"
      RUST_BACKTRACE: 1
    healthcheck:
      test:
        [
          "CMD",
          "/hash-graph",
          "server",
          "--healthcheck",
          "--api-port",
          "${HASH_GRAPH_API_PORT}",
        ]
      interval: 2s
      timeout: 2s
      retries: 10

  kratos-migrate:
    build:
      context: ./kratos
      args:
        ENV: dev
        SECRET: "${KRATOS_API_KEY}"
        API_CALLBACK_URL: "http://host.docker.internal:5001/kratos-after-registration"
    depends_on:
      postgres:
        condition: service_healthy
    read_only: true
    security_opt:
      - no-new-privileges:true
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_KRATOS_PG_DATABASE}
    command: migrate sql -e --yes

  kratos:
    build:
      context: ./kratos
      args:
        ENV: dev
        SECRET: "${KRATOS_API_KEY}"
        API_CALLBACK_URL: "http://host.docker.internal:5001/kratos-after-registration"
    depends_on:
      postgres:
        condition: service_healthy
      kratos-migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    environment:
      SECRETS_COOKIE: "${KRATOS_SECRETS_COOKIE}"
      SECRETS_CIPHER: "${KRATOS_SECRETS_CIPHER}"
      COURIER_SMTP_CONNECTION_URI: "smtps://test:test@mailslurper:1025/?skip_ssl_verify=true"
      DSN: "postgres://${HASH_KRATOS_PG_USER}:${HASH_KRATOS_PG_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_KRATOS_PG_DATABASE}"
    command: serve --dev --watch-courier
    read_only: true
    security_opt:
      - no-new-privileges:true
    extra_hosts:
      - host.docker.internal:host-gateway

  mailslurper:
    image: oryd/mailslurper:latest-smtps
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:6.2
    read_only: true
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 2s
      timeout: 2s
      retries: 5
    security_opt:
      - no-new-privileges:true
