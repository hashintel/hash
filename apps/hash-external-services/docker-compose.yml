volumes:
  hash-postgres-data:
  hash-vault-data:
  logs:

services:
  postgres:
    build:
      context: ./postgres
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      HASH_HYDRA_PG_USER: "${HASH_HYDRA_PG_USER}"
      HASH_HYDRA_PG_PASSWORD: "${HASH_HYDRA_PG_PASSWORD}"
      HASH_HYDRA_PG_DATABASE: "${HASH_HYDRA_PG_DATABASE}"
      HASH_KRATOS_PG_USER: "${HASH_KRATOS_PG_USER}"
      HASH_KRATOS_PG_PASSWORD: "${HASH_KRATOS_PG_PASSWORD}"
      HASH_KRATOS_PG_DATABASE: "${HASH_KRATOS_PG_DATABASE}"
      HASH_TEMPORAL_PG_USER: "${HASH_TEMPORAL_PG_USER}"
      HASH_TEMPORAL_PG_PASSWORD: "${HASH_TEMPORAL_PG_PASSWORD}"
      HASH_TEMPORAL_PG_DATABASE: "${HASH_TEMPORAL_PG_DATABASE}"
      HASH_TEMPORAL_VISIBILITY_PG_DATABASE: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      HASH_GRAPH_PG_USER: "${HASH_GRAPH_PG_USER}"
      HASH_GRAPH_PG_PASSWORD: "${HASH_GRAPH_PG_PASSWORD}"
      HASH_GRAPH_PG_DATABASE: "${HASH_GRAPH_PG_DATABASE}"
      HASH_GRAPH_REALTIME_PG_USER: "${HASH_GRAPH_REALTIME_PG_USER}"
      HASH_GRAPH_REALTIME_PG_PASSWORD: "${HASH_GRAPH_REALTIME_PG_PASSWORD}"
    volumes:
      - hash-postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro
    healthcheck:
      test:
        ["CMD", "pg_isready", "-q", "-h", "postgres", "-U", "${POSTGRES_USER}"]
      interval: 2s
      timeout: 2s
      retries: 5
    command: -c 'config_file=/etc/postgresql/postgresql.conf' --track_commit_timestamp=on

  spicedb:
    image: authzed/spicedb:v${HASH_SPICEDB_VERSION}
    restart: on-failure
    environment:
      SPICEDB_HTTP_ENABLED: "True"
      SPICEDB_HTTP_ADDR: ":${HASH_SPICEDB_HTTP_PORT}"
      HASH_SPICEDB_GRPC_PORT: ":${HASH_SPICEDB_GRPC_PORT}"
      SPICEDB_READONLY_GRPC_ENABLED: "False"
      SPICEDB_SCHEMA_PREFIXES_REQUIRED: "True"
      SPICEDB_TELEMETRY_ENDPOINT: ""
      SPICEDB_LOG_FORMAT: "console"
      SPICEDB_DATASTORE_CONN_POOL_READ_MAX_OPEN: "100"
    command: serve
    read_only: true
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 5s
      timeout: 2s
      retries: 10

  kratos-migrate:
    build:
      context: ./kratos
      args:
        ENV: dev
        SECRET: "${KRATOS_API_KEY}"
        API_CALLBACK_URL: "http://host.docker.internal:5001/kratos-after-registration"
    depends_on:
      postgres:
        condition: service_healthy
    read_only: true
    security_opt:
      - no-new-privileges:true
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_KRATOS_PG_DATABASE}
    command: migrate sql -e --yes

  kratos:
    build:
      context: ./kratos
      args:
        ENV: dev
        SECRET: "${KRATOS_API_KEY}"
        API_CALLBACK_URL: "http://host.docker.internal:5001/kratos-after-registration"
    depends_on:
      postgres:
        condition: service_healthy
      kratos-migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    environment:
      SECRETS_COOKIE: "${KRATOS_SECRETS_COOKIE}"
      SECRETS_CIPHER: "${KRATOS_SECRETS_CIPHER}"
      COURIER_SMTP_CONNECTION_URI: "smtps://test:test@mailslurper:1025/?skip_ssl_verify=true"
      DSN: "postgres://${HASH_KRATOS_PG_USER}:${HASH_KRATOS_PG_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_KRATOS_PG_DATABASE}"
    command: serve --dev --watch-courier
    read_only: true
    security_opt:
      - no-new-privileges:true
    extra_hosts:
      - host.docker.internal:host-gateway

  hydra-migrate:
    build:
      context: ./hydra
      args:
        ENV: dev
    depends_on:
      postgres:
        condition: service_healthy
    read_only: true
    security_opt:
      - no-new-privileges:true
    environment:
      DSN: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_HYDRA_PG_DATABASE}"

    command: migrate sql -e --yes

  hydra:
    build:
      context: ./hydra
      args:
        ENV: dev
    depends_on:
      postgres:
        condition: service_healthy
      hydra-migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    ports:
      - "4444:4444" # public API
      - "4445:4445" # admin API
    environment:
      DSN: "postgres://${HASH_HYDRA_PG_USER}:${HASH_HYDRA_PG_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_HYDRA_PG_DATABASE}"
      SECRETS_COOKIE: "${HASH_HYDRA_SECRETS_COOKIE}"
      SECRETS_SYSTEM: "${HASH_HYDRA_SECRETS_SYSTEM}"
      URLS_CONSENT: "${API_ORIGIN}/oauth2/consent"
      URLS_IDENTITY_PROVIDER_PUBLICURL: "http://kratos:4433"
      URLS_IDENTITY_PROVIDER_URL: "http://kratos:4434"
      URLS_LOGIN: "${FRONTEND_URL}/signin"
      URLS_REGISTRATION: "${FRONTEND_URL}/signup"
      URLS_POST_LOGOUT_REDIRECT: "${FRONTEND_URL}"
      URLS_SELF_ISSUER: "${API_ORIGIN}"
      URLS_SELF_PUBLIC: "${API_ORIGIN}"
    command: serve all --dev
    read_only: true
    security_opt:
      - no-new-privileges:true
    extra_hosts:
      - host.docker.internal:host-gateway

  mailslurper:
    image: oryd/mailslurper:latest-smtps
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:6.2
    read_only: true
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 2s
      timeout: 2s
      retries: 5
    security_opt:
      - no-new-privileges:true

  temporal-migrate:
    build:
      context: ./temporal
      dockerfile: migrate.Dockerfile
      args:
        TEMPORAL_VERSION: "${HASH_TEMPORAL_VERSION}"
    read_only: true
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # This sets configuration values in
      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml
      # posgres12 for v12+ of postgres.
      DB: "postgres12"
      DBNAME: "${HASH_TEMPORAL_PG_DATABASE}"
      VISIBILITY_DBNAME: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      DB_PORT: "5432"
      # Intentionally use the POSTGRES user as it's the "superadmin" which has access to schema
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PWD: "${POSTGRES_PASSWORD}"
      POSTGRES_SEEDS: "postgres" # the hostname of the postgres container
    security_opt:
      - no-new-privileges:true

  temporal:
    container_name: temporal
    image: "temporalio/server:${HASH_TEMPORAL_VERSION}"
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      temporal-migrate:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD",
          "temporal",
          "workflow",
          "list",
          "--namespace",
          "HASH",
          "--address",
          "temporal:7233",
        ]
      interval: 10s
      timeout: 2s
      retries: 10
    environment:
      # This sets configuration values in
      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml
      # posgres12 for v12+ of postgres.
      DB: "postgres12"
      DBNAME: "${HASH_TEMPORAL_PG_DATABASE}"
      VISIBILITY_DBNAME: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      DB_PORT: "5432"
      POSTGRES_USER: "${HASH_TEMPORAL_PG_USER}"
      POSTGRES_PWD: "${HASH_TEMPORAL_PG_PASSWORD}"
      POSTGRES_SEEDS: "postgres" # the hostname of the postgres container
    security_opt:
      - no-new-privileges:true
    ports:
      - "${HASH_TEMPORAL_SERVER_PORT}:7233"

  temporal-setup:
    build:
      context: ./temporal
      dockerfile: setup.Dockerfile
      args:
        TEMPORAL_VERSION: "${HASH_TEMPORAL_VERSION}"
    depends_on:
      postgres:
        condition: service_healthy
      temporal:
        condition: service_started
    environment:
      # This sets configuration values in
      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml
      # posgres12 for v12+ of postgres.
      DB: "postgres12"
      DBNAME: "${HASH_TEMPORAL_PG_DATABASE}"
      VISIBILITY_DBNAME: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      DB_PORT: "5432"
      # Intentionally use the POSTGRES user as it's the "superadmin" which has access to schema
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PWD: "${POSTGRES_PASSWORD}"
      POSTGRES_SEEDS: "postgres" # the hostname of the postgres container
      TEMPORAL_ADDRESS: temporal:7233
      SKIP_DEFAULT_NAMESPACE_CREATION: "false" # left as a convenience as most temporal tooling expects default namespace
    security_opt:
      - no-new-privileges:true

  temporal-ui:
    image: temporalio/ui:${HASH_TEMPORAL_UI_VERSION}
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      temporal:
        condition: service_healthy
      temporal-setup:
        condition: service_completed_successfully
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://localhost:3000
    security_opt:
      - no-new-privileges:true
    ports:
      - "${HASH_TEMPORAL_UI_PORT}:8080"
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "nc -z $(hostname) 8080"]
      interval: 2s
      timeout: 2s
      retries: 10
