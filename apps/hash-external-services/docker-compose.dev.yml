volumes:
  hash-vault-data:

services:
  postgres:
    environment:
      HASH_SPICEDB_PG_USER: "${HASH_SPICEDB_PG_USER}"
      HASH_SPICEDB_PG_PASSWORD: "${HASH_SPICEDB_PG_PASSWORD}"
      HASH_SPICEDB_PG_DATABASE: "${HASH_SPICEDB_PG_DATABASE}"
    ports:
      - "${POSTGRES_PORT}:5432"

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${AWS_S3_UPLOADS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_S3_UPLOADS_SECRET_ACCESS_KEY}
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - ../../var/uploads/s3:/data

  minio-ensure-bucket-exists:
    image: minio/mc
    depends_on:
      - minio
    security_opt:
      - no-new-privileges:true
    environment:
      MINIO_ROOT_USER: ${AWS_S3_UPLOADS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_S3_UPLOADS_SECRET_ACCESS_KEY}
      AWS_S3_UPLOADS_BUCKET: ${AWS_S3_UPLOADS_BUCKET}
    entrypoint: >
      /bin/sh -c "
      # Wait until MinIO is accessible
      until (mc config host add myminio http://minio:9000 \$MINIO_ROOT_USER \$MINIO_ROOT_PASSWORD) do echo 'Waiting for MinIO...' && sleep 1; done;

      # Add a fixed delay to ensure MinIO server is fully ready
      sleep 5;

      echo 'Creating bucket if not exists...';
      mc mb myminio/\$AWS_S3_UPLOADS_BUCKET --ignore-existing;
      "

  telemetry-collector:
    image: jaegertracing/all-in-one:1.48
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      # Port 14269 is the Jaeger admin endpoint
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:14269 || exit 1",
        ]
      interval: 2s
      timeout: 2s
      retries: 10
    ports:
      - "16686:16686"
      # To expose OTLP collector over gRPC on the host
      - "4317:4317"
      # To expose OTLP collector over HTTP on the host
      # - "4318:4318"
      # serve configs (sampling, etc.)
      - "5778:5778"
      # accept jaeger.thrift over Thrift-compact protocol (used by most SDKs)
      - "6831:6831"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"

  spicedb-migrate:
    image: authzed/spicedb:v${HASH_SPICEDB_VERSION}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPICEDB_DATASTORE_ENGINE: postgres
      SPICEDB_DATASTORE_CONN_URI: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_SPICEDB_PG_DATABASE}"
      SPICEDB_LOG_FORMAT: "console"
    read_only: true
    security_opt:
      - no-new-privileges:true
    command: migrate head

  spicedb:
    depends_on:
      postgres:
        condition: service_healthy
      spicedb-migrate:
        condition: service_completed_successfully
      telemetry-collector:
        condition: service_healthy
    ports:
      - "${HASH_SPICEDB_HTTP_PORT}:8443"
      - "${HASH_SPICEDB_GRPC_PORT}:50051"
    environment:
      SPICEDB_DATASTORE_ENGINE: postgres
      SPICEDB_DATASTORE_CONN_URI: "postgres://${HASH_SPICEDB_PG_USER}:${HASH_SPICEDB_PG_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_SPICEDB_PG_DATABASE}?plan_cache_mode=force_custom_plan"
      SPICEDB_GRPC_PRESHARED_KEY: "${HASH_SPICEDB_GRPC_PRESHARED_KEY}"
      SPICEDB_OTEL_PROVIDER: "otlpgrpc"
      SPICEDB_OTEL_ENDPOINT: "telemetry-collector:4317"
      SPICEDB_OTEL_INSECURE: "True"

  kratos:
    depends_on:
      telemetry-collector:
        condition: service_healthy
    ports:
      - "4433:4433" # public API
      - "4434:4434" # admin API
    environment:
      OAUTH2_PROVIDER_URL: "http://hydra:4445"
      TRACING_PROVIDER: "jaeger"
      TRACING_PROVIDERS_JAEGER_SAMPLING_SERVER_URL: "telemetry-collector:5778/sampling"
      TRACING_PROVIDERS_JAEGER_LOCAL_AGENT_ADDRESS: "telemetry-collector:6831"
      LOG_LEVEL: trace
    command: serve --dev --watch-courier

  mailslurper:
    ports:
      - "4436:4436"
      - "4437:4437"

  redis:
    ports:
      - "6379:6379"

  vault:
    image: hashicorp/vault
    ports:
      - "${HASH_VAULT_PORT}:8200"
    volumes:
      - hash-vault-data:/vault/file:rw
      # - ./vault/config:/vault/config:rw - for when we need a config file
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "${HASH_VAULT_ROOT_TOKEN}"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    security_opt:
      - no-new-privileges:true
