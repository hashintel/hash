volumes:
  hash-vault-data:
  loki_data:
  tempo_data:
  prometheus_data:
  grafana_data:


services:
  postgres:
    ports:
      - "${POSTGRES_PORT}:5432"

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_API_CORS_ALLOW_ORIGIN: ${FRONTEND_URL}
      MINIO_ROOT_USER: ${AWS_S3_UPLOADS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_S3_UPLOADS_SECRET_ACCESS_KEY}
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - ../../var/uploads/s3:/data

  minio-ensure-bucket-exists:
    image: minio/mc
    depends_on:
      - minio
    restart: "no"
    profiles:
      - setup
    security_opt:
      - no-new-privileges:true
    environment:
      MINIO_ROOT_USER: ${AWS_S3_UPLOADS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_S3_UPLOADS_SECRET_ACCESS_KEY}
      AWS_S3_UPLOADS_BUCKET: ${AWS_S3_UPLOADS_BUCKET}
    entrypoint: |
      /bin/sh -c '
      mc config host add myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD &&
      echo "Creating bucket $$AWS_S3_UPLOADS_BUCKET" &&
      mc mb myminio/$$AWS_S3_UPLOADS_BUCKET --ignore-existing
      '

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.128.0
    command: [ "--config=/etc/otelcol/config.yaml" ]
    depends_on:
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    volumes:
      - ./opentelemetry-collector/otel-collector-config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - 4317:4317
    read_only: true
    security_opt:
      - no-new-privileges:true

  otel-collector-healthcheck:
    image: busybox
    depends_on:
      otel-collector:
        condition: service_started
    command: >
      sh -c 'for i in $(seq 1 60); do wget -q --spider http://otel-collector:13133 && exit 0 || sleep 1; done; exit 1'

  kratos:
    depends_on:
      otel-collector-healthcheck:
        condition: service_completed_successfully
    ports:
      - "4433:4433" # public API
      - "4434:4434" # admin API
    environment:
      OAUTH2_PROVIDER_URL: "http://hydra:4445"
      TRACING_PROVIDER: "otel"
      TRACING_PROVIDERS_OTLP_INSECURE: "true"
      TRACING_PROVIDERS_OTLP_SERVER_URL: "otel-collector:4318"
      LOG_LEVEL: trace
    command: serve --dev --watch-courier

  hydra:
    depends_on:
      otel-collector-healthcheck:
        condition: service_completed_successfully
    environment:
      TRACING_PROVIDER: "otel"
      TRACING_PROVIDERS_OTLP_INSECURE: "true"
      TRACING_PROVIDERS_OTLP_SERVER_URL: "otel-collector:4318"
      LOG_LEVEL: trace

  mailslurper:
    ports:
      - "1025:1025"
      - "4436:4436"
      - "4437:4437"

  redis:
    ports:
      - "6379:6379"

  vault:
    image: hashicorp/vault
    ports:
      - "${HASH_VAULT_PORT}:8200"
    volumes:
      - hash-vault-data:/vault/file:rw
      # - ./vault/config:/vault/config:rw - for when we need a config file
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: [ "CMD", "vault", "status" ]
      interval: 2s
      timeout: 2s
      retries: 10
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "${HASH_VAULT_ROOT_TOKEN}"
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    security_opt:
      - no-new-privileges:true

  # Grafana Loki - Log Aggregation
  loki:
    image: grafana/loki:3.5.2
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/loki.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3100/metrics" ]
      interval: 2s
      timeout: 2s
      retries: 10

  # Grafana Tempo - Distributed Tracing
  tempo:
    image: grafana/tempo:2.8.1
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml:ro
      - tempo_data:/var/tempo
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
    command: [ "-config.file=/etc/tempo.yaml" ]
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3200/status" ]
      interval: 2s
      timeout: 2s
      retries: 10

  # Prometheus - Metrics Storage
  prometheus:
    image: prom/prometheus:v3.5.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy" ]
      interval: 2s
      timeout: 2s
      retries: 10

  # Grafana - Telemetry Visualization
  grafana:
    image: grafana/grafana:12.0.2
    ports:
      - "3001:3000"
    depends_on:
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health" ]
      interval: 2s
      timeout: 2s
      retries: 10
    extra_hosts:
      - "host.docker.internal:host-gateway"
