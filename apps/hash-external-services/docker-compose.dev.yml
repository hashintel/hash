volumes:
  hash-vault-data:

services:
  hash-dev-opensearch:
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      HASH_OPENSEARCH_ENABLED: "${HASH_OPENSEARCH_ENABLED}"
      ## Tell OpenSearch that it's operating in single-node mode
      discovery.type: single-node
      ## Disable the security module for development so we can connect over plain HTTP
      plugins.security.disabled: true
      ## Docker volumes are ~10GB by default which is typically much smaller than the
      ## host's drive size. This can cause OpenSearch to shutdown if it thinks disk
      ## space is running low. Set the disk high watermark to 100% to ignore this.
      cluster.routing.allocation.disk.watermark.high: 100%
      cluster.routing.allocation.disk.watermark.flood_stage: 100%
    build:
      context: ./opensearch
    ports:
      - "9200:9200"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    ## Mounting open search data to a local directory may lead to java.nio.file.AccessDeniedException.
    ## Details: https://github.com/opensearch-project/OpenSearch/issues/1579.
    ## We can revisit the setup after upgrading base image or by fixing permissions in a custom image.
    # volumes:
    #   - ../../var/hash-external-service/opensearch/data:/usr/share/opensearch/data

  postgres:
    environment:
      HASH_SPICEDB_PG_USER: "${HASH_SPICEDB_PG_USER}"
      HASH_SPICEDB_PG_PASSWORD: "${HASH_SPICEDB_PG_PASSWORD}"
      HASH_SPICEDB_PG_DATABASE: "${HASH_SPICEDB_PG_DATABASE}"
    ports:
      - "${POSTGRES_PORT}:5432"

  telemetry-collector:
    image: jaegertracing/all-in-one:1.48
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      # Port 14269 is the Jaeger admin endpoint
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:14269 || exit 1",
        ]
      interval: 2s
      timeout: 2s
      retries: 10
    ports:
      - "16686:16686"
      # To expose OTLP collector over gRPC on the host
      - "4317:4317"
      # To expose OTLP collector over HTTP on the host
      # - "4318:4318"
      # serve configs (sampling, etc.)
      - "5778:5778"
      # accept jaeger.thrift over Thrift-compact protocol (used by most SDKs)
      - "6831:6831"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"

  spicedb-migrate:
    image: authzed/spicedb:v${HASH_SPICEDB_VERSION}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPICEDB_DATASTORE_ENGINE: postgres
      SPICEDB_DATASTORE_CONN_URI: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_SPICEDB_PG_DATABASE}"
      SPICEDB_LOG_FORMAT: "console"
    read_only: true
    security_opt:
      - no-new-privileges:true
    command: migrate head

  spicedb:
    image: authzed/spicedb:v${HASH_SPICEDB_VERSION}
    depends_on:
      postgres:
        condition: service_healthy
      spicedb-migrate:
        condition: service_completed_successfully
      telemetry-collector:
        condition: service_healthy
    ports:
      - "${HASH_SPICEDB_HTTP_PORT}:8443"
      - "${HASH_SPICEDB_GRPC_PORT}:50051"
    restart: on-failure
    environment:
      SPICEDB_HTTP_ENABLED: "True"
      SPICEDB_SCHEMA_PREFIXES_REQUIRED: "True"
      SPICEDB_TELEMETRY_ENDPOINT: ""
      SPICEDB_LOG_FORMAT: "console"
      SPICEDB_DATASTORE_ENGINE: postgres
      SPICEDB_DATASTORE_CONN_URI: "postgres://${HASH_SPICEDB_PG_USER}:${HASH_SPICEDB_PG_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_SPICEDB_PG_DATABASE}?plan_cache_mode=force_custom_plan"
      SPICEDB_GRPC_PRESHARED_KEY: "${HASH_SPICEDB_GRPC_PRESHARED_KEY}"
      SPICEDB_OTEL_PROVIDER: "otlpgrpc"
      SPICEDB_OTEL_ENDPOINT: "telemetry-collector:4317"
      SPICEDB_OTEL_INSECURE: "True"
    command: serve
    read_only: true
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 5s
      timeout: 2s
      retries: 10

  type-fetcher:
    ports:
      - "${HASH_GRAPH_TYPE_FETCHER_PORT}:4444"

  graph-migrate:
    depends_on:
      telemetry-collector:
        condition: service_healthy
    # When an error happens on the graph, OTLP will run into a data race
    # and crash the graph. For now, we've disabled traces.
    # environment:
    #   HASH_GRAPH_OTLP_ENDPOINT: "http://telemetry-collector:4317"

  graph:
    depends_on:
      spicedb:
        condition: service_healthy
      telemetry-collector:
        condition: service_healthy
    environment:
      HASH_SPICEDB_HOST: http://spicedb
      HASH_SPICEDB_HTTP_PORT: "${HASH_SPICEDB_HTTP_PORT}"
      HASH_SPICEDB_GRPC_PRESHARED_KEY: "${HASH_SPICEDB_GRPC_PRESHARED_KEY}"
    # When an error happens on the graph, OTLP will run into a data race
    # and crash the graph. For now, we've disabled traces.
    # environment:
    #   HASH_GRAPH_OTLP_ENDPOINT: "http://telemetry-collector:4317"
    ports:
      - "${HASH_GRAPH_API_PORT}:4000"

  kratos:
    depends_on:
      telemetry-collector:
        condition: service_healthy
    ports:
      - "4433:4433" # public
      - "4434:4434" # admin
    environment:
      TRACING_PROVIDER: "jaeger"
      TRACING_PROVIDERS_JAEGER_SAMPLING_SERVER_URL: "telemetry-collector:5778/sampling"
      TRACING_PROVIDERS_JAEGER_LOCAL_AGENT_ADDRESS: "telemetry-collector:6831"
      LOG_LEVEL: trace
    command: serve --dev --watch-courier

  mailslurper:
    ports:
      - "4436:4436"
      - "4437:4437"

  redis:
    ports:
      - "6379:6379"

  temporal-migrate:
    build:
      context: ./temporal
      dockerfile: migrate.Dockerfile
      args:
        TEMPORAL_VERSION: "${HASH_TEMPORAL_VERSION}"
    read_only: true
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # This sets configuration values in
      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml
      # posgres12 for v12+ of postgres.
      DB: "postgres12"
      DBNAME: "${HASH_TEMPORAL_PG_DATABASE}"
      VISIBILITY_DBNAME: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      DB_PORT: "5432"
      # Intentionally use the POSTGRES user as it's the "superadmin" which has access to schema
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PWD: "${POSTGRES_PASSWORD}"
      POSTGRES_SEEDS: "postgres" # the hostname of the postgres container
    security_opt:
      - no-new-privileges:true

  temporal:
    container_name: temporal
    image: "temporalio/server:${HASH_TEMPORAL_VERSION}"
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      temporal-migrate:
        condition: service_completed_successfully
      hash-dev-opensearch:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "temporal",
          "workflow",
          "list",
          "--namespace",
          "HASH",
          "--address",
          "temporal:7233",
        ]
      interval: 10s
      timeout: 2s
      retries: 10
    environment:
      # This sets configuration values in
      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml
      # posgres12 for v12+ of postgres.
      DB: "postgres12"
      DBNAME: "${HASH_TEMPORAL_PG_DATABASE}"
      VISIBILITY_DBNAME: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      DB_PORT: "5432"
      POSTGRES_USER: "${HASH_TEMPORAL_PG_USER}"
      POSTGRES_PWD: "${HASH_TEMPORAL_PG_PASSWORD}"
      POSTGRES_SEEDS: "postgres" # the hostname of the postgres container
    security_opt:
      - no-new-privileges:true
    ports:
      - "${HASH_TEMPORAL_SERVER_PORT}:7233"

  temporal-setup:
    build:
      context: ./temporal
      dockerfile: setup.Dockerfile
      args:
        TEMPORAL_VERSION: "${HASH_TEMPORAL_VERSION}"
    depends_on:
      postgres:
        condition: service_healthy
      temporal:
        condition: service_started
    environment:
      # This sets configuration values in
      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml
      # posgres12 for v12+ of postgres.
      DB: "postgres12"
      DBNAME: "${HASH_TEMPORAL_PG_DATABASE}"
      VISIBILITY_DBNAME: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      DB_PORT: "5432"
      # Intentionally use the POSTGRES user as it's the "superadmin" which has access to schema
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PWD: "${POSTGRES_PASSWORD}"
      POSTGRES_SEEDS: "postgres" # the hostname of the postgres container
      TEMPORAL_ADDRESS: temporal:7233
      SKIP_DEFAULT_NAMESPACE_CREATION: "false" # left as a convenience as most temporal tooling expects default namespace
    security_opt:
      - no-new-privileges:true

  temporal-ui:
    image: temporalio/ui:${HASH_TEMPORAL_UI_VERSION}
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://localhost:3000
    security_opt:
      - no-new-privileges:true
    ports:
      - "${HASH_TEMPORAL_UI_PORT}:8080"

  hash-temporal-worker-ts:
    image: hash-ai-worker-ts
    restart: unless-stopped
    depends_on:
      temporal:
        condition: service_healthy
    # Environment variables are to be set manually here.
    # We could load in the entirety of the `.env.local` file using `env_file`
    # but to prevent bloating the environment and spilling everything
    # into the process, it is constrained here.
    environment:
      HASH_TEMPORAL_HOST: "temporal"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      HASH_GRAPH_API_HOST: graph
      HASH_GRAPH_API_PORT: "${HASH_GRAPH_API_PORT}"
      # TODO: Remove once they're not needed anymore
      #   see https://linear.app/hash/issue/H-55/avoid-ory-kratos-environment-to-be-required-for-hash-api
      ORY_KRATOS_PUBLIC_URL: "${ORY_KRATOS_PUBLIC_URL}"
      ORY_KRATOS_ADMIN_URL: "${ORY_KRATOS_ADMIN_URL}"
    tmpfs:
      - /tmp
    read_only: true
    security_opt:
      - no-new-privileges:true

  hash-temporal-worker-py:
    image: hash-ai-worker-py
    restart: unless-stopped
    depends_on:
      temporal:
        condition: service_healthy
    # Environment variables are to be set manually here.
    # We could load in the entirety of the `.env.local` file using `env_file`
    # but to prevent bloating the environment and spilling everything
    # into the process, it is constrained here.
    environment:
      HASH_TEMPORAL_HOST: "temporal"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
    tmpfs:
      - /tmp
    read_only: true
    security_opt:
      - no-new-privileges:true

  hash-temporal-worker-integration:
    image: hash-integration-worker
    restart: unless-stopped
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      HASH_TEMPORAL_HOST: "temporal"
      HASH_GRAPH_API_HOST: graph
      HASH_GRAPH_API_PORT: "${HASH_GRAPH_API_PORT}"
    tmpfs:
      - /tmp
    read_only: true
    security_opt:
      - no-new-privileges:true

  vault:
    image: hashicorp/vault
    ports:
      - "${HASH_VAULT_PORT}:8200"
    volumes:
      - hash-postgres-data:/vault/file:rw
      # - ./vault/config:/vault/config:rw - for when we need a config file
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "${HASH_VAULT_ROOT_TOKEN}"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    security_opt:
      - no-new-privileges:true
