volumes:
  hash-vault-data:

services:
  temporal-migrate:
    build:
      context: ./temporal
      dockerfile: migrate.Dockerfile
      args:
        TEMPORAL_VERSION: "${HASH_TEMPORAL_VERSION}"
    read_only: true
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # This sets configuration values in
      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml
      # posgres12 for v12+ of postgres.
      DB: "postgres12"
      DBNAME: "${HASH_TEMPORAL_PG_DATABASE}"
      VISIBILITY_DBNAME: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      DB_PORT: "5432"
      # Intentionally use the POSTGRES user as it's the "superadmin" which has access to schema
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PWD: "${POSTGRES_PASSWORD}"
      POSTGRES_SEEDS: "postgres" # the hostname of the postgres container
    security_opt:
      - no-new-privileges:true

  temporal:
    container_name: temporal
    image: "temporalio/server:${HASH_TEMPORAL_VERSION}"
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      temporal-migrate:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD",
          "temporal",
          "workflow",
          "list",
          "--namespace",
          "HASH",
          "--address",
          "temporal:7233",
        ]
      interval: 10s
      timeout: 2s
      retries: 10
    environment:
      # This sets configuration values in
      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml
      # posgres12 for v12+ of postgres.
      DB: "postgres12"
      DBNAME: "${HASH_TEMPORAL_PG_DATABASE}"
      VISIBILITY_DBNAME: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      DB_PORT: "5432"
      POSTGRES_USER: "${HASH_TEMPORAL_PG_USER}"
      POSTGRES_PWD: "${HASH_TEMPORAL_PG_PASSWORD}"
      POSTGRES_SEEDS: "postgres" # the hostname of the postgres container
    security_opt:
      - no-new-privileges:true
    ports:
      - "${HASH_TEMPORAL_SERVER_PORT}:7233"

  temporal-setup:
    build:
      context: ./temporal
      dockerfile: setup.Dockerfile
      args:
        TEMPORAL_VERSION: "${HASH_TEMPORAL_VERSION}"
    depends_on:
      postgres:
        condition: service_healthy
      temporal:
        condition: service_started
    environment:
      # This sets configuration values in
      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml
      # posgres12 for v12+ of postgres.
      DB: "postgres12"
      DBNAME: "${HASH_TEMPORAL_PG_DATABASE}"
      VISIBILITY_DBNAME: "${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}"
      DB_PORT: "5432"
      # Intentionally use the POSTGRES user as it's the "superadmin" which has access to schema
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PWD: "${POSTGRES_PASSWORD}"
      POSTGRES_SEEDS: "postgres" # the hostname of the postgres container
      TEMPORAL_ADDRESS: temporal:7233
      SKIP_DEFAULT_NAMESPACE_CREATION: "false" # left as a convenience as most temporal tooling expects default namespace
    security_opt:
      - no-new-privileges:true

  temporal-ui:
    image: temporalio/ui:${HASH_TEMPORAL_UI_VERSION}
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      temporal:
        condition: service_healthy
      temporal-setup:
        condition: service_completed_successfully
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://localhost:3000
    security_opt:
      - no-new-privileges:true
    ports:
      - "${HASH_TEMPORAL_UI_PORT}:8080"
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "nc -z $(hostname) 8080"]
      interval: 2s
      timeout: 2s
      retries: 10

  hash-temporal-worker-ts:
    image: hash-ai-worker-ts
    restart: unless-stopped
    depends_on:
      temporal:
        condition: service_healthy
      temporal-setup:
        condition: service_completed_successfully
    # Environment variables are to be set manually here.
    # We could load in the entirety of the `.env.local` file using `env_file`
    # but to prevent bloating the environment and spilling everything
    # into the process, it is constrained here.
    environment:
      HASH_TEMPORAL_HOST: "temporal"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      HASH_GRAPH_API_HOST: graph
      HASH_GRAPH_API_PORT: "${HASH_GRAPH_API_PORT}"
    tmpfs:
      - /tmp
    read_only: true
    security_opt:
      - no-new-privileges:true

  hash-temporal-worker-integration:
    image: hash-integration-worker
    restart: unless-stopped
    depends_on:
      temporal:
        condition: service_healthy
      temporal-setup:
        condition: service_completed_successfully
    environment:
      HASH_TEMPORAL_HOST: "temporal"
      HASH_GRAPH_API_HOST: graph
      HASH_GRAPH_API_PORT: "${HASH_GRAPH_API_PORT}"
    tmpfs:
      - /tmp
    read_only: true
    security_opt:
      - no-new-privileges:true
