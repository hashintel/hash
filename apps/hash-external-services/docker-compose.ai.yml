services:
  hash-temporal-ai-worker:
    image: hash-ai-worker-ts
    restart: unless-stopped
    depends_on:
      graph:
        condition: service_healthy
      temporal:
        condition: service_healthy
      temporal-setup:
        condition: service_completed_successfully
      minio-ensure-bucket-exists:
        # While it's extremely unlikely that the AI worker will attempt to use the bucket before it's been created,
        # docker compose --wait currently will treat a service that exits with no dependencies as an error
        # so we need _something_ to depend on the bucket creation service
        # see https://github.com/docker/compose/issues/10596
        condition: service_completed_successfully
    environment:
      HASH_TEMPORAL_SERVER_HOST: "http://temporal"
      HASH_TEMPORAL_SERVER_PORT: "${HASH_TEMPORAL_SERVER_PORT}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
      HASH_GRAPH_API_HOST: graph
      HASH_GRAPH_API_PORT: "${HASH_GRAPH_API_PORT}"
      INTERNAL_API_KEY: "${INTERNAL_API_KEY}"
      HASH_VAULT_HOST: "http://vault"
      HASH_VAULT_PORT: "${HASH_VAULT_PORT}"
      HASH_VAULT_ROOT_TOKEN: "${HASH_VAULT_ROOT_TOKEN}"

      AWS_REGION: "${AWS_S3_REGION}"
      AWS_S3_UPLOADS_BUCKET: "${AWS_S3_UPLOADS_BUCKET}"
      AWS_S3_UPLOADS_ACCESS_KEY_ID: "${AWS_S3_UPLOADS_ACCESS_KEY_ID}"
      AWS_S3_UPLOADS_SECRET_ACCESS_KEY: "${AWS_S3_UPLOADS_SECRET_ACCESS_KEY}"
      AWS_S3_UPLOADS_ENDPOINT: "${AWS_S3_UPLOADS_ENDPOINT}"
      AWS_S3_UPLOADS_FORCE_PATH_STYLE: "${AWS_S3_UPLOADS_FORCE_PATH_STYLE}"

      HASH_TEMPORAL_WORKER_AI_AWS_ACCESS_KEY_ID: "${HASH_TEMPORAL_WORKER_AI_AWS_ACCESS_KEY_ID}"
      HASH_TEMPORAL_WORKER_AI_AWS_SECRET_ACCESS_KEY: "${HASH_TEMPORAL_WORKER_AI_AWS_SECRET_ACCESS_KEY}"
    tmpfs:
      - /tmp
    read_only: false
    security_opt:
      - no-new-privileges:true
