services:
  type-fetcher:
    image: hash-graph:prod

  graph-migrate:
    image: hash-graph:prod

  graph:
    image: hash-graph:prod
    environment:
      HASH_GRAPH_LOG_LEVEL: "${HASH_GRAPH_LOG_LEVEL}"
      RUST_BACKTRACE: 0

  kratos-migrate:
    build:
      args:
        ENV: prod

  kratos:
    build:
      args:
        ENV: prod
    environment:
      LOG_LEVEL: "warning"
      COOKIES_PATH: "/"
      COOKIES_DOMAIN: "${KRATOS_COOKIE_DOMAIN}"
      COOKIES_SAME_SITE: "Lax"
      SERVE_PUBLIC_BASE_URL: "${FRONTEND_URL}/api/ory"
      SERVE_PUBLIC_CORS_ALLOWED_HEADERS: "Authorization,Content-Type,X-Session-Token,X-CSRF-Token"
      SERVE_PUBLIC_CORS_ALLOWED_ORIGINS: "${FRONTEND_URL}"
      SELFSERVICE_DEFAULT_BROWSER_RETURN_URL: "${FRONTEND_URL}/"
      SELFSERVICE_ALLOWED_RETURN_URLS: "${FRONTEND_URL}"
      SELFSERVICE_FLOWS_ERROR_UI_URL: "${FRONTEND_URL}/error"
      SELFSERVICE_FLOWS_LOGOUT_AFTER_DEFAULT_BROWSER_RETURN_URL: "${FRONTEND_URL}/login"
      SELFSERVICE_FLOWS_LOGIN_UI_URL: "${FRONTEND_URL}/login"
      SELFSERVICE_FLOWS_REGISTRATION_UI_URL: "${FRONTEND_URL}/signup"
      SELFSERVICE_METHODS_LINK_CONFIG_BASE_URL: "${FRONTEND_URL}/api/ory"
      SELFSERVICE_FLOWS_VERIFICATION_UI_URL: "${FRONTEND_URL}/verification"
      SELFSERVICE_FLOWS_RECOVERY_UI_URL: "${FRONTEND_URL}/recovery"
      SELFSERVICE_FLOWS_SETTINGS_UI_URL: "${FRONTEND_URL}/settings"
      LOG_LEAK_SENSITIVE_VALUES: "false"
      COURIER_SMTP_FROM_ADDRESS: "noreply@hash.ai"
      COURIER_SMTP_FROM_NAME: "HASH"
    command: serve --watch-courier

  hash-api:
    build:
      context: ../../
      dockerfile: infra/docker/api/prod/Dockerfile
    depends_on:
      graph:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      FRONTEND_URL: "${FRONTEND_URL}"

      API_ORIGIN: "${API_ORIGIN}"
      HASH_SEED_USERS: "${HASH_SEED_USERS}"

      HASH_GRAPH_API_HOST: "graph"
      HASH_GRAPH_API_PORT: "${HASH_GRAPH_API_PORT}"
      LOG_LEVEL: "${LOG_LEVEL}"

      HASH_REDIS_HOST: "redis"
      HASH_REDIS_PORT: "6379"

      HASH_OPENSEARCH_ENABLED: "false"
      HASH_INTEGRATION_QUEUE_NAME: "${HASH_INTEGRATION_QUEUE_NAME}"

      ORY_KRATOS_PUBLIC_URL: "http://kratos:4433"
      ORY_KRATOS_ADMIN_URL: "http://kratos:4434"
      KRATOS_API_KEY: "${KRATOS_API_KEY}"
    ports:
      - "5001:5001"

  hash-frontend:
    build:
      context: ../../
      dockerfile: infra/docker/frontend/prod/Dockerfile
      args:
        FRONTEND_URL: "${FRONTEND_URL}"
        # At build-time (client-side) we use the public API origin that is
        # outside the docker network.
        API_ORIGIN: "${API_ORIGIN}"
    depends_on:
      hash-api:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      FRONTEND_URL: "${FRONTEND_URL}"
      # At runtime (server-side) we make use of the internal docker-network URL
      # for the API origin so that the server can resolve the backend
      # appropriately. The backend is not on "localhost" from the perspective of
      # this container.
      API_ORIGIN: "http://hash-api:5001"
      ORY_KRATOS_PUBLIC_URL: "http://kratos:4433"

    ports:
      - "3000:3000"
