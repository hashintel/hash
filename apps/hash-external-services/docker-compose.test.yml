services:
  postgres:
    ports:
      - "${POSTGRES_PORT}:5432"

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${AWS_S3_UPLOADS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_S3_UPLOADS_SECRET_ACCESS_KEY}
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - ../../var/uploads/s3:/data

  minio-ensure-bucket-exists:
    image: minio/mc
    depends_on:
      - minio
    security_opt:
      - no-new-privileges:true
    environment:
      MINIO_ROOT_USER: ${AWS_S3_UPLOADS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_S3_UPLOADS_SECRET_ACCESS_KEY}
      AWS_S3_UPLOADS_BUCKET: ${AWS_S3_UPLOADS_BUCKET}
    entrypoint: >
      /bin/sh -c "
      # Wait until MinIO is accessible
      until (mc config host add myminio http://minio:9000 \$MINIO_ROOT_USER \$MINIO_ROOT_PASSWORD) do echo 'Waiting for MinIO...' && sleep 1; done;

      # Add a fixed delay to ensure MinIO server is fully ready
      sleep 5;

      echo 'Creating bucket if not exists...';
      mc mb myminio/\$AWS_S3_UPLOADS_BUCKET --ignore-existing;
      "

  telemetry-collector:
    image: jaegertracing/all-in-one:1.48
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      # Port 14269 is the Jaeger admin endpoint
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:14269 || exit 1",
        ]
      interval: 2s
      timeout: 2s
      retries: 10
    ports:
      - "16686:16686"
      # To expose OTLP collector over gRPC on the host
      - "4317:4317"
      # To expose OTLP collector over HTTP on the host
      # - "4318:4318"
      # serve configs (sampling, etc.)
      - "5778:5778"
      # accept jaeger.thrift over Thrift-compact protocol (used by most SDKs)
      - "6831:6831"
    environment:
      COLLECTOR_OTLP_ENABLED: "true"

  kratos:
    ports:
      - "4433:4433" # public
      - "4434:4434" # admin

  spicedb:
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${HASH_SPICEDB_HTTP_PORT}:${HASH_SPICEDB_HTTP_PORT}"
      - "${HASH_SPICEDB_GRPC_PORT}:${HASH_SPICEDB_GRPC_PORT}"
    command: serve-testing

  redis:
    ports:
      - "6379:6379"
