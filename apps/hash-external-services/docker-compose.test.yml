services:
  postgres:
    ports:
      - "${POSTGRES_PORT}:5432"

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${AWS_S3_UPLOADS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_S3_UPLOADS_SECRET_ACCESS_KEY}
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - ../../var/uploads/s3:/data

  minio-ensure-bucket-exists:
    image: minio/mc
    depends_on:
      - minio
    security_opt:
      - no-new-privileges:true
    environment:
      MINIO_ROOT_USER: ${AWS_S3_UPLOADS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_S3_UPLOADS_SECRET_ACCESS_KEY}
      AWS_S3_UPLOADS_BUCKET: ${AWS_S3_UPLOADS_BUCKET}
    entrypoint: >
      /bin/sh -c "
      # Wait until MinIO is accessible
      until (mc config host add myminio http://minio:9000 \$MINIO_ROOT_USER \$MINIO_ROOT_PASSWORD) do echo 'Waiting for MinIO...' && sleep 1; done;

      # Add a fixed delay to ensure MinIO server is fully ready
      sleep 5;

      echo 'Creating bucket if not exists...';
      mc mb myminio/\$AWS_S3_UPLOADS_BUCKET --ignore-existing;
      "

  kratos:
    ports:
      - "4433:4433" # public
      - "4434:4434" # admin

  spicedb:
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${HASH_SPICEDB_HTTP_PORT}:${HASH_SPICEDB_HTTP_PORT}"
      - "${HASH_SPICEDB_GRPC_PORT}:${HASH_SPICEDB_GRPC_PORT}"
    command: serve-testing

  redis:
    ports:
      - "6379:6379"

  # TODO: Services below this line are developed by HASH and should not be part of this file

  graph-test-server:
    init: true
    depends_on:
      postgres:
        condition: service_healthy
      graph-migrate:
        condition: service_completed_successfully
    image: hash-graph:test
    read_only: true
    security_opt:
      - no-new-privileges:true
    volumes:
      - logs:/logs
    command: test-server
    environment:
      HASH_GRAPH_PG_USER: "${POSTGRES_USER}"
      HASH_GRAPH_PG_PASSWORD: "${POSTGRES_PASSWORD}"
      HASH_GRAPH_PG_HOST: "postgres"
      HASH_GRAPH_PG_PORT: "5432"
      HASH_GRAPH_PG_DATABASE: "${HASH_GRAPH_PG_DATABASE}"
      HASH_GRAPH_LOG_CONSOLE_FORMAT: "${HASH_GRAPH_LOG_CONSOLE_FORMAT:-full}"
      HASH_GRAPH_LOG_FOLDER: "/logs/graph-test-service"
      HASH_GRAPH_API_HOST: "0.0.0.0"
      HASH_GRAPH_API_PORT: "${HASH_GRAPH_TEST_API_PORT}"
      HASH_SPICEDB_HOST: http://spicedb
      HASH_SPICEDB_HTTP_PORT: "${HASH_SPICEDB_HTTP_PORT}"
      RUST_BACKTRACE: 1
    ports:
      - "${HASH_GRAPH_TEST_API_PORT}:${HASH_GRAPH_TEST_API_PORT}"
    healthcheck:
      test:
        [
          "CMD",
          "/hash-graph",
          "test-server",
          "--healthcheck",
          "--api-port",
          "${HASH_GRAPH_TEST_API_PORT}",
        ]
      interval: 2s
      timeout: 2s
      retries: 10

  graph:
    depends_on:
      graph-test-server:
        condition: service_healthy
    ports:
      - "${HASH_GRAPH_API_PORT}:${HASH_GRAPH_API_PORT}"
