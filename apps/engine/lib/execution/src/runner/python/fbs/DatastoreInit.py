# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DatastoreInit(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DatastoreInit()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDatastoreInit(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DatastoreInit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DatastoreInit
    def AgentBatchSchema(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DatastoreInit
    def AgentBatchSchemaAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DatastoreInit
    def AgentBatchSchemaLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DatastoreInit
    def AgentBatchSchemaIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DatastoreInit
    def MessageBatchSchema(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DatastoreInit
    def MessageBatchSchemaAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DatastoreInit
    def MessageBatchSchemaLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DatastoreInit
    def MessageBatchSchemaIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DatastoreInit
    def ContextBatchSchema(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DatastoreInit
    def ContextBatchSchemaAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DatastoreInit
    def ContextBatchSchemaLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DatastoreInit
    def ContextBatchSchemaIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DatastoreInit
    def SharedContext(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from SharedContext import SharedContext
            obj = SharedContext()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Start(builder): builder.StartObject(4)
def DatastoreInitStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddAgentBatchSchema(builder, agentBatchSchema): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(agentBatchSchema), 0)
def DatastoreInitAddAgentBatchSchema(builder, agentBatchSchema):
    """This method is deprecated. Please switch to AddAgentBatchSchema."""
    return AddAgentBatchSchema(builder, agentBatchSchema)
def StartAgentBatchSchemaVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def DatastoreInitStartAgentBatchSchemaVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartAgentBatchSchemaVector(builder, numElems)
def AddMessageBatchSchema(builder, messageBatchSchema): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(messageBatchSchema), 0)
def DatastoreInitAddMessageBatchSchema(builder, messageBatchSchema):
    """This method is deprecated. Please switch to AddMessageBatchSchema."""
    return AddMessageBatchSchema(builder, messageBatchSchema)
def StartMessageBatchSchemaVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def DatastoreInitStartMessageBatchSchemaVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMessageBatchSchemaVector(builder, numElems)
def AddContextBatchSchema(builder, contextBatchSchema): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(contextBatchSchema), 0)
def DatastoreInitAddContextBatchSchema(builder, contextBatchSchema):
    """This method is deprecated. Please switch to AddContextBatchSchema."""
    return AddContextBatchSchema(builder, contextBatchSchema)
def StartContextBatchSchemaVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def DatastoreInitStartContextBatchSchemaVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartContextBatchSchemaVector(builder, numElems)
def AddSharedContext(builder, sharedContext): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sharedContext), 0)
def DatastoreInitAddSharedContext(builder, sharedContext):
    """This method is deprecated. Please switch to AddSharedContext."""
    return AddSharedContext(builder, sharedContext)
def End(builder): return builder.EndObject()
def DatastoreInitEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)