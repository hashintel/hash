#![allow(
    clippy::module_name_repetitions,
    clippy::must_use_candidate,
    clippy::cast_sign_loss,
    clippy::empty_enum,
    clippy::used_underscore_binding,
    clippy::redundant_static_lifetimes,
    clippy::redundant_field_names,
    unused_imports
)]
// automatically generated by the FlatBuffers compiler, do not modify

use std::{cmp::Ordering, mem};

use super::runner_warning_generated::*;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum RunnerWarningsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RunnerWarnings<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RunnerWarnings<'a> {
    type Inner = RunnerWarnings<'a>;

    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf, loc },
        }
    }
}

impl<'a> RunnerWarnings<'a> {
    pub const VT_INNER: flatbuffers::VOffsetT = 4;

    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RunnerWarnings { _tab: table }
    }

    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RunnerWarningsArgs<'args>,
    ) -> flatbuffers::WIPOffset<RunnerWarnings<'bldr>> {
        let mut builder = RunnerWarningsBuilder::new(_fbb);
        if let Some(x) = args.inner {
            builder.add_inner(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn inner(
        &self,
    ) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<RunnerWarning<'a>>> {
        self._tab
            .get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<RunnerWarning>>,
            >>(RunnerWarnings::VT_INNER, None)
            .unwrap()
    }
}

impl flatbuffers::Verifiable for RunnerWarnings<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<RunnerWarning>>,
            >>(&"inner", Self::VT_INNER, true)?
            .finish();
        Ok(())
    }
}
pub struct RunnerWarningsArgs<'a> {
    pub inner: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<RunnerWarning<'a>>>,
        >,
    >,
}
impl<'a> Default for RunnerWarningsArgs<'a> {
    #[inline]
    fn default() -> Self {
        RunnerWarningsArgs {
            inner: None, // required field
        }
    }
}
pub struct RunnerWarningsBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RunnerWarningsBuilder<'a, 'b> {
    #[inline]
    pub fn add_inner(
        &mut self,
        inner: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<RunnerWarning<'b>>>,
        >,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(RunnerWarnings::VT_INNER, inner);
    }

    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RunnerWarningsBuilder<'a, 'b> {
        let start = _fbb.start_table();
        RunnerWarningsBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }

    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<RunnerWarnings<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_.required(o, RunnerWarnings::VT_INNER, "inner");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl std::fmt::Debug for RunnerWarnings<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut ds = f.debug_struct("RunnerWarnings");
        ds.field("inner", &self.inner());
        ds.finish()
    }
}
#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_runner_warnings<'a>(buf: &'a [u8]) -> RunnerWarnings<'a> {
    unsafe { flatbuffers::root_unchecked::<RunnerWarnings<'a>>(buf) }
}

#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_runner_warnings<'a>(buf: &'a [u8]) -> RunnerWarnings<'a> {
    unsafe { flatbuffers::size_prefixed_root_unchecked::<RunnerWarnings<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `RunnerWarnings`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_runner_warnings_unchecked`.
pub fn root_as_runner_warnings(
    buf: &[u8],
) -> Result<RunnerWarnings, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<RunnerWarnings>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RunnerWarnings` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_runner_warnings_unchecked`.
pub fn size_prefixed_root_as_runner_warnings(
    buf: &[u8],
) -> Result<RunnerWarnings, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<RunnerWarnings>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RunnerWarnings` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_runner_warnings_unchecked`.
pub fn root_as_runner_warnings_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<RunnerWarnings<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<RunnerWarnings<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RunnerWarnings` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_runner_warnings_unchecked`.
pub fn size_prefixed_root_as_runner_warnings_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<RunnerWarnings<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<RunnerWarnings<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RunnerWarnings and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RunnerWarnings`.
pub unsafe fn root_as_runner_warnings_unchecked(buf: &[u8]) -> RunnerWarnings {
    flatbuffers::root_unchecked::<RunnerWarnings>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RunnerWarnings
/// and returns it. # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RunnerWarnings`.
pub unsafe fn size_prefixed_root_as_runner_warnings_unchecked(buf: &[u8]) -> RunnerWarnings {
    flatbuffers::size_prefixed_root_unchecked::<RunnerWarnings>(buf)
}
#[inline]
pub fn finish_runner_warnings_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<RunnerWarnings<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_runner_warnings_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<RunnerWarnings<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
