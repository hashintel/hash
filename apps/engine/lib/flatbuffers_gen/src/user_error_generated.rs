#![allow(
    clippy::module_name_repetitions,
    clippy::must_use_candidate,
    clippy::cast_sign_loss,
    clippy::empty_enum,
    clippy::used_underscore_binding,
    clippy::redundant_static_lifetimes,
    clippy::redundant_field_names,
    unused_imports
)]
// automatically generated by the FlatBuffers compiler, do not modify

use std::{cmp::Ordering, mem};

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum UserErrorOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UserError<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UserError<'a> {
    type Inner = UserError<'a>;

    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf, loc },
        }
    }
}

impl<'a> UserError<'a> {
    pub const VT_MSG: flatbuffers::VOffsetT = 4;

    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        UserError { _tab: table }
    }

    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args UserErrorArgs<'args>,
    ) -> flatbuffers::WIPOffset<UserError<'bldr>> {
        let mut builder = UserErrorBuilder::new(_fbb);
        if let Some(x) = args.msg {
            builder.add_msg(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn msg(&self) -> &'a str {
        self._tab
            .get::<flatbuffers::ForwardsUOffset<&str>>(UserError::VT_MSG, None)
            .unwrap()
    }
}

impl flatbuffers::Verifiable for UserError<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"msg", Self::VT_MSG, true)?
            .finish();
        Ok(())
    }
}
pub struct UserErrorArgs<'a> {
    pub msg: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for UserErrorArgs<'a> {
    #[inline]
    fn default() -> Self {
        UserErrorArgs {
            msg: None, // required field
        }
    }
}
pub struct UserErrorBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> UserErrorBuilder<'a, 'b> {
    #[inline]
    pub fn add_msg(&mut self, msg: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(UserError::VT_MSG, msg);
    }

    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> UserErrorBuilder<'a, 'b> {
        let start = _fbb.start_table();
        UserErrorBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }

    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<UserError<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_.required(o, UserError::VT_MSG, "msg");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl std::fmt::Debug for UserError<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut ds = f.debug_struct("UserError");
        ds.field("msg", &self.msg());
        ds.finish()
    }
}
#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_user_error<'a>(buf: &'a [u8]) -> UserError<'a> {
    unsafe { flatbuffers::root_unchecked::<UserError<'a>>(buf) }
}

#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_user_error<'a>(buf: &'a [u8]) -> UserError<'a> {
    unsafe { flatbuffers::size_prefixed_root_unchecked::<UserError<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `UserError`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_user_error_unchecked`.
pub fn root_as_user_error(buf: &[u8]) -> Result<UserError, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<UserError>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `UserError` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_user_error_unchecked`.
pub fn size_prefixed_root_as_user_error(
    buf: &[u8],
) -> Result<UserError, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<UserError>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `UserError` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_user_error_unchecked`.
pub fn root_as_user_error_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<UserError<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<UserError<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `UserError` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_user_error_unchecked`.
pub fn size_prefixed_root_as_user_error_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<UserError<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<UserError<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a UserError and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `UserError`.
pub unsafe fn root_as_user_error_unchecked(buf: &[u8]) -> UserError {
    flatbuffers::root_unchecked::<UserError>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed UserError and
/// returns it. # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `UserError`.
pub unsafe fn size_prefixed_root_as_user_error_unchecked(buf: &[u8]) -> UserError {
    flatbuffers::size_prefixed_root_unchecked::<UserError>(buf)
}
#[inline]
pub fn finish_user_error_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<UserError<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_user_error_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<UserError<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
