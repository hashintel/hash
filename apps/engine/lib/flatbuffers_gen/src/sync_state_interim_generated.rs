#![allow(
    clippy::module_name_repetitions,
    clippy::must_use_candidate,
    clippy::cast_sign_loss,
    clippy::empty_enum,
    clippy::used_underscore_binding,
    clippy::redundant_static_lifetimes,
    clippy::redundant_field_names,
    unused_imports
)]
// automatically generated by the FlatBuffers compiler, do not modify

use std::{cmp::Ordering, mem};

use super::{batch_generated::*, metaversion_generated::*};

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum StateInterimSyncOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StateInterimSync<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StateInterimSync<'a> {
    type Inner = StateInterimSync<'a>;

    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf, loc },
        }
    }
}

impl<'a> StateInterimSync<'a> {
    pub const VT_AGENT_BATCHES: flatbuffers::VOffsetT = 6;
    pub const VT_GROUP_IDX: flatbuffers::VOffsetT = 4;
    pub const VT_MESSAGE_BATCHES: flatbuffers::VOffsetT = 8;

    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        StateInterimSync { _tab: table }
    }

    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args StateInterimSyncArgs<'args>,
    ) -> flatbuffers::WIPOffset<StateInterimSync<'bldr>> {
        let mut builder = StateInterimSyncBuilder::new(_fbb);
        if let Some(x) = args.message_batches {
            builder.add_message_batches(x);
        }
        if let Some(x) = args.agent_batches {
            builder.add_agent_batches(x);
        }
        if let Some(x) = args.group_idx {
            builder.add_group_idx(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn group_idx(&self) -> flatbuffers::Vector<'a, u32> {
        self._tab
            .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                StateInterimSync::VT_GROUP_IDX,
                None,
            )
            .unwrap()
    }

    #[inline]
    pub fn agent_batches(
        &self,
    ) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Batch<'a>>> {
        self._tab
            .get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Batch>>,
            >>(StateInterimSync::VT_AGENT_BATCHES, None)
            .unwrap()
    }

    #[inline]
    pub fn message_batches(
        &self,
    ) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Batch<'a>>> {
        self._tab
            .get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Batch>>,
            >>(StateInterimSync::VT_MESSAGE_BATCHES, None)
            .unwrap()
    }
}

impl flatbuffers::Verifiable for StateInterimSync<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                &"group_idx",
                Self::VT_GROUP_IDX,
                true,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Batch>>,
            >>(&"agent_batches", Self::VT_AGENT_BATCHES, true)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Batch>>,
            >>(&"message_batches", Self::VT_MESSAGE_BATCHES, true)?
            .finish();
        Ok(())
    }
}
pub struct StateInterimSyncArgs<'a> {
    pub group_idx: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub agent_batches: Option<
        flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Batch<'a>>>>,
    >,
    pub message_batches: Option<
        flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Batch<'a>>>>,
    >,
}
impl<'a> Default for StateInterimSyncArgs<'a> {
    #[inline]
    fn default() -> Self {
        StateInterimSyncArgs {
            group_idx: None,       // required field
            agent_batches: None,   // required field
            message_batches: None, // required field
        }
    }
}
pub struct StateInterimSyncBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StateInterimSyncBuilder<'a, 'b> {
    #[inline]
    pub fn add_group_idx(
        &mut self,
        group_idx: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            StateInterimSync::VT_GROUP_IDX,
            group_idx,
        );
    }

    #[inline]
    pub fn add_agent_batches(
        &mut self,
        agent_batches: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Batch<'b>>>,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            StateInterimSync::VT_AGENT_BATCHES,
            agent_batches,
        );
    }

    #[inline]
    pub fn add_message_batches(
        &mut self,
        message_batches: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Batch<'b>>>,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            StateInterimSync::VT_MESSAGE_BATCHES,
            message_batches,
        );
    }

    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> StateInterimSyncBuilder<'a, 'b> {
        let start = _fbb.start_table();
        StateInterimSyncBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }

    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<StateInterimSync<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_
            .required(o, StateInterimSync::VT_GROUP_IDX, "group_idx");
        self.fbb_
            .required(o, StateInterimSync::VT_AGENT_BATCHES, "agent_batches");
        self.fbb_
            .required(o, StateInterimSync::VT_MESSAGE_BATCHES, "message_batches");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl std::fmt::Debug for StateInterimSync<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut ds = f.debug_struct("StateInterimSync");
        ds.field("group_idx", &self.group_idx());
        ds.field("agent_batches", &self.agent_batches());
        ds.field("message_batches", &self.message_batches());
        ds.finish()
    }
}
#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_state_interim_sync<'a>(buf: &'a [u8]) -> StateInterimSync<'a> {
    unsafe { flatbuffers::root_unchecked::<StateInterimSync<'a>>(buf) }
}

#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_state_interim_sync<'a>(buf: &'a [u8]) -> StateInterimSync<'a> {
    unsafe { flatbuffers::size_prefixed_root_unchecked::<StateInterimSync<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `StateInterimSync`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_state_interim_sync_unchecked`.
pub fn root_as_state_interim_sync(
    buf: &[u8],
) -> Result<StateInterimSync, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<StateInterimSync>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `StateInterimSync` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_state_interim_sync_unchecked`.
pub fn size_prefixed_root_as_state_interim_sync(
    buf: &[u8],
) -> Result<StateInterimSync, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<StateInterimSync>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `StateInterimSync` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_state_interim_sync_unchecked`.
pub fn root_as_state_interim_sync_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<StateInterimSync<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<StateInterimSync<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `StateInterimSync` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_state_interim_sync_unchecked`.
pub fn size_prefixed_root_as_state_interim_sync_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<StateInterimSync<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<StateInterimSync<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a StateInterimSync and returns
/// it. # Safety
/// Callers must trust the given bytes do indeed contain a valid `StateInterimSync`.
pub unsafe fn root_as_state_interim_sync_unchecked(buf: &[u8]) -> StateInterimSync {
    flatbuffers::root_unchecked::<StateInterimSync>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed StateInterimSync
/// and returns it. # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `StateInterimSync`.
pub unsafe fn size_prefixed_root_as_state_interim_sync_unchecked(buf: &[u8]) -> StateInterimSync {
    flatbuffers::size_prefixed_root_unchecked::<StateInterimSync>(buf)
}
#[inline]
pub fn finish_state_interim_sync_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<StateInterimSync<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_state_interim_sync_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<StateInterimSync<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
