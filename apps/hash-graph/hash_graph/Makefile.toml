extend = { path = "../Makefile.toml" }

[env]
CARGO_CLIPPY_HACK_FLAGS = "--workspace --feature-powerset --optional-deps clap"

CARGO_TEST_HACK_FLAGS = "--workspace --feature-powerset --optional-deps clap"

CARGO_RUSTDOC_HACK_FLAGS = "--workspace --exclude hash_graph_benches"

RUST_LOG = "debug,hyper=warn"

[env.production]
CARGO_MAKE_CARGO_PROFILE = "production"

[tasks.test]
run_task = [
    { name = ["test-task", "yarn-install-openapi", "deployment-up", "test-integration", "generate-openapi-client", "deployment-down"], condition = { env_true = ["CARGO_MAKE_CI"] } },
    { name = ["test-task"] }
]

[tasks.test-task-doc]
condition = { profiles = ["development"] }

[tasks.miri]
clear = true
command = "echo"
args = ["Miri is disabled as unsafe code is forbidden"]

[tasks.test-integration]
private = false
env_files = ["${REPO_ROOT}/.env"]
env = { HASH_GRAPH_PG_DATABASE = "${HASH_GRAPH_PG_DEV_DATABASE}" }
extend = "cargo"
args = ["nextest", "run", "--cargo-profile", "${CARGO_MAKE_CARGO_PROFILE}", "@@split(CARGO_TEST_FLAGS, )", "--workspace", "--test", "integration", "--profile", "integration", "${@}"]
dependencies = ["install-cargo-nextest"]

[tasks.coverage]
run_task = [
    { name = ["deployment-up", "coverage-task", "coverage-integration", "deployment-down", "coverage-report"], condition = { env_true = ["CARGO_MAKE_CI"] } },
    { name = ["coverage-task", "coverage-integration", "coverage-report"] },
]

[tasks.coverage-task]
env_files = ["${REPO_ROOT}/.env"]
env = { HASH_GRAPH_PG_DATABASE = "${HASH_GRAPH_PG_DEV_DATABASE}" }
args = ["llvm-cov", "--no-report", "test", "--workspace", "--all-features", "--all-targets"]

[tasks.coverage-integration]
extend = "coverage-task"
args = ["llvm-cov", "--no-report", "nextest", "--workspace", "--all-features", "--test", "integration"]

[tasks.coverage-report]
extend = "coverage-task"
args = ["llvm-cov", "report", "${@}"]

# If this step fails, the OpenAPI spec is invalid.
# When running in CI, a non-empty git diff will fail the pipeline.
[tasks.generate-openapi-client]
env_files = ["${REPO_ROOT}/.env"]
env = { HASH_GRAPH_PG_DATABASE = "${HASH_GRAPH_PG_DEV_DATABASE}" }
script = """
#!/usr/bin/env bash

# Fail entire script if any error occurs.
set -eo pipefail

cargo build
cargo run -- server &
pid=$!
# Ensure the webserver process is killed regardless of script outcome.
trap "kill $pid" 0 ERR

yarn workspace @hashintel/hash-graph-client-generator generate

# This switches the current working directory to the location of the generated client.
# `.` thus refers to the root of the client directory.
yarn workspace @hashintel/hash-graph-client prettier --write .
# The generator isn't idempotent, unfortunately. The interface members are not in a strict order.
# ESlint enforces ordering, which enables us to rely on the output diff as a CI check.
yarn workspace @hashintel/hash-graph-client fix:eslint
"""
