{
  "openapi": "3.0.3",
  "info": {
    "title": "graph",
    "description": "HASH Graph API",
    "contact": {
      "name": "HASH"
    },
    "license": {
      "name": "AGPL-3"
    },
    "version": "0.0.0"
  },
  "paths": {
    "/account_groups": {
      "post": {
        "tags": [
          "Graph",
          "Account Group"
        ],
        "operationId": "create_account_group",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsertAccountGroupIdParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The schema of the created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroupId"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/account_groups/{account_group_id}/members/{account_id}": {
      "post": {
        "tags": [
          "Graph",
          "Account Group"
        ],
        "operationId": "add_account_group_member",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "account_group_id",
            "in": "path",
            "description": "The ID of the account group to add the member to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupId"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The ID of the account to add to the group",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The account group member was added"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "delete": {
        "tags": [
          "Graph",
          "Account Group"
        ],
        "operationId": "remove_account_group_member",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "account_group_id",
            "in": "path",
            "description": "The ID of the account group to remove the member from",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupId"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The ID of the account to remove from the group",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The account group member was removed"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/account_groups/{account_group_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "Account Group"
        ],
        "operationId": "check_account_group_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "account_group_id",
            "in": "path",
            "description": "The ID of the account group to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupId"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupPermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor can add an owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "tags": [
          "Graph",
          "Account"
        ],
        "operationId": "create_account",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsertAccountIdParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The schema of the created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountId"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types": {
      "post": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "create_data_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaybeListOfDataTypeMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to create data type in the store as the base data type URL already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "put": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "update_data_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The cursor to start reading from",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of data types to read",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataTypeMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Base data type ID was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/archive": {
      "put": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "archive_data_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveDataTypeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Data type ID was not found"
          },
          "409": {
            "description": "Data type ID is already archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/embeddings": {
      "post": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "update_data_type_embeddings",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeEmbeddingParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The embeddings were created"
          },
          "403": {
            "description": "Insufficient permissions to update the data type"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/load": {
      "post": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "load_external_data_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadExternalDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the loaded data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataTypeMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to load data type in the store as the base data type ID already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/query": {
      "post": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "get_data_types",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDataTypesParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets a a list of data types that satisfy the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataTypesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/query/subgraph": {
      "post": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "get_data_type_subgraph",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDataTypeSubgraphParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets a subgraph rooted at all data types that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataTypeSubgraphResponse"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/relationships": {
      "post": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "modify_data_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModifyDataTypeAuthorizationRelationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The relationship was modified for the data"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/data-types/unarchive": {
      "put": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "unarchive_data_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnarchiveDataTypeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The temporal metadata of the updated data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Data type ID was not found"
          },
          "409": {
            "description": "Data type ID already exists and is not archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/{data_type_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "check_data_type_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "data_type_id",
            "in": "path",
            "description": "The data type ID to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DataTypePermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor has the permission for the data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/data-types/{data_type_id}/relationships": {
      "get": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "get_data_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "data_type_id",
            "in": "path",
            "description": "The Data type to read the relations for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relations of the data type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataTypeRelationAndSubject"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entities": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "create_entity",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                }
              }
            }
          },
          "404": {
            "description": "Entity Type URL was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "patch": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "patch_entity",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchEntityParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                }
              }
            }
          },
          "404": {
            "description": "Entity ID or Entity Type URL was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "423": {
            "description": "The entity that should be updated was unexpectedly updated at the same time"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/bulk": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "create_entities",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateEntityRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The created entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entity"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity Type URL was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/diff": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "diff_entity",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiffEntityParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The difference between the two entities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiffEntityResult"
                }
              }
            }
          },
          "404": {
            "description": "Entity ID was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/embeddings": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "update_entity_embeddings",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityEmbeddingsParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The embeddings were created"
          },
          "403": {
            "description": "Insufficient permissions to update the entity"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/query": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "get_entities",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The cursor to start reading from",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entities to read",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEntitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of entities that satisfy the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEntitiesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/query/count": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "count_entities",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CountEntitiesParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/query/subgraph": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "get_entity_subgraph",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The cursor to start reading from",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entities to read",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEntitySubgraphRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subgraph rooted at entities that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEntitySubgraphResponse"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/relationships": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "modify_entity_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModifyEntityAuthorizationRelationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The relationship was modified for the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entities/validate": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "validate_entity",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateEntityParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The validation passed"
          },
          "400": {
            "description": "The entity validation failed"
          },
          "404": {
            "description": "Entity Type URL was not found"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/{entity_id}/administrators/{administrator}": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "add_entity_administrator",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The Entity to add the administrator to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "administrator",
            "in": "path",
            "description": "The administrator to add to the entity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedById"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The administrator was added to the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      },
      "delete": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "remove_entity_administrator",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The Entity to remove the administrator from",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "administrator",
            "in": "path",
            "description": "The administrator to remove from the entity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedById"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The administrator was removed from the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entities/{entity_id}/editors/{editor}": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "add_entity_editor",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The Entity to add the editor to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "editor",
            "in": "path",
            "description": "The editor to add to the entity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedById"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The editor was added to the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      },
      "delete": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "remove_entity_editor",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The Entity to remove the editor from",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "editor",
            "in": "path",
            "description": "The editor to remove from the entity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedById"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The editor was removed from the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entities/{entity_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "check_entity_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The entity ID to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityPermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor has the permission for the entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/entities/{entity_id}/relationships": {
      "get": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "get_entity_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The Entity to read the relations for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relations of the entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityRelationAndSubject"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entity-types": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "create_entity_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaybeListOfEntityTypeMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Provided request body is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          },
          "409": {
            "description": "Unable to create entity type in the datastore as the base entity type ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "update_entity_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The cursor to start reading from",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entity types to read",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityTypeMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Base entity type ID was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/archive": {
      "put": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "archive_entity_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveEntityTypeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Entity type ID was not found"
          },
          "409": {
            "description": "Entity type ID is already archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/embeddings": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "update_entity_type_embeddings",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityTypeEmbeddingParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The embeddings were created"
          },
          "403": {
            "description": "Insufficient permissions to update the entity type"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/load": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "load_external_entity_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadExternalEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityTypeMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Provided request body is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          },
          "409": {
            "description": "Unable to load entity type in the datastore as the entity type ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          }
        }
      }
    },
    "/entity-types/multi": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "get_closed_multi_entity_types",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetClosedMultiEntityTypeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets a list of multi-entity types that satisfy the given query. A multi-entity type is the combination of multiple entity types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetClosedMultiEntityTypeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/query": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "get_entity_types",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEntityTypesParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets a a list of entity types that satisfy the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEntityTypesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/query/subgraph": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "get_entity_type_subgraph",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEntityTypeSubgraphParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subgraph rooted at entity types that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEntityTypeSubgraphResponse"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/relationships": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "modify_entity_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModifyEntityTypeAuthorizationRelationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The relationship was modified for the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entity-types/unarchive": {
      "put": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "unarchive_entity_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnarchiveEntityTypeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The temporal metadata of the updated entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Entity type ID was not found"
          },
          "409": {
            "description": "Entity type ID already exists and is not archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/{entity_type_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "check_entity_type_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_type_id",
            "in": "path",
            "description": "The entity type ID to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityTypePermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor has the permission for the entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/entity-types/{entity_type_id}/relationships": {
      "get": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "get_entity_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_type_id",
            "in": "path",
            "description": "The Entity type to read the relations for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relations of the entity type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTypeRelationAndSubject"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/property-types": {
      "post": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "create_property_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaybeListOfPropertyTypeMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to create property type in the store as the base property type ID already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "put": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "update_property_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "The cursor to start reading from",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of property types to read",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyTypeMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Base property type ID was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/archive": {
      "put": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "archive_property_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivePropertyTypeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Property type ID was not found"
          },
          "409": {
            "description": "Property type ID is already archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/embeddings": {
      "post": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "update_property_type_embeddings",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyTypeEmbeddingParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The embeddings were created"
          },
          "403": {
            "description": "Insufficient permissions to update the property type"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/load": {
      "post": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "load_external_property_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadExternalPropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the loaded property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyTypeMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to load property type in the store as the base property type ID already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/query": {
      "post": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "get_property_types",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPropertyTypesParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets a a list of property types that satisfy the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyTypesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/query/subgraph": {
      "post": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "get_property_type_subgraph",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPropertyTypeSubgraphParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subgraph rooted at property types that satisfy the given query, each resolved to the requested depth.",
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "The link to be used to query the next page of property types"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyTypeSubgraphResponse"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/relationships": {
      "post": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "modify_property_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModifyPropertyTypeAuthorizationRelationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The relationship was modified for the property"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/property-types/unarchive": {
      "put": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "unarchive_property_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnarchivePropertyTypeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The temporal metadata of the updated property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Property type ID was not found"
          },
          "409": {
            "description": "Property type ID already exists and is not archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/{property_type_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "check_property_type_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "property_type_id",
            "in": "path",
            "description": "The property type ID to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PropertyTypePermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor has the permission for the property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/property-types/{property_type_id}/relationships": {
      "get": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "get_property_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "property_type_id",
            "in": "path",
            "description": "The Property type to read the relations for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relations of the property type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyTypeRelationAndSubject"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/webs": {
      "post": {
        "tags": [
          "Graph",
          "Web"
        ],
        "operationId": "create_web",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsertWebIdParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The web was created successfully"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/webs/relationships": {
      "post": {
        "tags": [
          "Graph",
          "Web"
        ],
        "operationId": "modify_web_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModifyWebAuthorizationRelationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The relationship was modified for the web"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/webs/{web_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "Web"
        ],
        "operationId": "check_web_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "web_id",
            "in": "path",
            "description": "The web ID to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/WebPermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor has the permission for the web",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/webs/{web_id}/relationships": {
      "get": {
        "tags": [
          "Graph",
          "Web"
        ],
        "operationId": "get_web_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "web_id",
            "in": "path",
            "description": "The web to read the relations for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedById"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relations of the web",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebRelationAndSubject"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountGroupId": {
        "type": "string",
        "format": "uuid"
      },
      "AccountGroupPermission": {
        "type": "string",
        "enum": [
          "add_member",
          "remove_member"
        ]
      },
      "AccountId": {
        "type": "string",
        "format": "uuid"
      },
      "ActorType": {
        "type": "string",
        "enum": [
          "human",
          "ai",
          "machine"
        ]
      },
      "ArchiveDataTypeParams": {
        "type": "object",
        "required": [
          "dataTypeId"
        ],
        "properties": {
          "dataTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        },
        "additionalProperties": false
      },
      "ArchiveEntityTypeParams": {
        "type": "object",
        "required": [
          "entityTypeId"
        ],
        "properties": {
          "entityTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        },
        "additionalProperties": false
      },
      "ArchivePropertyTypeParams": {
        "type": "object",
        "required": [
          "propertyTypeId"
        ],
        "properties": {
          "propertyTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        },
        "additionalProperties": false
      },
      "ArrayMetadata": {
        "type": "object",
        "properties": {
          "confidence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Confidence"
              }
            ]
          },
          "provenance": {
            "$ref": "#/components/schemas/PropertyProvenance"
          }
        },
        "additionalProperties": false
      },
      "BaseUrl": {
        "type": "string",
        "format": "uri"
      },
      "ClosedTemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "InclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "inclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "Confidence": {
        "type": "number",
        "format": "double",
        "maximum": 1,
        "minimum": 0
      },
      "ConversionDefinition": {
        "type": "object",
        "required": [
          "expression"
        ],
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/ConversionExpression"
          }
        },
        "additionalProperties": false
      },
      "ConversionExpression": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Operator"
            },
            {
              "$ref": "#/components/schemas/ConversionValue"
            }
          ]
        },
        "maxItems": 3,
        "minItems": 3
      },
      "ConversionValue": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Variable"
          },
          {
            "type": "object",
            "required": [
              "const",
              "type"
            ],
            "properties": {
              "const": {
                "type": "number",
                "format": "double"
              },
              "type": {
                "type": "string",
                "enum": [
                  "number"
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/ConversionExpression"
          }
        ]
      },
      "Conversions": {
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "$ref": "#/components/schemas/ConversionDefinition"
          },
          "to": {
            "$ref": "#/components/schemas/ConversionDefinition"
          }
        },
        "additionalProperties": false
      },
      "CountEntitiesParams": {
        "type": "object",
        "required": [
          "filter",
          "temporalAxes",
          "includeDrafts"
        ],
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "includeDrafts": {
            "type": "boolean"
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        },
        "additionalProperties": false
      },
      "CreateDataTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "ownedById",
          "relationships",
          "conversions"
        ],
        "properties": {
          "conversions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Conversions"
            }
          },
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataTypeRelationAndSubject"
            }
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "./models/data_type.json"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "./models/data_type.json"
                }
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CreateEntityRequest": {
        "type": "object",
        "required": [
          "ownedById",
          "entityTypeIds",
          "properties",
          "draft",
          "relationships"
        ],
        "properties": {
          "confidence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Confidence"
              }
            ]
          },
          "decisionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "draft": {
            "type": "boolean"
          },
          "entityTypeIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          },
          "entityUuid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityUuid"
              }
            ]
          },
          "linkData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkData"
              }
            ]
          },
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "properties": {
            "$ref": "#/components/schemas/PropertyWithMetadataObject"
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvidedEntityEditionProvenance"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityRelationAndSubject"
            }
          }
        },
        "additionalProperties": false
      },
      "CreateEntityTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "ownedById",
          "relationships"
        ],
        "properties": {
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityTypeRelationAndSubject"
            }
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "./models/entity_type.json"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "./models/entity_type.json"
                }
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CreatePropertyTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "ownedById",
          "relationships"
        ],
        "properties": {
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyTypeRelationAndSubject"
            }
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "./models/property_type.json"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "./models/property_type.json"
                }
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CreatedById": {
        "type": "string",
        "format": "uuid"
      },
      "DataTypeMetadata": {
        "oneOf": [
          {
            "type": "object",
            "title": "OwnedDataTypeMetadata",
            "required": [
              "recordId",
              "ownedById",
              "temporalVersioning",
              "provenance"
            ],
            "properties": {
              "conversions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Conversions"
                }
              },
              "ownedById": {
                "$ref": "#/components/schemas/OwnedById"
              },
              "provenance": {
                "$ref": "#/components/schemas/OntologyProvenance"
              },
              "recordId": {
                "$ref": "#/components/schemas/OntologyTypeRecordId"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          },
          {
            "type": "object",
            "title": "ExternalDataTypeMetadata",
            "required": [
              "recordId",
              "fetchedAt",
              "temporalVersioning",
              "provenance"
            ],
            "properties": {
              "conversions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Conversions"
                }
              },
              "fetchedAt": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "provenance": {
                "$ref": "#/components/schemas/OntologyProvenance"
              },
              "recordId": {
                "$ref": "#/components/schemas/OntologyTypeRecordId"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          }
        ]
      },
      "DataTypeOwnerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "web"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/OwnedById"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "DataTypePermission": {
        "type": "string",
        "enum": [
          "update",
          "view"
        ]
      },
      "DataTypeQueryToken": {
        "type": "string",
        "description": "A single token in a [`DataTypeQueryPath`].",
        "enum": [
          "baseUrl",
          "version",
          "versionedUrl",
          "ownedById",
          "title",
          "description",
          "type",
          "inheritsFrom",
          "children",
          "editionProvenance",
          "embedding"
        ]
      },
      "DataTypeRelationAndSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "owner"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/DataTypeOwnerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "viewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/DataTypeViewerSubject"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "relation"
        }
      },
      "DataTypeVertexId": {
        "type": "object",
        "required": [
          "baseId",
          "revisionId"
        ],
        "properties": {
          "baseId": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "revisionId": {
            "$ref": "#/components/schemas/OntologyTypeVersion"
          }
        }
      },
      "DataTypeViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          }
        ]
      },
      "DataTypeWithMetadata": {
        "type": "object",
        "required": [
          "schema",
          "metadata"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/DataTypeMetadata"
          },
          "schema": {
            "$ref": "./models/data_type.json"
          }
        }
      },
      "DecisionTime": {
        "type": "string",
        "description": "Time axis for the decision time.\n\nThis is used as the generic argument to time-related structs and can be used as tag value.",
        "enum": [
          "decisionTime"
        ]
      },
      "DiffEntityParams": {
        "type": "object",
        "required": [
          "firstEntityId",
          "firstDecisionTime",
          "firstTransactionTime",
          "secondEntityId",
          "secondDecisionTime",
          "secondTransactionTime"
        ],
        "properties": {
          "firstDecisionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ],
            "nullable": true
          },
          "firstEntityId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "firstTransactionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ],
            "nullable": true
          },
          "secondDecisionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ],
            "nullable": true
          },
          "secondEntityId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "secondTransactionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DiffEntityResult": {
        "type": "object",
        "properties": {
          "draftState": {
            "type": "boolean"
          },
          "entityTypeIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityTypeIdDiff"
            }
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDiff"
            }
          }
        },
        "additionalProperties": false
      },
      "EdgeResolveDepths": {
        "type": "object",
        "required": [
          "incoming",
          "outgoing"
        ],
        "properties": {
          "incoming": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "outgoing": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "Edges": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OntologyOutwardEdge"
                },
                {
                  "$ref": "#/components/schemas/KnowledgeGraphOutwardEdge"
                }
              ]
            }
          }
        }
      },
      "EditionArchivedById": {
        "type": "string",
        "format": "uuid"
      },
      "EditionCreatedById": {
        "type": "string",
        "format": "uuid"
      },
      "Embedding": {
        "type": "array",
        "items": {
          "type": "number",
          "format": "float"
        }
      },
      "Entity": {
        "type": "object",
        "description": "A record of an [`Entity`] that has been persisted in the datastore, with its associated\nmetadata.",
        "required": [
          "properties",
          "metadata"
        ],
        "properties": {
          "linkData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkData"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/EntityMetadata"
          },
          "properties": {
            "$ref": "#/components/schemas/PropertyObject"
          }
        }
      },
      "EntityAdministratorSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "subjectSet",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              },
              "subjectSet": {
                "$ref": "#/components/schemas/EntitySubjectSet"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityEditionId": {
        "type": "string",
        "format": "uuid"
      },
      "EntityEditionProvenance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProvidedEntityEditionProvenance"
          },
          {
            "type": "object",
            "required": [
              "createdById"
            ],
            "properties": {
              "archivedById": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditionArchivedById"
                  }
                ]
              },
              "createdById": {
                "$ref": "#/components/schemas/EditionCreatedById"
              }
            }
          }
        ]
      },
      "EntityEditorSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "subjectSet",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              },
              "subjectSet": {
                "$ref": "#/components/schemas/EntitySubjectSet"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityEmbedding": {
        "type": "object",
        "required": [
          "embedding"
        ],
        "properties": {
          "embedding": {
            "$ref": "#/components/schemas/Embedding"
          },
          "property": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseUrl"
              }
            ],
            "nullable": true
          }
        }
      },
      "EntityId": {
        "type": "string"
      },
      "EntityIdWithInterval": {
        "type": "object",
        "required": [
          "entityId",
          "interval"
        ],
        "properties": {
          "entityId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "interval": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          }
        }
      },
      "EntityMetadata": {
        "type": "object",
        "description": "The metadata of an [`Entity`] record.",
        "required": [
          "recordId",
          "temporalVersioning",
          "entityTypeIds",
          "archived",
          "provenance"
        ],
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "confidence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Confidence"
              }
            ]
          },
          "entityTypeIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/PropertyMetadataObject"
          },
          "provenance": {
            "$ref": "#/components/schemas/EntityProvenance"
          },
          "recordId": {
            "$ref": "#/components/schemas/EntityRecordId"
          },
          "temporalVersioning": {
            "$ref": "#/components/schemas/EntityTemporalMetadata"
          }
        },
        "additionalProperties": false
      },
      "EntityOwnerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "web"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/OwnedById"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityPermission": {
        "type": "string",
        "enum": [
          "full_access",
          "update",
          "view"
        ]
      },
      "EntityProvenance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InferredEntityProvenance"
          },
          {
            "type": "object",
            "required": [
              "edition"
            ],
            "properties": {
              "edition": {
                "$ref": "#/components/schemas/EntityEditionProvenance"
              }
            }
          }
        ]
      },
      "EntityQueryCursor": {
        "type": "array",
        "items": {
          "type": "object"
        }
      },
      "EntityQuerySortingPath": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/EntityQuerySortingToken"
            },
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ]
        }
      },
      "EntityQuerySortingRecord": {
        "type": "object",
        "required": [
          "path",
          "ordering",
          "nulls"
        ],
        "properties": {
          "nulls": {
            "$ref": "#/components/schemas/NullOrdering"
          },
          "ordering": {
            "$ref": "#/components/schemas/Ordering"
          },
          "path": {
            "$ref": "#/components/schemas/EntityQuerySortingPath"
          }
        }
      },
      "EntityQuerySortingToken": {
        "type": "string",
        "enum": [
          "uuid",
          "archived",
          "properties",
          "label",
          "recordCreatedAtTransactionTime",
          "recordCreatedAtDecisionTime",
          "createdAtTransactionTime",
          "createdAtDecisionTime",
          "typeTitle"
        ]
      },
      "EntityQueryToken": {
        "type": "string",
        "description": "A single token in an [`EntityQueryPath`].",
        "enum": [
          "uuid",
          "editionId",
          "draftId",
          "archived",
          "ownedById",
          "type",
          "properties",
          "label",
          "provenance",
          "editionProvenance",
          "embedding",
          "incomingLinks",
          "outgoingLinks",
          "leftEntity",
          "rightEntity"
        ]
      },
      "EntityRecordId": {
        "type": "object",
        "required": [
          "entityId",
          "editionId"
        ],
        "properties": {
          "editionId": {
            "$ref": "#/components/schemas/EntityEditionId"
          },
          "entityId": {
            "$ref": "#/components/schemas/EntityId"
          }
        }
      },
      "EntityRelationAndSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "setting"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntitySettingSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "owner"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityOwnerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "administrator"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityAdministratorSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "editor"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityEditorSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "viewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityViewerSubject"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "relation"
        }
      },
      "EntitySetting": {
        "type": "string",
        "enum": [
          "administratorFromWeb",
          "updateFromWeb",
          "viewFromWeb"
        ]
      },
      "EntitySettingSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "setting"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/EntitySetting"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntitySubjectSet": {
        "type": "string",
        "enum": [
          "administrator",
          "member"
        ]
      },
      "EntityTemporalMetadata": {
        "type": "object",
        "required": [
          "decisionTime",
          "transactionTime"
        ],
        "properties": {
          "decisionTime": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          },
          "transactionTime": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          }
        },
        "additionalProperties": false
      },
      "EntityTypeEditorSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityTypeEmbedding": {
        "type": "object",
        "required": [
          "entityTypeId",
          "embedding"
        ],
        "properties": {
          "embedding": {
            "$ref": "#/components/schemas/Embedding"
          },
          "entityTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        }
      },
      "EntityTypeIdDiff": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "added",
              "op"
            ],
            "properties": {
              "added": {
                "$ref": "#/components/schemas/VersionedUrl"
              },
              "op": {
                "type": "string",
                "enum": [
                  "added"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "removed",
              "op"
            ],
            "properties": {
              "op": {
                "type": "string",
                "enum": [
                  "removed"
                ]
              },
              "removed": {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "op"
        }
      },
      "EntityTypeInstantiatorSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityTypeMetadata": {
        "oneOf": [
          {
            "type": "object",
            "title": "OwnedEntityTypeMetadata",
            "required": [
              "recordId",
              "ownedById",
              "temporalVersioning",
              "provenance"
            ],
            "properties": {
              "ownedById": {
                "$ref": "#/components/schemas/OwnedById"
              },
              "provenance": {
                "$ref": "#/components/schemas/OntologyProvenance"
              },
              "recordId": {
                "$ref": "#/components/schemas/OntologyTypeRecordId"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          },
          {
            "type": "object",
            "title": "ExternalEntityTypeMetadata",
            "required": [
              "recordId",
              "fetchedAt",
              "temporalVersioning",
              "provenance"
            ],
            "properties": {
              "fetchedAt": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "provenance": {
                "$ref": "#/components/schemas/OntologyProvenance"
              },
              "recordId": {
                "$ref": "#/components/schemas/OntologyTypeRecordId"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          }
        ]
      },
      "EntityTypeOwnerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "web"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/OwnedById"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityTypePermission": {
        "type": "string",
        "enum": [
          "update",
          "view",
          "instantiate"
        ]
      },
      "EntityTypeQueryToken": {
        "type": "string",
        "description": "A single token in a [`EntityTypeQueryPath`].",
        "enum": [
          "baseUrl",
          "version",
          "versionedUrl",
          "ownedById",
          "title",
          "description",
          "properties",
          "required",
          "labelProperty",
          "icon",
          "editionProvenance",
          "links",
          "inheritsFrom",
          "children",
          "embedding"
        ]
      },
      "EntityTypeRelationAndSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "owner"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityTypeOwnerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "setting"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityTypeSettingSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "editor"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityTypeEditorSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "viewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityTypeViewerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "instantiator"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityTypeInstantiatorSubject"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "relation"
        }
      },
      "EntityTypeSetting": {
        "type": "string",
        "enum": [
          "updateFromWeb"
        ]
      },
      "EntityTypeSettingSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "setting"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/EntityTypeSetting"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityTypeVertexId": {
        "type": "object",
        "required": [
          "baseId",
          "revisionId"
        ],
        "properties": {
          "baseId": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "revisionId": {
            "$ref": "#/components/schemas/OntologyTypeVersion"
          }
        }
      },
      "EntityTypeViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          }
        ]
      },
      "EntityTypeWithMetadata": {
        "type": "object",
        "required": [
          "schema",
          "metadata"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/EntityTypeMetadata"
          },
          "schema": {
            "$ref": "./models/entity_type.json"
          }
        }
      },
      "EntityUuid": {
        "type": "string",
        "format": "uuid"
      },
      "EntityValidationType": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/VersionedUrl"
        }
      },
      "EntityVertexId": {
        "type": "object",
        "required": [
          "baseId",
          "revisionId"
        ],
        "properties": {
          "baseId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "revisionId": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "EntityViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "subjectSet",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              },
              "subjectSet": {
                "$ref": "#/components/schemas/EntitySubjectSet"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "Filter": {
        "oneOf": [
          {
            "type": "object",
            "title": "AllFilter",
            "required": [
              "all"
            ],
            "properties": {
              "all": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "AnyFilter",
            "required": [
              "any"
            ],
            "properties": {
              "any": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "NotFilter",
            "required": [
              "not"
            ],
            "properties": {
              "not": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          {
            "type": "object",
            "title": "EqualFilter",
            "required": [
              "equal"
            ],
            "properties": {
              "equal": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "NotEqualFilter",
            "required": [
              "notEqual"
            ],
            "properties": {
              "notEqual": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "GreaterFilter",
            "required": [
              "notEqual"
            ],
            "properties": {
              "greater": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "GreaterOrEqualFilter",
            "required": [
              "notEqual"
            ],
            "properties": {
              "greaterOrEqual": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "LessFilter",
            "required": [
              "notEqual"
            ],
            "properties": {
              "less": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "LessOrEqualFilter",
            "required": [
              "notEqual"
            ],
            "properties": {
              "lessOrEqual": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "CosineDistanceFilter",
            "required": [
              "cosineDistance"
            ],
            "properties": {
              "cosineDistance": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 3,
                "minItems": 3
              }
            }
          },
          {
            "type": "object",
            "title": "StartsWithFilter",
            "required": [
              "startsWith"
            ],
            "properties": {
              "startsWith": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "EndsWithFilter",
            "required": [
              "endsWith"
            ],
            "properties": {
              "endsWith": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "ContainsSegmentFilter",
            "required": [
              "containsSegment"
            ],
            "properties": {
              "containsSegment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          }
        ]
      },
      "FilterExpression": {
        "oneOf": [
          {
            "type": "object",
            "title": "PathExpression",
            "required": [
              "path"
            ],
            "properties": {
              "path": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DataTypeQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/PropertyTypeQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/EntityTypeQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/EntityQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/Selector"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "title": "ParameterExpression",
            "required": [
              "parameter"
            ],
            "properties": {
              "convert": {
                "type": "object",
                "required": [
                  "from",
                  "to"
                ],
                "properties": {
                  "from": {
                    "$ref": "#/components/schemas/VersionedUrl"
                  },
                  "to": {
                    "$ref": "#/components/schemas/VersionedUrl"
                  }
                }
              },
              "parameter": {}
            }
          }
        ]
      },
      "GetClosedMultiEntityTypeParams": {
        "type": "object",
        "required": [
          "entityTypeIds",
          "temporalAxes",
          "includeDrafts"
        ],
        "properties": {
          "entityTypeIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          },
          "includeDrafts": {
            "type": "boolean"
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        },
        "additionalProperties": false
      },
      "GetClosedMultiEntityTypeResponse": {
        "type": "object",
        "required": [
          "entityType"
        ],
        "properties": {
          "entityType": {
            "$ref": "./models/closed_multi_entity_type.json"
          }
        }
      },
      "GetDataTypeSubgraphParams": {
        "type": "object",
        "required": [
          "filter",
          "graphResolveDepths",
          "temporalAxes",
          "includeDrafts"
        ],
        "properties": {
          "after": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "includeCount": {
            "type": "boolean"
          },
          "includeDrafts": {
            "type": "boolean"
          },
          "limit": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        },
        "additionalProperties": false
      },
      "GetDataTypeSubgraphResponse": {
        "type": "object",
        "required": [
          "subgraph"
        ],
        "properties": {
          "cursor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "subgraph": {
            "$ref": "#/components/schemas/Subgraph"
          }
        }
      },
      "GetDataTypesParams": {
        "type": "object",
        "required": [
          "filter",
          "temporalAxes",
          "includeDrafts"
        ],
        "properties": {
          "after": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "includeCount": {
            "type": "boolean"
          },
          "includeDrafts": {
            "type": "boolean"
          },
          "limit": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        },
        "additionalProperties": false
      },
      "GetDataTypesResponse": {
        "type": "object",
        "required": [
          "dataTypes"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "cursor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "dataTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataTypeWithMetadata"
            }
          }
        }
      },
      "GetEntitiesRequest": {
        "type": "object",
        "required": [
          "filter",
          "temporalAxes",
          "includeDrafts"
        ],
        "properties": {
          "conversions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryConversion"
            }
          },
          "cursor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityQueryCursor"
              }
            ],
            "nullable": true
          },
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "includeCount": {
            "type": "boolean"
          },
          "includeCreatedByIds": {
            "type": "boolean"
          },
          "includeDrafts": {
            "type": "boolean"
          },
          "includeEditionCreatedByIds": {
            "type": "boolean"
          },
          "includeTypeIds": {
            "type": "boolean"
          },
          "includeWebIds": {
            "type": "boolean"
          },
          "limit": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "sortingPaths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityQuerySortingRecord"
            },
            "nullable": true
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        },
        "additionalProperties": false
      },
      "GetEntitiesResponse": {
        "type": "object",
        "required": [
          "entities"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "createdByIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          },
          "cursor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityQueryCursor"
              }
            ],
            "nullable": true
          },
          "editionCreatedByIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entity"
            }
          },
          "typeIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          },
          "webIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      },
      "GetEntitySubgraphRequest": {
        "type": "object",
        "required": [
          "filter",
          "graphResolveDepths",
          "temporalAxes",
          "includeDrafts"
        ],
        "properties": {
          "conversions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryConversion"
            }
          },
          "cursor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityQueryCursor"
              }
            ],
            "nullable": true
          },
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "includeCount": {
            "type": "boolean"
          },
          "includeCreatedByIds": {
            "type": "boolean"
          },
          "includeDrafts": {
            "type": "boolean"
          },
          "includeEditionCreatedByIds": {
            "type": "boolean"
          },
          "includeTypeIds": {
            "type": "boolean"
          },
          "includeWebIds": {
            "type": "boolean"
          },
          "limit": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "sortingPaths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityQuerySortingRecord"
            },
            "nullable": true
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        },
        "additionalProperties": false
      },
      "GetEntitySubgraphResponse": {
        "type": "object",
        "required": [
          "subgraph"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "createdByIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          },
          "cursor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityQueryCursor"
              }
            ],
            "nullable": true
          },
          "editionCreatedByIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          },
          "subgraph": {
            "$ref": "#/components/schemas/Subgraph"
          },
          "typeIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          },
          "webIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      },
      "GetEntityTypeSubgraphParams": {
        "type": "object",
        "required": [
          "filter",
          "graphResolveDepths",
          "temporalAxes",
          "includeDrafts"
        ],
        "properties": {
          "after": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "includeCount": {
            "type": "boolean"
          },
          "includeDrafts": {
            "type": "boolean"
          },
          "includeEditionCreatedByIds": {
            "type": "boolean"
          },
          "includeWebIds": {
            "type": "boolean"
          },
          "limit": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        },
        "additionalProperties": false
      },
      "GetEntityTypeSubgraphResponse": {
        "type": "object",
        "required": [
          "subgraph"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "cursor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "editionCreatedByIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          },
          "subgraph": {
            "$ref": "#/components/schemas/Subgraph"
          },
          "webIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      },
      "GetEntityTypesParams": {
        "type": "object",
        "required": [
          "filter",
          "temporalAxes",
          "includeDrafts"
        ],
        "properties": {
          "after": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "includeClosed": {
            "type": "boolean"
          },
          "includeCount": {
            "type": "boolean"
          },
          "includeDrafts": {
            "type": "boolean"
          },
          "includeEditionCreatedByIds": {
            "type": "boolean"
          },
          "includeWebIds": {
            "type": "boolean"
          },
          "limit": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        },
        "additionalProperties": false
      },
      "GetEntityTypesResponse": {
        "type": "object",
        "required": [
          "entityTypes"
        ],
        "properties": {
          "closedEntityTypes": {
            "type": "array",
            "items": {
              "$ref": "./models/closed_entity_type.json"
            }
          },
          "count": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "cursor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "editionCreatedByIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          },
          "entityTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityTypeWithMetadata"
            }
          },
          "webIds": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      },
      "GetPropertyTypeSubgraphParams": {
        "type": "object",
        "required": [
          "filter",
          "graphResolveDepths",
          "temporalAxes",
          "includeDrafts"
        ],
        "properties": {
          "after": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "includeCount": {
            "type": "boolean"
          },
          "includeDrafts": {
            "type": "boolean"
          },
          "limit": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        },
        "additionalProperties": false
      },
      "GetPropertyTypeSubgraphResponse": {
        "type": "object",
        "required": [
          "subgraph"
        ],
        "properties": {
          "cursor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "subgraph": {
            "$ref": "#/components/schemas/Subgraph"
          }
        }
      },
      "GetPropertyTypesParams": {
        "type": "object",
        "required": [
          "filter",
          "temporalAxes",
          "includeDrafts"
        ],
        "properties": {
          "after": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "includeCount": {
            "type": "boolean"
          },
          "includeDrafts": {
            "type": "boolean"
          },
          "limit": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        },
        "additionalProperties": false
      },
      "GetPropertyTypesResponse": {
        "type": "object",
        "required": [
          "propertyTypes"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "cursor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "propertyTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyTypeWithMetadata"
            }
          }
        }
      },
      "GraphElementVertexId": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DataTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/PropertyTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/EntityTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/EntityVertexId"
          }
        ]
      },
      "GraphResolveDepths": {
        "type": "object",
        "required": [
          "inheritsFrom",
          "constrainsValuesOn",
          "constrainsPropertiesOn",
          "constrainsLinksOn",
          "constrainsLinkDestinationsOn",
          "isOfType",
          "hasLeftEntity",
          "hasRightEntity"
        ],
        "properties": {
          "constrainsLinkDestinationsOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "constrainsLinksOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "constrainsPropertiesOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "constrainsValuesOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "hasLeftEntity": {
            "$ref": "#/components/schemas/EdgeResolveDepths"
          },
          "hasRightEntity": {
            "$ref": "#/components/schemas/EdgeResolveDepths"
          },
          "inheritsFrom": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "isOfType": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          }
        },
        "additionalProperties": false
      },
      "InferredEntityProvenance": {
        "type": "object",
        "required": [
          "createdById",
          "createdAtTransactionTime",
          "createdAtDecisionTime"
        ],
        "properties": {
          "createdAtDecisionTime": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "createdAtTransactionTime": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "createdById": {
            "$ref": "#/components/schemas/CreatedById"
          },
          "firstNonDraftCreatedAtDecisionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "firstNonDraftCreatedAtTransactionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "InsertAccountGroupIdParams": {
        "type": "object",
        "properties": {
          "accountGroupId": {
            "$ref": "#/components/schemas/AccountGroupId"
          }
        },
        "additionalProperties": false
      },
      "InsertAccountIdParams": {
        "type": "object",
        "properties": {
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          }
        },
        "additionalProperties": false
      },
      "InsertWebIdParams": {
        "type": "object",
        "required": [
          "ownedById",
          "owner"
        ],
        "properties": {
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "owner": {
            "$ref": "#/components/schemas/WebOwnerSubject"
          }
        },
        "additionalProperties": false
      },
      "KnowledgeGraphEdgeKind": {
        "type": "string",
        "enum": [
          "HAS_LEFT_ENTITY",
          "HAS_RIGHT_ENTITY"
        ]
      },
      "KnowledgeGraphOutwardEdge": {
        "oneOf": [
          {
            "type": "object",
            "title": "KnowledgeGraphToKnowledgeGraphOutwardEdge",
            "required": [
              "kind",
              "reversed",
              "rightEndpoint"
            ],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/KnowledgeGraphEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/EntityIdWithInterval"
              }
            }
          },
          {
            "type": "object",
            "title": "KnowledgeGraphToOntologyOutwardEdge",
            "required": [
              "kind",
              "reversed",
              "rightEndpoint"
            ],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/SharedEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/OntologyTypeVertexId"
              }
            }
          }
        ]
      },
      "KnowledgeGraphVertex": {
        "oneOf": [
          {
            "type": "object",
            "title": "EntityVertex",
            "required": [
              "kind",
              "inner"
            ],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/Entity"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "entity"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "KnowledgeGraphVertices": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/KnowledgeGraphVertex"
          }
        }
      },
      "LeftClosedTemporalInterval": {
        "type": "object",
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "end": {
            "$ref": "#/components/schemas/OpenTemporalBound"
          },
          "start": {
            "$ref": "#/components/schemas/ClosedTemporalBound"
          }
        }
      },
      "LimitedTemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "InclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "inclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          },
          {
            "type": "object",
            "title": "ExclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "exclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "LinkData": {
        "type": "object",
        "description": "The associated information for 'Link' entities",
        "required": [
          "leftEntityId",
          "rightEntityId"
        ],
        "properties": {
          "leftEntityConfidence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Confidence"
              }
            ]
          },
          "leftEntityId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "leftEntityProvenance": {
            "$ref": "#/components/schemas/PropertyProvenance"
          },
          "rightEntityConfidence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Confidence"
              }
            ]
          },
          "rightEntityId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "rightEntityProvenance": {
            "$ref": "#/components/schemas/PropertyProvenance"
          }
        },
        "additionalProperties": false
      },
      "LoadExternalDataTypeRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "dataTypeId"
            ],
            "properties": {
              "dataTypeId": {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "schema",
              "relationships",
              "conversions"
            ],
            "properties": {
              "conversions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Conversions"
                }
              },
              "provenance": {
                "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
              },
              "relationships": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataTypeRelationAndSubject"
                }
              },
              "schema": {
                "$ref": "./models/data_type.json"
              }
            }
          }
        ]
      },
      "LoadExternalEntityTypeRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "entityTypeId"
            ],
            "properties": {
              "entityTypeId": {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "schema",
              "relationships"
            ],
            "properties": {
              "provenance": {
                "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
              },
              "relationships": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityTypeRelationAndSubject"
                }
              },
              "schema": {
                "$ref": "./models/entity_type.json"
              }
            }
          }
        ]
      },
      "LoadExternalPropertyTypeRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "propertyTypeId"
            ],
            "properties": {
              "propertyTypeId": {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "schema",
              "relationships"
            ],
            "properties": {
              "provenance": {
                "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
              },
              "relationships": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertyTypeRelationAndSubject"
                }
              },
              "schema": {
                "$ref": "./models/property_type.json"
              }
            }
          }
        ]
      },
      "Location": {
        "type": "object",
        "description": "A location where the source material can be found.",
        "properties": {
          "description": {
            "type": "string",
            "description": "Encapsulates a message intended to be read by the end user."
          },
          "name": {
            "type": "string",
            "description": "A string containing the name of the location."
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "description": "A string containing a valid relative or absolute URI."
          }
        },
        "additionalProperties": false
      },
      "MaybeListOfDataTypeMetadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DataTypeMetadata"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataTypeMetadata"
            }
          }
        ]
      },
      "MaybeListOfEntityTypeMetadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EntityTypeMetadata"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityTypeMetadata"
            }
          }
        ]
      },
      "MaybeListOfPropertyTypeMetadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PropertyTypeMetadata"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyTypeMetadata"
            }
          }
        ]
      },
      "ModifyDataTypeAuthorizationRelationship": {
        "type": "object",
        "required": [
          "operation",
          "resource",
          "relationAndSubject"
        ],
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ModifyRelationshipOperation"
          },
          "relationAndSubject": {
            "$ref": "#/components/schemas/DataTypeRelationAndSubject"
          },
          "resource": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        }
      },
      "ModifyEntityAuthorizationRelationship": {
        "type": "object",
        "required": [
          "operation",
          "resource",
          "relationSubject"
        ],
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ModifyRelationshipOperation"
          },
          "relationSubject": {
            "$ref": "#/components/schemas/EntityRelationAndSubject"
          },
          "resource": {
            "$ref": "#/components/schemas/EntityId"
          }
        }
      },
      "ModifyEntityTypeAuthorizationRelationship": {
        "type": "object",
        "required": [
          "operation",
          "resource",
          "relationAndSubject"
        ],
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ModifyRelationshipOperation"
          },
          "relationAndSubject": {
            "$ref": "#/components/schemas/EntityTypeRelationAndSubject"
          },
          "resource": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        }
      },
      "ModifyPropertyTypeAuthorizationRelationship": {
        "type": "object",
        "required": [
          "operation",
          "resource",
          "relationAndSubject"
        ],
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ModifyRelationshipOperation"
          },
          "relationAndSubject": {
            "$ref": "#/components/schemas/PropertyTypeRelationAndSubject"
          },
          "resource": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        }
      },
      "ModifyRelationshipOperation": {
        "type": "string",
        "description": "Used for mutating a single relationship within the service.",
        "enum": [
          "touch",
          "create",
          "delete"
        ]
      },
      "ModifyWebAuthorizationRelationship": {
        "type": "object",
        "required": [
          "operation",
          "resource",
          "relationAndSubject"
        ],
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ModifyRelationshipOperation"
          },
          "relationAndSubject": {
            "$ref": "#/components/schemas/WebRelationAndSubject"
          },
          "resource": {
            "$ref": "#/components/schemas/OwnedById"
          }
        }
      },
      "NullOrdering": {
        "type": "string",
        "enum": [
          "first",
          "last"
        ]
      },
      "NullableTimestamp": {
        "type": "string",
        "format": "date-time",
        "nullable": true
      },
      "ObjectMetadata": {
        "type": "object",
        "properties": {
          "confidence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Confidence"
              }
            ]
          },
          "provenance": {
            "$ref": "#/components/schemas/PropertyProvenance"
          }
        },
        "additionalProperties": false
      },
      "OntologyEdgeKind": {
        "type": "string",
        "enum": [
          "INHERITS_FROM",
          "CONSTRAINS_VALUES_ON",
          "CONSTRAINS_PROPERTIES_ON",
          "CONSTRAINS_LINKS_ON",
          "CONSTRAINS_LINK_DESTINATIONS_ON"
        ]
      },
      "OntologyEditionProvenance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
          },
          {
            "type": "object",
            "required": [
              "createdById"
            ],
            "properties": {
              "archivedById": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditionArchivedById"
                  }
                ]
              },
              "createdById": {
                "$ref": "#/components/schemas/EditionCreatedById"
              }
            }
          }
        ]
      },
      "OntologyOutwardEdge": {
        "oneOf": [
          {
            "type": "object",
            "title": "OntologyToOntologyOutwardEdge",
            "required": [
              "kind",
              "reversed",
              "rightEndpoint"
            ],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/OntologyEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/OntologyTypeVertexId"
              }
            }
          },
          {
            "type": "object",
            "title": "OntologyToKnowledgeGraphOutwardEdge",
            "required": [
              "kind",
              "reversed",
              "rightEndpoint"
            ],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/SharedEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/EntityIdWithInterval"
              }
            }
          }
        ]
      },
      "OntologyProvenance": {
        "type": "object",
        "required": [
          "edition"
        ],
        "properties": {
          "edition": {
            "$ref": "#/components/schemas/OntologyEditionProvenance"
          }
        },
        "additionalProperties": false
      },
      "OntologyTemporalMetadata": {
        "type": "object",
        "required": [
          "transactionTime"
        ],
        "properties": {
          "transactionTime": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          }
        },
        "additionalProperties": false
      },
      "OntologyTypeRecordId": {
        "type": "object",
        "required": [
          "baseUrl",
          "version"
        ],
        "properties": {
          "baseUrl": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "OntologyTypeVersion": {
        "type": "integer",
        "format": "int32",
        "minimum": 0
      },
      "OntologyTypeVertexId": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DataTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/PropertyTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/EntityTypeVertexId"
          }
        ]
      },
      "OntologyVertex": {
        "oneOf": [
          {
            "type": "object",
            "title": "DataTypeVertex",
            "required": [
              "kind",
              "inner"
            ],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/DataTypeWithMetadata"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "dataType"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "PropertyTypeVertex",
            "required": [
              "kind",
              "inner"
            ],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/PropertyTypeWithMetadata"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "propertyType"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "EntityTypeVertex",
            "required": [
              "kind",
              "inner"
            ],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/EntityTypeWithMetadata"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "entityType"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "OntologyVertices": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/OntologyVertex"
          }
        }
      },
      "OpenTemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "ExclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "exclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          },
          {
            "type": "object",
            "title": "UnboundedBound",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "unbounded"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "Operator": {
        "type": "string",
        "enum": [
          "+",
          "-",
          "*",
          "/"
        ]
      },
      "Ordering": {
        "type": "string",
        "enum": [
          "ascending",
          "descending"
        ]
      },
      "OriginProvenance": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "apiKeyPublicId": {
                "type": "string"
              },
              "deviceId": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "semanticVersion": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "web-app"
                ]
              },
              "userAgent": {
                "type": "string"
              },
              "version": {
                "type": "string",
                "description": "The origin version, in whatever format the origin natively\nprovides."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "apiKeyPublicId": {
                "type": "string"
              },
              "deviceId": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "semanticVersion": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "mobile-app"
                ]
              },
              "userAgent": {
                "type": "string"
              },
              "version": {
                "type": "string",
                "description": "The origin version, in whatever format the origin natively\nprovides."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "apiKeyPublicId": {
                "type": "string"
              },
              "deviceId": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "semanticVersion": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "browser-extension"
                ]
              },
              "userAgent": {
                "type": "string"
              },
              "version": {
                "type": "string",
                "description": "The origin version, in whatever format the origin natively\nprovides."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "apiKeyPublicId": {
                "type": "string"
              },
              "deviceId": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "semanticVersion": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "api"
                ]
              },
              "userAgent": {
                "type": "string"
              },
              "version": {
                "type": "string",
                "description": "The origin version, in whatever format the origin natively\nprovides."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "apiKeyPublicId": {
                "type": "string"
              },
              "deviceId": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "semanticVersion": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "stepIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "flow"
                ]
              },
              "userAgent": {
                "type": "string"
              },
              "version": {
                "type": "string",
                "description": "The origin version, in whatever format the origin natively\nprovides."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "apiKeyPublicId": {
                "type": "string"
              },
              "deviceId": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "semanticVersion": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "migration"
                ]
              },
              "userAgent": {
                "type": "string"
              },
              "version": {
                "type": "string",
                "description": "The origin version, in whatever format the origin natively\nprovides."
              }
            }
          }
        ]
      },
      "OutgoingEdgeResolveDepth": {
        "type": "object",
        "required": [
          "outgoing"
        ],
        "properties": {
          "outgoing": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "OwnedById": {
        "type": "string",
        "format": "uuid"
      },
      "PatchEntityParams": {
        "type": "object",
        "required": [
          "entityId"
        ],
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "confidence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Confidence"
              }
            ]
          },
          "decisionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "draft": {
            "type": "boolean"
          },
          "entityId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "entityTypeIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyPatchOperation"
            }
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvidedEntityEditionProvenance"
          }
        },
        "additionalProperties": false
      },
      "PermissionResponse": {
        "type": "object",
        "required": [
          "has_permission"
        ],
        "properties": {
          "has_permission": {
            "type": "boolean"
          }
        }
      },
      "Property": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          {
            "$ref": "#/components/schemas/PropertyObject"
          },
          {}
        ]
      },
      "PropertyDiff": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "path",
              "added",
              "op"
            ],
            "properties": {
              "added": {
                "$ref": "#/components/schemas/Property"
              },
              "op": {
                "type": "string",
                "enum": [
                  "added"
                ]
              },
              "path": {
                "$ref": "#/components/schemas/PropertyPath"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "path",
              "removed",
              "op"
            ],
            "properties": {
              "op": {
                "type": "string",
                "enum": [
                  "removed"
                ]
              },
              "path": {
                "$ref": "#/components/schemas/PropertyPath"
              },
              "removed": {
                "$ref": "#/components/schemas/Property"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "path",
              "old",
              "new",
              "op"
            ],
            "properties": {
              "new": {
                "$ref": "#/components/schemas/Property"
              },
              "old": {
                "$ref": "#/components/schemas/Property"
              },
              "op": {
                "type": "string",
                "enum": [
                  "changed"
                ]
              },
              "path": {
                "$ref": "#/components/schemas/PropertyPath"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "op"
        }
      },
      "PropertyMetadata": {
        "oneOf": [
          {
            "type": "object",
            "title": "PropertyMetadataArray",
            "properties": {
              "metadata": {
                "$ref": "#/components/schemas/ArrayMetadata"
              },
              "value": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertyMetadata"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "PropertyMetadataObject",
            "properties": {
              "metadata": {
                "$ref": "#/components/schemas/ObjectMetadata"
              },
              "value": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PropertyMetadata"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "PropertyMetadataValue",
            "required": [
              "metadata"
            ],
            "properties": {
              "metadata": {
                "$ref": "#/components/schemas/ValueMetadata"
              }
            }
          }
        ]
      },
      "PropertyMetadataObject": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ObjectMetadata"
          },
          "value": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PropertyMetadata"
            }
          }
        },
        "additionalProperties": false
      },
      "PropertyObject": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Property"
        }
      },
      "PropertyPatchOperation": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "path",
              "property",
              "op"
            ],
            "properties": {
              "op": {
                "type": "string",
                "enum": [
                  "add"
                ]
              },
              "path": {
                "$ref": "#/components/schemas/PropertyPath"
              },
              "property": {
                "$ref": "#/components/schemas/PropertyWithMetadata"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "path",
              "op"
            ],
            "properties": {
              "op": {
                "type": "string",
                "enum": [
                  "remove"
                ]
              },
              "path": {
                "$ref": "#/components/schemas/PropertyPath"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "path",
              "property",
              "op"
            ],
            "properties": {
              "op": {
                "type": "string",
                "enum": [
                  "replace"
                ]
              },
              "path": {
                "$ref": "#/components/schemas/PropertyPath"
              },
              "property": {
                "$ref": "#/components/schemas/PropertyWithMetadata"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "op"
        }
      },
      "PropertyPath": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PropertyPathElement"
        }
      },
      "PropertyPathElement": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BaseUrl"
          },
          {
            "type": "integer",
            "minimum": 0
          }
        ]
      },
      "PropertyProvenance": {
        "type": "object",
        "properties": {
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceProvenance"
            }
          }
        },
        "additionalProperties": false
      },
      "PropertyTypeEditorSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "PropertyTypeEmbedding": {
        "type": "object",
        "required": [
          "propertyTypeId",
          "embedding"
        ],
        "properties": {
          "embedding": {
            "$ref": "#/components/schemas/Embedding"
          },
          "propertyTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        }
      },
      "PropertyTypeMetadata": {
        "oneOf": [
          {
            "type": "object",
            "title": "OwnedPropertyTypeMetadata",
            "required": [
              "recordId",
              "ownedById",
              "temporalVersioning",
              "provenance"
            ],
            "properties": {
              "ownedById": {
                "$ref": "#/components/schemas/OwnedById"
              },
              "provenance": {
                "$ref": "#/components/schemas/OntologyProvenance"
              },
              "recordId": {
                "$ref": "#/components/schemas/OntologyTypeRecordId"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          },
          {
            "type": "object",
            "title": "ExternalPropertyTypeMetadata",
            "required": [
              "recordId",
              "fetchedAt",
              "temporalVersioning",
              "provenance"
            ],
            "properties": {
              "fetchedAt": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "provenance": {
                "$ref": "#/components/schemas/OntologyProvenance"
              },
              "recordId": {
                "$ref": "#/components/schemas/OntologyTypeRecordId"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          }
        ]
      },
      "PropertyTypeOwnerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "web"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/OwnedById"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "PropertyTypePermission": {
        "type": "string",
        "enum": [
          "update",
          "view"
        ]
      },
      "PropertyTypeQueryToken": {
        "type": "string",
        "description": "A single token in a [`DataTypeQueryPath`].",
        "enum": [
          "baseUrl",
          "version",
          "versionedUrl",
          "ownedById",
          "title",
          "description",
          "editionProvenance",
          "dataTypes",
          "propertyTypes",
          "embedding"
        ]
      },
      "PropertyTypeRelationAndSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "owner"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/PropertyTypeOwnerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "setting"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/PropertyTypeSettingSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "editor"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/PropertyTypeEditorSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "viewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/PropertyTypeViewerSubject"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "relation"
        }
      },
      "PropertyTypeSetting": {
        "type": "string",
        "enum": [
          "updateFromWeb"
        ]
      },
      "PropertyTypeSettingSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "setting"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/PropertyTypeSetting"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "PropertyTypeVertexId": {
        "type": "object",
        "required": [
          "baseId",
          "revisionId"
        ],
        "properties": {
          "baseId": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "revisionId": {
            "$ref": "#/components/schemas/OntologyTypeVersion"
          }
        }
      },
      "PropertyTypeViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          }
        ]
      },
      "PropertyTypeWithMetadata": {
        "type": "object",
        "required": [
          "schema",
          "metadata"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PropertyTypeMetadata"
          },
          "schema": {
            "$ref": "./models/property_type.json"
          }
        }
      },
      "PropertyWithMetadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PropertyWithMetadataArray"
          },
          {
            "$ref": "#/components/schemas/PropertyWithMetadataObject"
          },
          {
            "$ref": "#/components/schemas/PropertyWithMetadataValue"
          }
        ]
      },
      "PropertyWithMetadataArray": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ArrayMetadata"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyWithMetadata"
            }
          }
        },
        "additionalProperties": false
      },
      "PropertyWithMetadataObject": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ObjectMetadata"
          },
          "value": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PropertyWithMetadata"
            }
          }
        },
        "additionalProperties": false
      },
      "PropertyWithMetadataValue": {
        "type": "object",
        "required": [
          "value",
          "metadata"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ValueMetadata"
          },
          "value": {}
        },
        "additionalProperties": false
      },
      "ProvidedEntityEditionProvenance": {
        "type": "object",
        "properties": {
          "actorType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActorType"
              }
            ]
          },
          "origin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OriginProvenance"
              }
            ]
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceProvenance"
            }
          }
        },
        "additionalProperties": false
      },
      "ProvidedOntologyEditionProvenance": {
        "type": "object",
        "properties": {
          "actorType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActorType"
              }
            ]
          },
          "origin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OriginProvenance"
              }
            ]
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceProvenance"
            }
          }
        },
        "additionalProperties": false
      },
      "QueryConversion": {
        "type": "object",
        "required": [
          "path",
          "dataTypeId"
        ],
        "properties": {
          "dataTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          },
          "path": {
            "$ref": "#/components/schemas/PropertyPath"
          }
        },
        "additionalProperties": false
      },
      "QueryTemporalAxes": {
        "oneOf": [
          {
            "type": "object",
            "title": "QueryTemporalAxesDecisionTime",
            "required": [
              "pinned",
              "variable"
            ],
            "properties": {
              "pinned": {
                "type": "object",
                "title": "PinnedTransactionAxis",
                "required": [
                  "axis",
                  "timestamp"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "variable": {
                "type": "object",
                "title": "VariableDecisionAxis",
                "required": [
                  "axis",
                  "interval"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/RightBoundedTemporalInterval"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "title": "QueryTemporalAxesTransactionTime",
            "required": [
              "pinned",
              "variable"
            ],
            "properties": {
              "pinned": {
                "type": "object",
                "title": "PinnedDecisionAxis",
                "required": [
                  "axis",
                  "timestamp"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "variable": {
                "type": "object",
                "title": "VariableTransactionAxis",
                "required": [
                  "axis",
                  "interval"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/RightBoundedTemporalInterval"
                  }
                }
              }
            }
          }
        ],
        "description": "Defines the two possible combinations of pinned/variable temporal axes that are used in\nresponses to queries that return [`Subgraph`]s.\n\nWhen querying the Graph, temporal data is returned. The Graph is implemented as a bitemporal\ndata store, which means the knowledge data contains information about the time of when the\nknowledge was inserted into the Graph, the [`TransactionTime`], and when the knowledge was\ndecided to be inserted, the [`DecisionTime`].\n\nIn order to query data from the Graph, only one of the two time axes can be used. This is\nachieved by using a `TemporalAxes`. The `TemporalAxes` pins one axis to a specified\n[`Timestamp`], while the other axis can be a [`Interval`]. The pinned axis is called the\n[`PinnedTemporalAxis`] and the other axis is called the [`VariableTemporalAxis`]. The returned\ndata will then only contain temporal data that is contained in the [`Interval`] of the\n[`VariableTemporalAxis`] for the given [`Timestamp`] of the [`PinnedTemporalAxis`].\n\n[`Subgraph`]: crate::subgraph::Subgraph\n[`Interval`]: temporal_versioning::Interval"
      },
      "QueryTemporalAxesUnresolved": {
        "oneOf": [
          {
            "type": "object",
            "title": "QueryTemporalAxesUnresolvedDecisionTime",
            "required": [
              "pinned",
              "variable"
            ],
            "properties": {
              "pinned": {
                "type": "object",
                "title": "UnresolvedPinnedTransactionAxis",
                "required": [
                  "axis",
                  "timestamp"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "timestamp": {
                    "$ref": "#/components/schemas/NullableTimestamp"
                  }
                }
              },
              "variable": {
                "type": "object",
                "title": "UnresolvedVariableDecisionAxis",
                "required": [
                  "axis",
                  "interval"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/UnresolvedRightBoundedTemporalInterval"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "title": "QueryTemporalAxesUnresolvedTransactionTime",
            "required": [
              "pinned",
              "variable"
            ],
            "properties": {
              "pinned": {
                "type": "object",
                "title": "UnresolvedPinnedDecisionAxis",
                "required": [
                  "axis",
                  "timestamp"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "timestamp": {
                    "$ref": "#/components/schemas/NullableTimestamp"
                  }
                }
              },
              "variable": {
                "type": "object",
                "title": "UnresolvedVariableTransactionAxis",
                "required": [
                  "axis",
                  "interval"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/UnresolvedRightBoundedTemporalInterval"
                  }
                }
              }
            }
          }
        ],
        "description": "Defines the two possible combinations of pinned/variable temporal axes that are used in queries\nthat return [`Subgraph`]s.\n\nThe [`VariableTemporalAxisUnresolved`] is optionally bounded, in the absence of provided\nbounds an inclusive bound at the timestamp at point of resolving is assumed.\n\n[`Subgraph`]: crate::subgraph::Subgraph"
      },
      "RightBoundedTemporalInterval": {
        "type": "object",
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "end": {
            "$ref": "#/components/schemas/LimitedTemporalBound"
          },
          "start": {
            "$ref": "#/components/schemas/TemporalBound"
          }
        }
      },
      "Selector": {
        "type": "string",
        "enum": [
          "*"
        ]
      },
      "SharedEdgeKind": {
        "type": "string",
        "enum": [
          "IS_OF_TYPE"
        ]
      },
      "SourceProvenance": {
        "type": "object",
        "description": "The source material used in producing a value.",
        "required": [
          "type"
        ],
        "properties": {
          "authors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The people or organizations that authored the material."
          },
          "entityId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityId"
              }
            ]
          },
          "firstPublished": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "lastUpdated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "loadedAt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Location"
              }
            ]
          },
          "type": {
            "$ref": "#/components/schemas/SourceType"
          }
        },
        "additionalProperties": false
      },
      "SourceType": {
        "type": "string",
        "description": "The type of source material which was used to produce a value.",
        "enum": [
          "webpage",
          "document"
        ]
      },
      "Subgraph": {
        "type": "object",
        "required": [
          "roots",
          "vertices",
          "edges",
          "depths",
          "temporalAxes"
        ],
        "properties": {
          "depths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "edges": {
            "$ref": "#/components/schemas/Edges"
          },
          "roots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GraphElementVertexId"
            }
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/SubgraphTemporalAxes"
          },
          "vertices": {
            "$ref": "#/components/schemas/Vertices"
          }
        }
      },
      "SubgraphTemporalAxes": {
        "type": "object",
        "required": [
          "initial",
          "resolved"
        ],
        "properties": {
          "initial": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          },
          "resolved": {
            "$ref": "#/components/schemas/QueryTemporalAxes"
          }
        }
      },
      "TemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "UnboundedBound",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "unbounded"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "InclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "inclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          },
          {
            "type": "object",
            "title": "ExclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "exclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "TransactionTime": {
        "type": "string",
        "description": "Time axis for the transaction time.\n\nThis is used as the generic argument to time-related structs and can be used as tag value.",
        "enum": [
          "transactionTime"
        ]
      },
      "UnarchiveDataTypeParams": {
        "type": "object",
        "required": [
          "dataTypeId"
        ],
        "properties": {
          "dataTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
          }
        },
        "additionalProperties": false
      },
      "UnarchiveEntityTypeParams": {
        "type": "object",
        "required": [
          "entityTypeId"
        ],
        "properties": {
          "entityTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
          }
        },
        "additionalProperties": false
      },
      "UnarchivePropertyTypeParams": {
        "type": "object",
        "required": [
          "propertyTypeId"
        ],
        "properties": {
          "propertyTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
          }
        },
        "additionalProperties": false
      },
      "UnresolvedRightBoundedTemporalInterval": {
        "type": "object",
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "end": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LimitedTemporalBound"
              }
            ],
            "nullable": true
          },
          "start": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TemporalBound"
              }
            ],
            "nullable": true
          }
        }
      },
      "UpdateDataTypeEmbeddingParams": {
        "type": "object",
        "required": [
          "dataTypeId",
          "embedding",
          "updatedAtTransactionTime",
          "reset"
        ],
        "properties": {
          "dataTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          },
          "embedding": {
            "$ref": "#/components/schemas/Embedding"
          },
          "reset": {
            "type": "boolean"
          },
          "updatedAtTransactionTime": {
            "$ref": "#/components/schemas/Timestamp"
          }
        },
        "additionalProperties": false
      },
      "UpdateDataTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "typeToUpdate",
          "relationships",
          "conversions"
        ],
        "properties": {
          "conversions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Conversions"
            }
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataTypeRelationAndSubject"
            }
          },
          "schema": {
            "$ref": "./models/update_data_type.json"
          },
          "typeToUpdate": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        },
        "additionalProperties": false
      },
      "UpdateEntityEmbeddingsParams": {
        "type": "object",
        "required": [
          "entityId",
          "embeddings",
          "updatedAtTransactionTime",
          "updatedAtDecisionTime",
          "reset"
        ],
        "properties": {
          "embeddings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityEmbedding"
            }
          },
          "entityId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "reset": {
            "type": "boolean"
          },
          "updatedAtDecisionTime": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "updatedAtTransactionTime": {
            "$ref": "#/components/schemas/Timestamp"
          }
        },
        "additionalProperties": false
      },
      "UpdateEntityTypeEmbeddingParams": {
        "type": "object",
        "required": [
          "entityTypeId",
          "embedding",
          "updatedAtTransactionTime",
          "reset"
        ],
        "properties": {
          "embedding": {
            "$ref": "#/components/schemas/Embedding"
          },
          "entityTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          },
          "reset": {
            "type": "boolean"
          },
          "updatedAtTransactionTime": {
            "$ref": "#/components/schemas/Timestamp"
          }
        },
        "additionalProperties": false
      },
      "UpdateEntityTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "typeToUpdate",
          "relationships"
        ],
        "properties": {
          "provenance": {
            "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityTypeRelationAndSubject"
            }
          },
          "schema": {
            "$ref": "./models/update_entity_type.json"
          },
          "typeToUpdate": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        },
        "additionalProperties": false
      },
      "UpdatePropertyTypeEmbeddingParams": {
        "type": "object",
        "required": [
          "propertyTypeId",
          "embedding",
          "updatedAtTransactionTime",
          "reset"
        ],
        "properties": {
          "embedding": {
            "$ref": "#/components/schemas/Embedding"
          },
          "propertyTypeId": {
            "$ref": "#/components/schemas/VersionedUrl"
          },
          "reset": {
            "type": "boolean"
          },
          "updatedAtTransactionTime": {
            "$ref": "#/components/schemas/Timestamp"
          }
        },
        "additionalProperties": false
      },
      "UpdatePropertyTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "typeToUpdate",
          "relationships"
        ],
        "properties": {
          "provenance": {
            "$ref": "#/components/schemas/ProvidedOntologyEditionProvenance"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyTypeRelationAndSubject"
            }
          },
          "schema": {
            "$ref": "./models/update_property_type.json"
          },
          "typeToUpdate": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        },
        "additionalProperties": false
      },
      "ValidateEntityComponents": {
        "type": "object",
        "properties": {
          "linkData": {
            "type": "boolean"
          },
          "numItems": {
            "type": "boolean"
          },
          "requiredProperties": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ValidateEntityParams": {
        "type": "object",
        "required": [
          "entityTypes",
          "properties"
        ],
        "properties": {
          "components": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidateEntityComponents"
              }
            ]
          },
          "entityTypes": {
            "$ref": "#/components/schemas/EntityValidationType"
          },
          "linkData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkData"
              }
            ]
          },
          "properties": {
            "$ref": "#/components/schemas/PropertyWithMetadataObject"
          }
        },
        "additionalProperties": false
      },
      "ValueMetadata": {
        "type": "object",
        "required": [
          "dataTypeId"
        ],
        "properties": {
          "canonical": {
            "type": "object",
            "additionalProperties": {}
          },
          "confidence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Confidence"
              }
            ]
          },
          "dataTypeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ],
            "nullable": true
          },
          "originalDataTypeId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionedUrl"
              }
            ]
          },
          "provenance": {
            "$ref": "#/components/schemas/PropertyProvenance"
          }
        },
        "additionalProperties": false
      },
      "Variable": {
        "type": "string",
        "enum": [
          "self"
        ]
      },
      "VersionedUrl": {
        "type": "string",
        "format": "uri"
      },
      "Vertex": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/OntologyVertex"
          },
          {
            "$ref": "#/components/schemas/KnowledgeGraphVertex"
          }
        ]
      },
      "Vertices": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/KnowledgeGraphVertex"
              },
              {
                "$ref": "#/components/schemas/OntologyVertex"
              }
            ]
          }
        }
      },
      "WebDataTypeViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          }
        ]
      },
      "WebEntityCreatorSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "WebEntityEditorSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "WebEntityTypeViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          }
        ]
      },
      "WebEntityViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "WebOwnerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "WebPermission": {
        "type": "string",
        "enum": [
          "change_permission",
          "create_entity",
          "update_entity",
          "view_entity",
          "create_entity_type",
          "create_property_type",
          "create_data_type"
        ]
      },
      "WebPropertyTypeViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          }
        ]
      },
      "WebRelationAndSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "owner"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/WebOwnerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "entityCreator"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/WebEntityCreatorSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "entityEditor"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/WebEntityEditorSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "entityViewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/WebEntityViewerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "entityTypeViewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/WebEntityTypeViewerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "propertyTypeViewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/WebPropertyTypeViewerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subject",
              "relation"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "dataTypeViewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/WebDataTypeViewerSubject"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "relation"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Graph",
      "description": "HASH Graph API"
    },
    {
      "name": "Account",
      "description": "Account management API"
    },
    {
      "name": "DataType",
      "description": "Data Type management API"
    },
    {
      "name": "PropertyType",
      "description": "Property type management API"
    },
    {
      "name": "EntityType",
      "description": "Entity type management API"
    },
    {
      "name": "Entity",
      "description": "entity management API"
    },
    {
      "name": "Web",
      "description": "Web management API"
    }
  ]
}