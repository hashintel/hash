{
  "openapi": "3.0.3",
  "info": {
    "title": "graph",
    "description": "HASH Graph API",
    "license": {
      "name": ""
    },
    "version": "0.0.0"
  },
  "paths": {
    "/account_groups": {
      "post": {
        "tags": [
          "Graph",
          "Account Group"
        ],
        "operationId": "create_account_group",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The schema of the created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroupId"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/account_groups/{account_group_id}/members/{account_id}": {
      "post": {
        "tags": [
          "Graph",
          "Account Group"
        ],
        "operationId": "add_account_group_member",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "account_group_id",
            "in": "path",
            "description": "The ID of the account group to add the member to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupId"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The ID of the account to add to the group",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The account group member was added"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "delete": {
        "tags": [
          "Graph",
          "Account Group"
        ],
        "operationId": "remove_account_group_member",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "account_group_id",
            "in": "path",
            "description": "The ID of the account group to remove the member from",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupId"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "The ID of the account to remove from the group",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The account group member was removed"
          },
          "403": {
            "description": "Permission denied"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/account_groups/{account_group_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "Account Group"
        ],
        "operationId": "check_account_group_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "account_group_id",
            "in": "path",
            "description": "The ID of the account group to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupId"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupPermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor can add an owner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "tags": [
          "Graph",
          "Account"
        ],
        "operationId": "create_account",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The schema of the created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountId"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types": {
      "post": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "create_data_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaybeListOfOntologyElementMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to create data type in the store as the base data type URL already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "put": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "update_data_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Base data type ID was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/archive": {
      "put": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "archive_data_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Data type ID was not found"
          },
          "409": {
            "description": "Data type ID is already archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/load": {
      "post": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "load_external_data_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadExternalDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the loaded data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to load data type in the store as the base data type ID already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/query": {
      "post": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "get_data_types_by_query",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataTypeStructuralQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Gets a subgraph rooted at all data types that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subgraph"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/relationships": {
      "post": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "modify_data_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModifyDataTypeAuthorizationRelationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The relationship was modified for the data"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/data-types/unarchive": {
      "put": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "unarchive_data_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnarchiveDataTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The temporal metadata of the updated data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Data type ID was not found"
          },
          "409": {
            "description": "Data type ID already exists and is not archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/data-types/{data_type_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "check_data_type_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "data_type_id",
            "in": "path",
            "description": "The data type ID to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DataTypePermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor has the permission for the data type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/data-types/{data_type_id}/relationships": {
      "get": {
        "tags": [
          "Graph",
          "DataType"
        ],
        "operationId": "get_data_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "data_type_id",
            "in": "path",
            "description": "The Data type to read the relations for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relations of the data type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataTypeRelationAndSubject"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entities": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "create_entity",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Entity Type URL was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "put": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "update_entity",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Entity ID or Entity Type URL was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "423": {
            "description": "The entity that should be updated was unexpectedly updated at the same time"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/query": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "get_entities_by_query",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityStructuralQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subgraph rooted at entities that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subgraph"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entities/relationships": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "modify_entity_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModifyEntityAuthorizationRelationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The relationship was modified for the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entities/{entity_id}/editors/{editor}": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "add_entity_editor",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The Entity to add the editor to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "editor",
            "in": "path",
            "description": "The editor to add to the entity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedById"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The editor was added to the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      },
      "delete": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "remove_entity_editor",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The Entity to remove the editor from",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "editor",
            "in": "path",
            "description": "The editor to remove from the entity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedById"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The editor was removed from the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entities/{entity_id}/owners/{owner}": {
      "post": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "add_entity_owner",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The Entity to add the owner to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "owner",
            "in": "path",
            "description": "The owner to add to the entity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedById"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The owner was added to the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      },
      "delete": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "remove_entity_owner",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The Entity to remove the owner from",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "owner",
            "in": "path",
            "description": "The owner to remove from the entity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedById"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The owner was removed from the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entities/{entity_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "check_entity_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The entity ID to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityPermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor has the permission for the entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/entities/{entity_id}/relationships": {
      "get": {
        "tags": [
          "Graph",
          "Entity"
        ],
        "operationId": "get_entity_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "description": "The Entity to read the relations for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relations of the entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityRelationAndSubject"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entity-types": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "create_entity_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaybeListOfEntityTypeMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Provided request body is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          },
          "409": {
            "description": "Unable to create entity type in the datastore as the base entity type ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "update_entity_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Base entity type ID was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/archive": {
      "put": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "archive_entity_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Entity type ID was not found"
          },
          "409": {
            "description": "Entity type ID is already archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/load": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "load_external_entity_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadExternalEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "400": {
            "description": "Provided request body is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          },
          "409": {
            "description": "Unable to load entity type in the datastore as the entity type ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          },
          "500": {
            "description": "Store error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./models/status.json"
                }
              }
            }
          }
        }
      }
    },
    "/entity-types/query": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "get_entity_types_by_query",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityTypeStructuralQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subgraph rooted at entity types that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subgraph"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/relationships": {
      "post": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "modify_entity_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModifyEntityTypeAuthorizationRelationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The relationship was modified for the entity"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/entity-types/unarchive": {
      "put": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "unarchive_entity_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnarchiveEntityTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The temporal metadata of the updated entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Entity type ID was not found"
          },
          "409": {
            "description": "Entity type ID already exists and is not archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/entity-types/{entity_type_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "check_entity_type_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_type_id",
            "in": "path",
            "description": "The entity type ID to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityTypePermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor has the permission for the entity type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/entity-types/{entity_type_id}/relationships": {
      "get": {
        "tags": [
          "Graph",
          "EntityType"
        ],
        "operationId": "get_entity_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "entity_type_id",
            "in": "path",
            "description": "The Entity type to read the relations for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relations of the entity type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTypeRelationAndSubject"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/property-types": {
      "post": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "create_property_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the created property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaybeListOfOntologyElementMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to create property type in the store as the base property type ID already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      },
      "put": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "update_property_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Base property type ID was not found"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/archive": {
      "put": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "archive_property_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivePropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the updated property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Property type ID was not found"
          },
          "409": {
            "description": "Property type ID is already archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/load": {
      "post": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "load_external_property_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadExternalPropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The metadata of the loaded property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyElementMetadata"
                }
              }
            }
          },
          "409": {
            "description": "Unable to load property type in the store as the base property type ID already exists"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/query": {
      "post": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "get_property_types_by_query",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyTypeStructuralQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A subgraph rooted at property types that satisfy the given query, each resolved to the requested depth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subgraph"
                }
              }
            }
          },
          "422": {
            "description": "Provided query is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/relationships": {
      "post": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "modify_property_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModifyPropertyTypeAuthorizationRelationship"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The relationship was modified for the property"
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/property-types/unarchive": {
      "put": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "unarchive_property_type",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnarchivePropertyTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The temporal metadata of the updated property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OntologyTemporalMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Property type ID was not found"
          },
          "409": {
            "description": "Property type ID already exists and is not archived"
          },
          "422": {
            "description": "Provided request body is invalid"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/property-types/{property_type_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "check_property_type_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "property_type_id",
            "in": "path",
            "description": "The property type ID to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PropertyTypePermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor has the permission for the property type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    },
    "/property-types/{property_type_id}/relationships": {
      "get": {
        "tags": [
          "Graph",
          "PropertyType"
        ],
        "operationId": "get_property_type_authorization_relationships",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "property_type_id",
            "in": "path",
            "description": "The Property type to read the relations for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VersionedUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relations of the property type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyTypeRelationAndSubject"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied"
          }
        }
      }
    },
    "/webs/{web_id}": {
      "post": {
        "tags": [
          "Graph",
          "Web"
        ],
        "operationId": "create_web",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "web_id",
            "in": "path",
            "description": "The ID of the account group to add the owner to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedById"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The web was created successfully"
          },
          "500": {
            "description": "Store error occurred"
          }
        }
      }
    },
    "/webs/{web_id}/permissions/{permission}": {
      "get": {
        "tags": [
          "Graph",
          "Web"
        ],
        "operationId": "check_web_permission",
        "parameters": [
          {
            "name": "X-Authenticated-User-Actor-Id",
            "in": "header",
            "description": "The ID of the actor which is used to authorize the request",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "name": "web_id",
            "in": "path",
            "description": "The web ID to check if the actor has the permission",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityId"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to check for",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/WebPermission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information if the actor has the permission for the web",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error occurred"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountGroupId": {
        "type": "string",
        "format": "uuid"
      },
      "AccountGroupPermission": {
        "type": "string",
        "enum": [
          "add_member",
          "remove_member"
        ]
      },
      "AccountId": {
        "type": "string",
        "format": "uuid"
      },
      "ArchiveDataTypeRequest": {
        "type": "object",
        "required": [
          "typeToArchive"
        ],
        "properties": {
          "typeToArchive": {
            "$ref": "./models/shared.json#/definitions/VersionedUrl"
          }
        }
      },
      "ArchiveEntityTypeRequest": {
        "type": "object",
        "required": [
          "typeToArchive"
        ],
        "properties": {
          "typeToArchive": {
            "$ref": "./models/shared.json#/definitions/VersionedUrl"
          }
        }
      },
      "ArchivePropertyTypeRequest": {
        "type": "object",
        "required": [
          "typeToArchive"
        ],
        "properties": {
          "typeToArchive": {
            "$ref": "./models/shared.json#/definitions/VersionedUrl"
          }
        }
      },
      "ClosedTemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "InclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "inclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "CreateDataTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "ownedById"
        ],
        "properties": {
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "./models/data_type.json"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "./models/data_type.json"
                }
              }
            ]
          }
        }
      },
      "CreateEntityRequest": {
        "type": "object",
        "required": [
          "properties",
          "entityTypeId",
          "ownedById",
          "owner"
        ],
        "properties": {
          "entityTypeId": {
            "$ref": "./models/shared.json#/definitions/VersionedUrl"
          },
          "entityUuid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityUuid"
              }
            ]
          },
          "linkData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkData"
              }
            ]
          },
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "owner": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "properties": {
            "$ref": "#/components/schemas/EntityProperties"
          }
        }
      },
      "CreateEntityTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "ownedById"
        ],
        "properties": {
          "icon": {
            "type": "string",
            "nullable": true
          },
          "labelProperty": {
            "$ref": "./models/shared.json#/definitions/BaseUrl"
          },
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "./models/entity_type.json"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "./models/entity_type.json"
                }
              }
            ]
          }
        }
      },
      "CreatePropertyTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "ownedById"
        ],
        "properties": {
          "ownedById": {
            "$ref": "#/components/schemas/OwnedById"
          },
          "schema": {
            "oneOf": [
              {
                "$ref": "./models/property_type.json"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "./models/property_type.json"
                }
              }
            ]
          }
        }
      },
      "CustomOntologyMetadata": {
        "oneOf": [
          {
            "type": "object",
            "title": "CustomOwnedOntologyElementMetadata",
            "required": [
              "provenance",
              "temporalVersioning",
              "ownedById"
            ],
            "properties": {
              "ownedById": {
                "$ref": "#/components/schemas/OwnedById"
              },
              "provenance": {
                "$ref": "#/components/schemas/ProvenanceMetadata"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          },
          {
            "type": "object",
            "title": "CustomExternalOntologyElementMetadata",
            "required": [
              "provenance",
              "temporalVersioning",
              "fetchedAt"
            ],
            "properties": {
              "fetchedAt": {
                "type": "string"
              },
              "provenance": {
                "$ref": "#/components/schemas/ProvenanceMetadata"
              },
              "temporalVersioning": {
                "$ref": "#/components/schemas/OntologyTemporalMetadata"
              }
            }
          }
        ]
      },
      "DataTypeGeneralViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          }
        ]
      },
      "DataTypeOwnerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "DataTypePermission": {
        "type": "string",
        "enum": [
          "update",
          "view"
        ]
      },
      "DataTypeQueryToken": {
        "type": "string",
        "description": "A single token in a [`DataTypeQueryPath`].",
        "enum": [
          "baseUrl",
          "version",
          "versionedUrl",
          "ownedById",
          "recordCreatedById",
          "recordArchivedById",
          "title",
          "description",
          "type"
        ]
      },
      "DataTypeRelationAndSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "relation",
              "subject"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "owner"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/DataTypeOwnerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "relation",
              "subject"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "generalViewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/DataTypeGeneralViewerSubject"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "relation"
        }
      },
      "DataTypeStructuralQuery": {
        "type": "object",
        "required": [
          "filter",
          "graphResolveDepths",
          "temporalAxes"
        ],
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        }
      },
      "DataTypeVertexId": {
        "type": "object",
        "required": [
          "baseId",
          "revisionId"
        ],
        "properties": {
          "baseId": {
            "$ref": "./models/shared.json#/definitions/BaseUrl"
          },
          "revisionId": {
            "$ref": "#/components/schemas/OntologyTypeVersion"
          }
        }
      },
      "DataTypeWithMetadata": {
        "type": "object",
        "required": [
          "schema",
          "metadata"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/OntologyElementMetadata"
          },
          "schema": {
            "$ref": "./models/data_type.json"
          }
        }
      },
      "DecisionTime": {
        "type": "string",
        "description": "Time axis for the decision time.\n\nThis is used as the generic argument to time-related structs and can be used as tag value.",
        "enum": [
          "decisionTime"
        ]
      },
      "EdgeResolveDepths": {
        "type": "object",
        "required": [
          "incoming",
          "outgoing"
        ],
        "properties": {
          "incoming": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "outgoing": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "Edges": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/OntologyOutwardEdge"
                },
                {
                  "$ref": "#/components/schemas/KnowledgeGraphOutwardEdge"
                }
              ]
            }
          }
        }
      },
      "Entity": {
        "type": "object",
        "description": "A record of an [`Entity`] that has been persisted in the datastore, with its associated\nmetadata.",
        "required": [
          "properties",
          "metadata"
        ],
        "properties": {
          "linkData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkData"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/EntityMetadata"
          },
          "properties": {
            "$ref": "#/components/schemas/EntityProperties"
          }
        }
      },
      "EntityEditionId": {
        "type": "string",
        "format": "uuid"
      },
      "EntityGeneralEditorSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityGeneralViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityId": {
        "type": "string"
      },
      "EntityIdWithInterval": {
        "type": "object",
        "required": [
          "entityId",
          "interval"
        ],
        "properties": {
          "entityId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "interval": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          }
        }
      },
      "EntityLinkOrder": {
        "type": "object",
        "properties": {
          "leftToRightOrder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkOrder"
              }
            ]
          },
          "rightToLeftOrder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkOrder"
              }
            ]
          }
        }
      },
      "EntityMetadata": {
        "type": "object",
        "description": "The metadata of an [`Entity`] record.",
        "required": [
          "recordId",
          "temporalVersioning",
          "entityTypeId",
          "provenance",
          "archived"
        ],
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "entityTypeId": {
            "type": "string"
          },
          "provenance": {
            "$ref": "#/components/schemas/ProvenanceMetadata"
          },
          "recordId": {
            "$ref": "#/components/schemas/EntityRecordId"
          },
          "temporalVersioning": {
            "$ref": "#/components/schemas/EntityTemporalMetadata"
          }
        }
      },
      "EntityOwnerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityPermission": {
        "type": "string",
        "enum": [
          "update",
          "view"
        ]
      },
      "EntityProperties": {
        "type": "object",
        "description": "The properties of an entity.\n\nWhen expressed as JSON, this should validate against its respective entity type(s)."
      },
      "EntityQueryToken": {
        "type": "string",
        "description": "A single token in an [`EntityQueryPath`].",
        "enum": [
          "uuid",
          "editionId",
          "archived",
          "ownedById",
          "recordCreatedById",
          "type",
          "properties",
          "incomingLinks",
          "outgoingLinks",
          "leftEntity",
          "rightEntity",
          "leftToRightOrder",
          "rightToLeftOrder"
        ]
      },
      "EntityRecordId": {
        "type": "object",
        "required": [
          "entityId",
          "editionId"
        ],
        "properties": {
          "editionId": {
            "$ref": "#/components/schemas/EntityEditionId"
          },
          "entityId": {
            "$ref": "#/components/schemas/EntityId"
          }
        }
      },
      "EntityRelationAndSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "relation",
              "subject"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "owner"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityOwnerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "relation",
              "subject"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "generalEditor"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityGeneralEditorSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "relation",
              "subject"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "generalViewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityGeneralViewerSubject"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "relation"
        }
      },
      "EntityStructuralQuery": {
        "type": "object",
        "required": [
          "filter",
          "graphResolveDepths",
          "temporalAxes"
        ],
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        }
      },
      "EntityTemporalMetadata": {
        "type": "object",
        "required": [
          "decisionTime",
          "transactionTime"
        ],
        "properties": {
          "decisionTime": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          },
          "transactionTime": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          }
        }
      },
      "EntityTypeGeneralViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          }
        ]
      },
      "EntityTypeMetadata": {
        "type": "object",
        "required": [
          "recordId",
          "custom"
        ],
        "properties": {
          "custom": {
            "$ref": "#/components/schemas/CustomOntologyMetadata"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "labelProperty": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseUrl"
              }
            ],
            "nullable": true
          },
          "recordId": {
            "$ref": "#/components/schemas/OntologyTypeRecordId"
          }
        }
      },
      "EntityTypeOwnerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "EntityTypePermission": {
        "type": "string",
        "enum": [
          "update",
          "view"
        ]
      },
      "EntityTypeQueryToken": {
        "type": "string",
        "description": "A single token in a [`EntityTypeQueryPath`].",
        "enum": [
          "baseUrl",
          "version",
          "versionedUrl",
          "ownedById",
          "recordCreatedById",
          "recordArchivedById",
          "title",
          "description",
          "examples",
          "properties",
          "required",
          "labelProperty",
          "icon",
          "links",
          "inheritsFrom",
          "children"
        ]
      },
      "EntityTypeRelationAndSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "relation",
              "subject"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "owner"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityTypeOwnerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "relation",
              "subject"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "generalViewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/EntityTypeGeneralViewerSubject"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "relation"
        }
      },
      "EntityTypeStructuralQuery": {
        "type": "object",
        "required": [
          "filter",
          "graphResolveDepths",
          "temporalAxes"
        ],
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        }
      },
      "EntityTypeVertexId": {
        "type": "object",
        "required": [
          "baseId",
          "revisionId"
        ],
        "properties": {
          "baseId": {
            "$ref": "./models/shared.json#/definitions/BaseUrl"
          },
          "revisionId": {
            "$ref": "#/components/schemas/OntologyTypeVersion"
          }
        }
      },
      "EntityTypeWithMetadata": {
        "type": "object",
        "required": [
          "schema",
          "metadata"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/EntityTypeMetadata"
          },
          "schema": {
            "$ref": "./models/entity_type.json"
          }
        }
      },
      "EntityUuid": {
        "type": "string",
        "format": "uuid"
      },
      "EntityVertexId": {
        "type": "object",
        "required": [
          "baseId",
          "revisionId"
        ],
        "properties": {
          "baseId": {
            "$ref": "#/components/schemas/EntityId"
          },
          "revisionId": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "Filter": {
        "oneOf": [
          {
            "type": "object",
            "title": "AllFilter",
            "required": [
              "all"
            ],
            "properties": {
              "all": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "AnyFilter",
            "required": [
              "any"
            ],
            "properties": {
              "any": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          {
            "type": "object",
            "title": "NotFilter",
            "required": [
              "not"
            ],
            "properties": {
              "not": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          {
            "type": "object",
            "title": "EqualFilter",
            "required": [
              "equal"
            ],
            "properties": {
              "equal": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "NotEqualFilter",
            "required": [
              "notEqual"
            ],
            "properties": {
              "notEqual": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "StartsWithFilter",
            "required": [
              "startsWith"
            ],
            "properties": {
              "startsWith": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "EndsWithFilter",
            "required": [
              "endsWith"
            ],
            "properties": {
              "endsWith": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          {
            "type": "object",
            "title": "ContainsSegmentFilter",
            "required": [
              "containsSegment"
            ],
            "properties": {
              "containsSegment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterExpression"
                },
                "maxItems": 2,
                "minItems": 2
              }
            }
          }
        ]
      },
      "FilterExpression": {
        "oneOf": [
          {
            "type": "object",
            "title": "PathExpression",
            "required": [
              "path"
            ],
            "properties": {
              "path": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DataTypeQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/PropertyTypeQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/EntityTypeQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/EntityQueryToken"
                    },
                    {
                      "$ref": "#/components/schemas/Selector"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "title": "ParameterExpression",
            "required": [
              "parameter"
            ],
            "properties": {
              "parameter": {}
            }
          }
        ]
      },
      "GraphElementVertexId": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DataTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/PropertyTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/EntityTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/EntityVertexId"
          }
        ]
      },
      "GraphResolveDepths": {
        "type": "object",
        "description": "TODO: DOC - <https://app.asana.com/0/0/1203438518991188/f>",
        "required": [
          "inheritsFrom",
          "constrainsValuesOn",
          "constrainsPropertiesOn",
          "constrainsLinksOn",
          "constrainsLinkDestinationsOn",
          "isOfType",
          "hasLeftEntity",
          "hasRightEntity"
        ],
        "properties": {
          "constrainsLinkDestinationsOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "constrainsLinksOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "constrainsPropertiesOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "constrainsValuesOn": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "hasLeftEntity": {
            "$ref": "#/components/schemas/EdgeResolveDepths"
          },
          "hasRightEntity": {
            "$ref": "#/components/schemas/EdgeResolveDepths"
          },
          "inheritsFrom": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          },
          "isOfType": {
            "$ref": "#/components/schemas/OutgoingEdgeResolveDepth"
          }
        }
      },
      "KnowledgeGraphEdgeKind": {
        "type": "string",
        "enum": [
          "HAS_LEFT_ENTITY",
          "HAS_RIGHT_ENTITY"
        ]
      },
      "KnowledgeGraphOutwardEdge": {
        "oneOf": [
          {
            "type": "object",
            "title": "KnowledgeGraphToKnowledgeGraphOutwardEdge",
            "required": [
              "kind",
              "reversed",
              "rightEndpoint"
            ],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/KnowledgeGraphEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/EntityIdWithInterval"
              }
            }
          },
          {
            "type": "object",
            "title": "KnowledgeGraphToOntologyOutwardEdge",
            "required": [
              "kind",
              "reversed",
              "rightEndpoint"
            ],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/SharedEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/OntologyTypeVertexId"
              }
            }
          }
        ]
      },
      "KnowledgeGraphVertex": {
        "oneOf": [
          {
            "type": "object",
            "title": "EntityVertex",
            "required": [
              "kind",
              "inner"
            ],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/Entity"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "entity"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "KnowledgeGraphVertices": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/KnowledgeGraphVertex"
          }
        }
      },
      "LeftClosedTemporalInterval": {
        "type": "object",
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "end": {
            "$ref": "#/components/schemas/OpenTemporalBound"
          },
          "start": {
            "$ref": "#/components/schemas/ClosedTemporalBound"
          }
        }
      },
      "LimitedTemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "InclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "inclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          },
          {
            "type": "object",
            "title": "ExclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "exclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "LinkData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityLinkOrder"
          },
          {
            "type": "object",
            "required": [
              "leftEntityId",
              "rightEntityId"
            ],
            "properties": {
              "leftEntityId": {
                "$ref": "#/components/schemas/EntityId"
              },
              "rightEntityId": {
                "$ref": "#/components/schemas/EntityId"
              }
            }
          }
        ],
        "description": "The associated information for 'Link' entities"
      },
      "LinkOrder": {
        "type": "integer",
        "format": "int32"
      },
      "LoadExternalDataTypeRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "dataTypeId"
            ],
            "properties": {
              "dataTypeId": {
                "$ref": "./models/shared.json#/definitions/VersionedUrl"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "schema"
            ],
            "properties": {
              "schema": {
                "$ref": "./models/data_type.json"
              }
            }
          }
        ]
      },
      "LoadExternalEntityTypeRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "entityTypeId"
            ],
            "properties": {
              "entityTypeId": {
                "$ref": "./models/shared.json#/definitions/VersionedUrl"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "schema"
            ],
            "properties": {
              "icon": {
                "type": "string",
                "nullable": true
              },
              "label_property": {
                "$ref": "./models/shared.json#/definitions/BaseUrl"
              },
              "schema": {
                "$ref": "./models/entity_type.json"
              }
            }
          }
        ]
      },
      "LoadExternalPropertyTypeRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "propertyTypeId"
            ],
            "properties": {
              "propertyTypeId": {
                "$ref": "./models/shared.json#/definitions/VersionedUrl"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "schema"
            ],
            "properties": {
              "schema": {
                "$ref": "./models/property_type.json"
              }
            }
          }
        ]
      },
      "MaybeListOfEntityTypeMetadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EntityTypeMetadata"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityTypeMetadata"
            }
          }
        ]
      },
      "MaybeListOfOntologyElementMetadata": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/OntologyElementMetadata"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OntologyElementMetadata"
            }
          }
        ]
      },
      "ModifyDataTypeAuthorizationRelationship": {
        "type": "object",
        "required": [
          "operation",
          "resource",
          "relationAndSubject"
        ],
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ModifyRelationshipOperation"
          },
          "relationAndSubject": {
            "$ref": "#/components/schemas/DataTypeRelationAndSubject"
          },
          "resource": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        }
      },
      "ModifyEntityAuthorizationRelationship": {
        "type": "object",
        "required": [
          "operation",
          "resource",
          "relationSubject"
        ],
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ModifyRelationshipOperation"
          },
          "relationSubject": {
            "$ref": "#/components/schemas/EntityRelationAndSubject"
          },
          "resource": {
            "$ref": "#/components/schemas/EntityId"
          }
        }
      },
      "ModifyEntityTypeAuthorizationRelationship": {
        "type": "object",
        "required": [
          "operation",
          "resource",
          "relationAndSubject"
        ],
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ModifyRelationshipOperation"
          },
          "relationAndSubject": {
            "$ref": "#/components/schemas/EntityTypeRelationAndSubject"
          },
          "resource": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        }
      },
      "ModifyPropertyTypeAuthorizationRelationship": {
        "type": "object",
        "required": [
          "operation",
          "resource",
          "relationAndSubject"
        ],
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/ModifyRelationshipOperation"
          },
          "relationAndSubject": {
            "$ref": "#/components/schemas/PropertyTypeRelationAndSubject"
          },
          "resource": {
            "$ref": "#/components/schemas/VersionedUrl"
          }
        }
      },
      "ModifyRelationshipOperation": {
        "type": "string",
        "description": "Used for mutating a single relationship within the service.",
        "enum": [
          "touch",
          "create",
          "delete"
        ]
      },
      "NullableTimestamp": {
        "type": "string",
        "format": "date-time",
        "nullable": true
      },
      "OntologyEdgeKind": {
        "type": "string",
        "enum": [
          "INHERITS_FROM",
          "CONSTRAINS_VALUES_ON",
          "CONSTRAINS_PROPERTIES_ON",
          "CONSTRAINS_LINKS_ON",
          "CONSTRAINS_LINK_DESTINATIONS_ON"
        ]
      },
      "OntologyElementMetadata": {
        "type": "object",
        "required": [
          "recordId",
          "custom"
        ],
        "properties": {
          "custom": {
            "$ref": "#/components/schemas/CustomOntologyMetadata"
          },
          "recordId": {
            "$ref": "#/components/schemas/OntologyTypeRecordId"
          }
        }
      },
      "OntologyOutwardEdge": {
        "oneOf": [
          {
            "type": "object",
            "title": "OntologyToOntologyOutwardEdge",
            "required": [
              "kind",
              "reversed",
              "rightEndpoint"
            ],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/OntologyEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/OntologyTypeVertexId"
              }
            }
          },
          {
            "type": "object",
            "title": "OntologyToKnowledgeGraphOutwardEdge",
            "required": [
              "kind",
              "reversed",
              "rightEndpoint"
            ],
            "properties": {
              "kind": {
                "$ref": "#/components/schemas/SharedEdgeKind"
              },
              "reversed": {
                "type": "boolean"
              },
              "rightEndpoint": {
                "$ref": "#/components/schemas/EntityIdWithInterval"
              }
            }
          }
        ]
      },
      "OntologyTemporalMetadata": {
        "type": "object",
        "required": [
          "transactionTime"
        ],
        "properties": {
          "transactionTime": {
            "$ref": "#/components/schemas/LeftClosedTemporalInterval"
          }
        }
      },
      "OntologyTypeRecordId": {
        "type": "object",
        "required": [
          "baseUrl",
          "version"
        ],
        "properties": {
          "baseUrl": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "OntologyTypeVersion": {
        "type": "integer",
        "format": "int32",
        "minimum": 0
      },
      "OntologyTypeVertexId": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DataTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/PropertyTypeVertexId"
          },
          {
            "$ref": "#/components/schemas/EntityTypeVertexId"
          }
        ]
      },
      "OntologyVertex": {
        "oneOf": [
          {
            "type": "object",
            "title": "DataTypeVertex",
            "required": [
              "kind",
              "inner"
            ],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/DataTypeWithMetadata"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "dataType"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "PropertyTypeVertex",
            "required": [
              "kind",
              "inner"
            ],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/PropertyTypeWithMetadata"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "propertyType"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "EntityTypeVertex",
            "required": [
              "kind",
              "inner"
            ],
            "properties": {
              "inner": {
                "$ref": "#/components/schemas/EntityTypeWithMetadata"
              },
              "kind": {
                "type": "string",
                "enum": [
                  "entityType"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "OntologyVertices": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/OntologyVertex"
          }
        }
      },
      "OpenTemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "ExclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "exclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          },
          {
            "type": "object",
            "title": "UnboundedBound",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "unbounded"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "OutgoingEdgeResolveDepth": {
        "type": "object",
        "required": [
          "outgoing"
        ],
        "properties": {
          "outgoing": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "OwnedById": {
        "type": "string",
        "format": "uuid"
      },
      "PermissionResponse": {
        "type": "object",
        "required": [
          "has_permission"
        ],
        "properties": {
          "has_permission": {
            "type": "boolean"
          }
        }
      },
      "PropertyTypeGeneralViewerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "public"
                ]
              }
            }
          }
        ]
      },
      "PropertyTypeOwnerSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "account"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountId"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "subjectId",
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "accountGroup"
                ]
              },
              "subjectId": {
                "$ref": "#/components/schemas/AccountGroupId"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "PropertyTypePermission": {
        "type": "string",
        "enum": [
          "update",
          "view"
        ]
      },
      "PropertyTypeQueryToken": {
        "type": "string",
        "description": "A single token in a [`DataTypeQueryPath`].",
        "enum": [
          "baseUrl",
          "version",
          "versionedUrl",
          "ownedById",
          "recordCreatedById",
          "recordArchivedById",
          "title",
          "description",
          "dataTypes",
          "propertyTypes"
        ]
      },
      "PropertyTypeRelationAndSubject": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "relation",
              "subject"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "owner"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/PropertyTypeOwnerSubject"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "relation",
              "subject"
            ],
            "properties": {
              "relation": {
                "type": "string",
                "enum": [
                  "generalViewer"
                ]
              },
              "subject": {
                "$ref": "#/components/schemas/PropertyTypeGeneralViewerSubject"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "relation"
        }
      },
      "PropertyTypeStructuralQuery": {
        "type": "object",
        "required": [
          "filter",
          "graphResolveDepths",
          "temporalAxes"
        ],
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "graphResolveDepths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          }
        }
      },
      "PropertyTypeVertexId": {
        "type": "object",
        "required": [
          "baseId",
          "revisionId"
        ],
        "properties": {
          "baseId": {
            "$ref": "./models/shared.json#/definitions/BaseUrl"
          },
          "revisionId": {
            "$ref": "#/components/schemas/OntologyTypeVersion"
          }
        }
      },
      "PropertyTypeWithMetadata": {
        "type": "object",
        "required": [
          "schema",
          "metadata"
        ],
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/OntologyElementMetadata"
          },
          "schema": {
            "$ref": "./models/property_type.json"
          }
        }
      },
      "ProvenanceMetadata": {
        "type": "object",
        "required": [
          "recordCreatedById"
        ],
        "properties": {
          "recordArchivedById": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecordArchivedById"
              }
            ],
            "nullable": true
          },
          "recordCreatedById": {
            "$ref": "#/components/schemas/RecordCreatedById"
          }
        }
      },
      "QueryTemporalAxes": {
        "oneOf": [
          {
            "type": "object",
            "title": "QueryTemporalAxesDecisionTime",
            "required": [
              "pinned",
              "variable"
            ],
            "properties": {
              "pinned": {
                "type": "object",
                "title": "PinnedTransactionAxis",
                "required": [
                  "axis",
                  "timestamp"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "variable": {
                "type": "object",
                "title": "VariableDecisionAxis",
                "required": [
                  "axis",
                  "interval"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/RightBoundedTemporalInterval"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "title": "QueryTemporalAxesTransactionTime",
            "required": [
              "pinned",
              "variable"
            ],
            "properties": {
              "pinned": {
                "type": "object",
                "title": "PinnedDecisionAxis",
                "required": [
                  "axis",
                  "timestamp"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "variable": {
                "type": "object",
                "title": "VariableTransactionAxis",
                "required": [
                  "axis",
                  "interval"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/RightBoundedTemporalInterval"
                  }
                }
              }
            }
          }
        ],
        "description": "Defines the two possible combinations of pinned/variable temporal axes that are used in\nresponses to queries that return [`Subgraph`]s.\n\nWhen querying the Graph, temporal data is returned. The Graph is implemented as a bitemporal\ndata store, which means the knowledge data contains information about the time of when the\nknowledge was inserted into the Graph, the [`TransactionTime`], and when the knowledge was\ndecided to be inserted, the [`DecisionTime`].\n\nIn order to query data from the Graph, only one of the two time axes can be used. This is\nachieved by using a `TemporalAxes`. The `TemporalAxes` pins one axis to a specified\n[`Timestamp`], while the other axis can be a [`Interval`]. The pinned axis is called the\n[`PinnedTemporalAxis`] and the other axis is called the [`VariableTemporalAxis`]. The returned\ndata will then only contain temporal data that is contained in the [`Interval`] of the\n[`VariableTemporalAxis`] for the given [`Timestamp`] of the [`PinnedTemporalAxis`].\n\n[`Subgraph`]: crate::subgraph::Subgraph\n[`Interval`]: temporal_versioning::Interval"
      },
      "QueryTemporalAxesUnresolved": {
        "oneOf": [
          {
            "type": "object",
            "title": "QueryTemporalAxesUnresolvedDecisionTime",
            "required": [
              "pinned",
              "variable"
            ],
            "properties": {
              "pinned": {
                "type": "object",
                "title": "UnresolvedPinnedTransactionAxis",
                "required": [
                  "axis",
                  "timestamp"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "timestamp": {
                    "$ref": "#/components/schemas/NullableTimestamp"
                  }
                }
              },
              "variable": {
                "type": "object",
                "title": "UnresolvedVariableDecisionAxis",
                "required": [
                  "axis",
                  "interval"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/UnresolvedRightBoundedTemporalInterval"
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "title": "QueryTemporalAxesUnresolvedTransactionTime",
            "required": [
              "pinned",
              "variable"
            ],
            "properties": {
              "pinned": {
                "type": "object",
                "title": "UnresolvedPinnedDecisionAxis",
                "required": [
                  "axis",
                  "timestamp"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/DecisionTime"
                  },
                  "timestamp": {
                    "$ref": "#/components/schemas/NullableTimestamp"
                  }
                }
              },
              "variable": {
                "type": "object",
                "title": "UnresolvedVariableTransactionAxis",
                "required": [
                  "axis",
                  "interval"
                ],
                "properties": {
                  "axis": {
                    "$ref": "#/components/schemas/TransactionTime"
                  },
                  "interval": {
                    "$ref": "#/components/schemas/UnresolvedRightBoundedTemporalInterval"
                  }
                }
              }
            }
          }
        ],
        "description": "Defines the two possible combinations of pinned/variable temporal axes that are used in queries\nthat return [`Subgraph`]s.\n\nThe [`VariableTemporalAxisUnresolved`] is optionally bounded, in the absence of provided\nbounds an inclusive bound at the timestamp at point of resolving is assumed.\n\n[`Subgraph`]: crate::subgraph::Subgraph"
      },
      "RecordArchivedById": {
        "type": "string",
        "format": "uuid"
      },
      "RecordCreatedById": {
        "type": "string",
        "format": "uuid"
      },
      "RightBoundedTemporalInterval": {
        "type": "object",
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "end": {
            "$ref": "#/components/schemas/LimitedTemporalBound"
          },
          "start": {
            "$ref": "#/components/schemas/TemporalBound"
          }
        }
      },
      "Selector": {
        "type": "string",
        "enum": [
          "*"
        ]
      },
      "SharedEdgeKind": {
        "type": "string",
        "enum": [
          "IS_OF_TYPE"
        ]
      },
      "Subgraph": {
        "type": "object",
        "required": [
          "roots",
          "vertices",
          "edges",
          "depths",
          "temporalAxes"
        ],
        "properties": {
          "depths": {
            "$ref": "#/components/schemas/GraphResolveDepths"
          },
          "edges": {
            "$ref": "#/components/schemas/Edges"
          },
          "roots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GraphElementVertexId"
            }
          },
          "temporalAxes": {
            "$ref": "#/components/schemas/SubgraphTemporalAxes"
          },
          "vertices": {
            "$ref": "#/components/schemas/Vertices"
          }
        }
      },
      "SubgraphTemporalAxes": {
        "type": "object",
        "required": [
          "initial",
          "resolved"
        ],
        "properties": {
          "initial": {
            "$ref": "#/components/schemas/QueryTemporalAxesUnresolved"
          },
          "resolved": {
            "$ref": "#/components/schemas/QueryTemporalAxes"
          }
        }
      },
      "TemporalBound": {
        "oneOf": [
          {
            "type": "object",
            "title": "UnboundedBound",
            "required": [
              "kind"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "unbounded"
                ]
              }
            }
          },
          {
            "type": "object",
            "title": "InclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "inclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          },
          {
            "type": "object",
            "title": "ExclusiveBound",
            "required": [
              "kind",
              "limit"
            ],
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "exclusive"
                ]
              },
              "limit": {
                "$ref": "#/components/schemas/Timestamp"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "TransactionTime": {
        "type": "string",
        "description": "Time axis for the transaction time.\n\nThis is used as the generic argument to time-related structs and can be used as tag value.",
        "enum": [
          "transactionTime"
        ]
      },
      "UnarchiveDataTypeRequest": {
        "type": "object",
        "required": [
          "typeToUnarchive"
        ],
        "properties": {
          "typeToUnarchive": {
            "$ref": "./models/shared.json#/definitions/VersionedUrl"
          }
        }
      },
      "UnarchiveEntityTypeRequest": {
        "type": "object",
        "required": [
          "typeToUnarchive"
        ],
        "properties": {
          "typeToUnarchive": {
            "$ref": "./models/shared.json#/definitions/VersionedUrl"
          }
        }
      },
      "UnarchivePropertyTypeRequest": {
        "type": "object",
        "required": [
          "typeToUnarchive"
        ],
        "properties": {
          "typeToUnarchive": {
            "$ref": "./models/shared.json#/definitions/VersionedUrl"
          }
        }
      },
      "UnresolvedRightBoundedTemporalInterval": {
        "type": "object",
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "end": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LimitedTemporalBound"
              }
            ],
            "nullable": true
          },
          "start": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TemporalBound"
              }
            ],
            "nullable": true
          }
        }
      },
      "UpdateDataTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "typeToUpdate"
        ],
        "properties": {
          "schema": {
            "$ref": "./models/update_data_type.json"
          },
          "typeToUpdate": {
            "$ref": "./models/shared.json#/definitions/VersionedUrl"
          }
        }
      },
      "UpdateEntityRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityLinkOrder"
          },
          {
            "type": "object",
            "required": [
              "properties",
              "entityId",
              "entityTypeId",
              "archived"
            ],
            "properties": {
              "archived": {
                "type": "boolean"
              },
              "entityId": {
                "$ref": "#/components/schemas/EntityId"
              },
              "entityTypeId": {
                "$ref": "./models/shared.json#/definitions/VersionedUrl"
              },
              "properties": {
                "$ref": "#/components/schemas/EntityProperties"
              }
            }
          }
        ]
      },
      "UpdateEntityTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "typeToUpdate"
        ],
        "properties": {
          "icon": {
            "type": "string",
            "nullable": true
          },
          "labelProperty": {
            "$ref": "./models/shared.json#/definitions/BaseUrl"
          },
          "schema": {
            "$ref": "./models/update_entity_type.json"
          },
          "typeToUpdate": {
            "$ref": "./models/shared.json#/definitions/VersionedUrl"
          }
        }
      },
      "UpdatePropertyTypeRequest": {
        "type": "object",
        "required": [
          "schema",
          "typeToUpdate"
        ],
        "properties": {
          "schema": {
            "$ref": "./models/update_property_type.json"
          },
          "typeToUpdate": {
            "$ref": "./models/shared.json#/definitions/VersionedUrl"
          }
        }
      },
      "Vertex": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/OntologyVertex"
          },
          {
            "$ref": "#/components/schemas/KnowledgeGraphVertex"
          }
        ]
      },
      "Vertices": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/KnowledgeGraphVertex"
              },
              {
                "$ref": "#/components/schemas/OntologyVertex"
              }
            ]
          }
        }
      },
      "WebPermission": {
        "type": "string",
        "enum": [
          "create_entity",
          "create_entity_type",
          "create_property_type",
          "create_data_type"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Graph",
      "description": "HASH Graph API"
    },
    {
      "name": "Account",
      "description": "Account management API"
    },
    {
      "name": "DataType",
      "description": "Data Type management API"
    },
    {
      "name": "PropertyType",
      "description": "Property type management API"
    },
    {
      "name": "EntityType",
      "description": "Entity type management API"
    },
    {
      "name": "Entity",
      "description": "entity management API"
    },
    {
      "name": "Web",
      "description": "Web management API"
    }
  ]
}