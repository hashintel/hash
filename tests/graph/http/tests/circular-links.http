# This file either runs with JetBrains' http requests or using httpYac (https://httpyac.github.io).

### Get system user
GET http://127.0.0.1:4000/system/actor/h
Content-Type: application/json

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.global.set("system_machine_id", response.body);
%}


### Create account
POST http://127.0.0.1:4000/actors/user
Content-Type: application/json
X-Authenticated-User-Actor-Id: {{system_machine_id}}

{
  "shortname": "test-user",
  "registrationComplete": true
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.global.set("user_id", response.body.userId);
%}

### load entity link type
POST http://127.0.0.1:4000/entity-types/load
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "schema": {
    "$schema": "https://blockprotocol.org/types/modules/graph/0.3/schema/entity-type",
    "kind": "entityType",
    "$id": "https://blockprotocol.org/@blockprotocol/types/entity-type/link/v/1",
    "type": "object",
    "title": "Link",
  "description": "The most generic connection between two entities, defining a relationship from a source to a target. It serves as a parent type for more specific link entity types, enabling consistent and interoperable data relationships.",
    "properties": {}
  },
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "viewer",
    "subject": {
      "kind": "public"
    }
  }]
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Insert link entity type
POST http://127.0.0.1:4000/entity-types
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "schema": {
    "$schema": "https://blockprotocol.org/types/modules/graph/0.3/schema/entity-type",
    "kind": "entityType",
    "$id": "http://localhost:3000/@snapshot/types/entity-type/link/v/1",
    "type": "object",
    "title": "Object",
    "description": "A link entity type",
    "allOf": [{ "$ref": "https://blockprotocol.org/@blockprotocol/types/entity-type/link/v/1" }],
    "properties": {}
  },
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "updateFromWeb"
    }
  }]
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.global.set("link_entity_type_id", `${response.body.recordId.baseUrl}v/${response.body.recordId.version}`);
%}

### Allow the link entity type to be instantiated by the account
POST http://127.0.0.1:4000/entity-types/relationships
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

[
  {
    "operation": "create",
    "resource": "{{link_entity_type_id}}",
    "relationAndSubject": {
      "relation": "instantiator",
      "subject": {
        "kind": "account",
        "subjectId": "{{user_id}}"
      }
    }
  }
]

### Insert entity type
POST http://127.0.0.1:4000/entity-types
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "schema": {
    "$schema": "https://blockprotocol.org/types/modules/graph/0.3/schema/entity-type",
    "kind": "entityType",
    "$id": "http://localhost:3000/@snapshot/types/entity-type/object/v/1",
    "type": "object",
    "title": "Object",
    "description": "An object",
    "properties": {},
    "links": {
      "http://localhost:3000/@snapshot/types/entity-type/link/v/1": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "http://localhost:3000/@snapshot/types/entity-type/object/v/1"
            }
          ]
        }
      }
    }
  },
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "updateFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.global.set("entity_type_id", `${response.body.recordId.baseUrl}v/${response.body.recordId.version}`);
%}

### Allow the entity type to be instantiated by the account
POST http://127.0.0.1:4000/entity-types/relationships
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

[
  {
    "operation": "create",
    "resource": "{{entity_type_id}}",
    "relationAndSubject": {
      "relation": "instantiator",
      "subject": {
        "kind": "account",
        "subjectId": "{{user_id}}"
      }
    }
  }
]


### Insert entity A
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value": {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/object/v/1"],
  "entityUuid": "0000000A-0001-0000-0000-000000000000",
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.global.set("entity_a", response.body.metadata.recordId.entityId);
%}

### Insert entity B
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value": {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/object/v/1"],
  "entityUuid": "0000000B-0001-0000-0000-000000000000",
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.global.set("entity_b", response.body.metadata.recordId.entityId);
%}

### Insert entity C
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value": {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/object/v/1"],
  "entityUuid": "0000000C-0001-0000-0000-000000000000",
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.global.set("entity_c", response.body.metadata.recordId.entityId);
%}

### Insert entity D
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value": {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/object/v/1"],
  "entityUuid": "0000000D-0001-0000-0000-000000000000",
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.global.set("entity_d", response.body.metadata.recordId.entityId);
%}

### Insert link between A and B
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value": {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/link/v/1"],
  "entityUuid": "000000AB-0001-0000-0000-000000000000",
  "linkData": {
    "leftEntityId": "{{entity_a}}",
    "rightEntityId": "{{entity_b}}"
  },
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### Insert link between B and C
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value": {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/link/v/1"],
  "entityUuid": "000000BC-0001-0000-0000-000000000000",
  "linkData": {
    "leftEntityId": "{{entity_b}}",
    "rightEntityId": "{{entity_c}}"
  },
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### Insert link between C and D
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value": {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/link/v/1"],
  "entityUuid": "000000CD-0001-0000-0000-000000000000",
  "linkData": {
    "leftEntityId": "{{entity_c}}",
    "rightEntityId": "{{entity_d}}"
  },
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### Insert link between D and A
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value":  {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/link/v/1"],
  "entityUuid": "000000DA-0001-0000-0000-000000000000",
  "linkData": {
    "leftEntityId": "{{entity_d}}",
    "rightEntityId": "{{entity_a}}"
  },
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}


### Insert link between B and A
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value":  {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/link/v/1"],
  "entityUuid": "000000BA-0001-0000-0000-000000000000",
  "linkData": {
    "leftEntityId": "{{entity_b}}",
    "rightEntityId": "{{entity_a}}"
  },
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}



### Insert link between C and B
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value":  {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/link/v/1"],
  "entityUuid": "000000CB-0001-0000-0000-000000000000",
  "linkData": {
    "leftEntityId": "{{entity_c}}",
    "rightEntityId": "{{entity_b}}"
  },
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}



### Insert link between D and C
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value":  {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/link/v/1"],
  "entityUuid": "000000DC-0001-0000-0000-000000000000",
  "linkData": {
    "leftEntityId": "{{entity_d}}",
    "rightEntityId": "{{entity_c}}"
  },
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}



### Insert link between A and D
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json
X-Authenticated-User-Actor-Id: {{user_id}}

{
  "webId": "{{user_id}}",
  "properties": { "value": {} },
  "entityTypeIds": ["http://localhost:3000/@snapshot/types/entity-type/link/v/1"],
  "entityUuid": "000000AD-0001-0000-0000-000000000000",
  "linkData": {
    "leftEntityId": "{{entity_a}}",
    "rightEntityId": "{{entity_d}}"
  },
  "draft": false,
  "provenance": {
    "actorType": "machine",
    "origin": {
      "type": "api"
    }
  },
  "relationships": [{
    "relation": "setting",
    "subject": {
      "kind": "setting",
      "subjectId": "administratorFromWeb"
    }
  }]
}

> {%
  client.test("status", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}
