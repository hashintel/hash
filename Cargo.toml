[workspace]
default-members = [
    "apps/hash-graph",
]
exclude = [
    ".github/scripts/rust",
]
members = [
    "apps/hash-graph",
    "libs/@blockprotocol/type-system/rust",
    "libs/@local/codec",
    "libs/@local/codegen",
    "libs/@local/effect-dns/hickory",
    "libs/@local/graph/api",
    "libs/@local/graph/authorization",
    "libs/@local/graph/migrations",
    "libs/@local/graph/migrations-macros",
    "libs/@local/graph/postgres-store",
    "libs/@local/graph/store",
    "libs/@local/graph/temporal-versioning",
    "libs/@local/graph/test-server",
    "libs/@local/graph/type-defs",
    "libs/@local/graph/type-fetcher",
    "libs/@local/graph/types/rust",
    "libs/@local/graph/validation",
    "libs/@local/harpc/client/rust",
    "libs/@local/harpc/codec",
    "libs/@local/harpc/net",
    "libs/@local/harpc/server",
    "libs/@local/harpc/system",
    "libs/@local/harpc/tower",
    "libs/@local/harpc/types",
    "libs/@local/harpc/wire-protocol",
    "libs/@local/hashql/*",
    "libs/@local/repo-chores/rust",
    "libs/@local/status/rust",
    "libs/@local/temporal-client",
    "libs/@local/tracing",
    "libs/antsi",
    "libs/chonky",
    "libs/deer",
    "libs/deer/desert",
    "libs/deer/json",
    "libs/deer/macros",
    "libs/error-stack",
    "libs/error-stack/macros",
    "libs/sarif",
    "tests/graph/benches",
    "tests/graph/integration",
    "tests/graph/test-data/rust",
]
resolver = "3"

[workspace.package]
authors = ["HASH"]
edition = "2024"
license = "AGPL-3"
publish = false
version = "0.0.0"

[workspace.dependencies]
# Workspace members
error-stack                         = { path = "./libs/error-stack", default-features = false }
harpc-client.path                   = "libs/@local/harpc/client/rust"
harpc-codec.path                    = "libs/@local/harpc/codec"
harpc-net.path                      = "libs/@local/harpc/net"
harpc-server.path                   = "libs/@local/harpc/server"
harpc-system.path                   = "libs/@local/harpc/system"
harpc-tower.path                    = "libs/@local/harpc/tower"
harpc-types.path                    = "libs/@local/harpc/types"
harpc-wire-protocol.path            = "libs/@local/harpc/wire-protocol"
hash-codec.path                     = "libs/@local/codec"
hash-codegen                        = "libs/@local/codegen"
hash-graph-api.path                 = "libs/@local/graph/api"
hash-graph-authorization.path       = "libs/@local/graph/authorization"
hash-graph-migrations.path          = "libs/@local/graph/migrations"
hash-graph-migrations-macros.path   = "libs/@local/graph/migrations-macros"
hash-graph-postgres-store.path      = "libs/@local/graph/postgres-store"
hash-graph-store.path               = "libs/@local/graph/store"
hash-graph-temporal-versioning.path = "libs/@local/graph/temporal-versioning"
hash-graph-test-data.path           = "tests/graph/test-data/rust"
hash-graph-test-server.path         = "libs/@local/graph/test-server"
hash-graph-type-defs.path           = "libs/@local/graph/type-defs"
hash-graph-type-fetcher.path        = "libs/@local/graph/type-fetcher"
hash-graph-types.path               = "libs/@local/graph/types/rust"
hash-graph-validation.path          = "libs/@local/graph/validation"
hash-repo-chores.path               = "libs/@local/repo-chores/rust"
hash-status.path                    = "libs/@local/status/rust"
hash-temporal-client.path           = "libs/@local/temporal-client"
hash-tracing.path                   = "libs/@local/tracing"
hashql-ast.path                     = "libs/@local/hashql/ast"
hashql-compiletest.path             = "libs/@local/hashql/compiletest"
hashql-core.path                    = "libs/@local/hashql/core"
hashql-diagnostics.path             = "libs/@local/hashql/diagnostics"
hashql-syntax-jexpr.path            = "libs/@local/hashql/syntax-jexpr"
type-system.path                    = "libs/@blockprotocol/type-system/rust"

# External dependencies
ada-url                  = { version = "=3.2.3", default-features = false }
ahash                    = { version = "=0.8.11", default-features = false }
ansi-to-html             = { version = "=0.2.2", default-features = false }
anstyle                  = { version = "=1.0.10", default-features = false }
anstyle-yansi            = { version = "=2.0.2", default-features = false }
approx                   = { version = "=0.5.1", default-features = false }
archery                  = { version = "=1.2.1", default-features = false }
ariadne                  = { version = "=0.5.1", default-features = false }
async-scoped             = { version = "=0.9.0", default-features = false }
async-trait              = { version = "=0.1.88", default-features = false }
aws-config               = { version = "=1.6.2" }
aws-sdk-s3               = { version = "=1.83.0", default-features = false }
aws-types                = { version = "=1.3.7", default-features = false }
axum                     = { version = "=0.7.5" }
axum-core                = { version = "=0.5.0" }
bitvec                   = { version = "=1.0.1", default-features = false }
bumpalo                  = { version = "=3.17.0", default-features = false }
bytes                    = { version = "=1.10.1" }
bytes-utils              = { version = "=0.1.4", default-features = false }
cargo_metadata           = { version = "=0.19.2", default-features = false }
cedar-policy-core        = { version = "=4.4.0", default-features = false }
cedar-policy-validator   = { version = "=4.4.0", default-features = false }
circular-buffer          = { version = "=1.1.0", default-features = false }
clap                     = { version = "=4.5.37", features = ["color", "error-context", "help", "std", "suggestions", "usage"] }
clap_builder             = { version = "=4.5.37", default-features = false, features = ["std"] }
clap_complete            = { version = "=4.5.47", default-features = false }
console_error_panic_hook = { version = "=0.1.7", default-features = false }
convert_case             = { version = "=0.8.0", default-features = false }
criterion                = { version = "=0.5.1" }
criterion-macro          = { version = "=0.4.0", default-features = false }
dashu-base               = { version = "=0.4.1", default-features = false }
dashu-float              = { version = "=0.4.3", default-features = false }
deadpool                 = { version = "=0.12.2", default-features = false }
deadpool-postgres        = { version = "=0.14.1", default-features = false }
derive-where             = { version = "=1.3.0", default-features = false, features = ["nightly"] }
derive_more              = { version = "=2.0.1", default-features = false }
dotenv-flow              = { version = "=0.16.2", default-features = false }
ecow                     = { version = "=0.2.5", default-features = false }
either                   = { version = "=1.15.0", default-features = false }
email_address            = { version = "=0.2.9", default-features = false }
ena                      = { version = "=0.14.3", default-features = false }
enum-iterator            = { version = "=2.1.0", default-features = false }
enumflags2               = { version = "=0.7.11", default-features = false }
erased-serde             = { version = "=0.4.6", default-features = false }
expect-test              = { version = "=1.5.1", default-features = false }
facet                    = { version = "0.18.0", default-features = false }
facet-core               = { version = "0.18.0", default-features = false }
foldhash                 = { version = "=0.1.5", default-features = false }
frunk                    = { version = "=0.4.3", default-features = false }
frunk_core               = { version = "=0.4.3", default-features = false }
futures                  = { version = "=0.3.31", default-features = false }
futures-channel          = { version = "=0.3.31", default-features = false }
futures-core             = { version = "=0.3.31", default-features = false }
futures-io               = { version = "=0.3.31", default-features = false }
futures-sink             = { version = "=0.3.31", default-features = false }
futures-util             = { version = "=0.3.31", default-features = false }
globset                  = { version = "=0.4.16", default-features = false }
hashbrown                = { version = "=0.15.2", default-features = false, features = ["inline-more", "nightly"] }
hifijson                 = { version = "=0.2.2", default-features = false }
http                     = { version = "=1.3.1", default-features = false }
humansize                = { version = "=2.1.3", default-features = false }
hyper                    = { version = "=1.6.0", default-features = false }
image                    = { version = "=0.25.6", default-features = false }
include_dir              = { version = "=0.7.4", default-features = false }
indoc                    = { version = "=2.0.6", default-features = false }
inferno                  = { version = "=0.12.2", default-features = false }
insta                    = { version = "=1.43.0", default-features = false }
iso8601-duration         = { version = "=0.2.0", default-features = false }
itertools                = { version = "=0.14.0", default-features = false }
json-number              = { version = "=0.4.9", default-features = false }
jsonptr                  = { version = "=0.7.1", default-features = false }
jsonschema               = { version = "=0.30.0", default-features = false }
justjson                 = { version = "=0.3.0", default-features = false }
lexical                  = { version = "=7.0.4", default-features = false }
libp2p                   = { version = "=0.55.0", default-features = false }
libp2p-core              = { version = "=0.43.0", default-features = false }
libp2p-identity          = { version = "=0.2.10", default-features = false }
libp2p-ping              = { version = "=0.46.0", default-features = false }
libp2p-stream            = { version = "=0.3.0-alpha", default-features = false }
libp2p-swarm             = { version = "=0.46.0", default-features = false }
libp2p-yamux             = { version = "=0.47.0", default-features = false }
logos                    = { version = "=0.15.0", default-features = false }
memchr                   = { version = "=2.7.4", default-features = false }
mimalloc                 = { version = "=0.1.46", default-features = false }
mime                     = { version = "=0.3.17", default-features = false }
multiaddr                = { version = "=0.18.2", default-features = false }
multistream-select       = { version = "=0.13.0", default-features = false }
napi                     = { version = "=2.16.17", default-features = false }
napi-build               = { version = "=2.1.6", default-features = false }
napi-derive              = { version = "=2.16.13", default-features = false }
num-traits               = { version = "=0.2.19", default-features = false }
opentelemetry            = { version = "=0.29.1", default-features = false }
opentelemetry-otlp       = { version = "=0.29.0", default-features = false }
opentelemetry_sdk        = { version = "=0.29.0", default-features = false }
orx-concurrent-vec       = { version = "=3.6.0", default-features = false }
owo-colors               = { version = "=4.2.0", default-features = false }
paste                    = { version = "=1.0.15", default-features = false }
pdfium-render            = { version = "=0.8.26" }
petgraph                 = { version = "=0.8.1", default-features = false }
pin-project              = { version = "=1.1.10", default-features = false }
pin-project-lite         = { version = "=0.2.16", default-features = false }
postgres-protocol        = { version = "=0.6.8", default-features = false }
postgres-types           = { version = "=0.2.9", default-features = false }
pretty                   = { version = "=0.12.4", default-features = false }
pretty_assertions        = { version = "=1.4.1", default-features = false, features = ["alloc"] }
proc-macro-error2        = { version = "=2.0.1", default-features = false }
proc-macro2              = { version = "=1.0.95", default-features = false }
prometheus-client        = { version = "=0.23.1", default-features = false }
proptest                 = { version = "=1.6.0", default-features = false, features = ["alloc", "std"] }                                                                                  # `std` or `no_std` are required, `no_std` pulls in `libm`
quote                    = { version = "=1.0.40", default-features = false }
rand                     = { version = "=0.9.1", default-features = false }
refinery                 = { version = "=0.8.16", default-features = false }
regex                    = { version = "=1.11.1", default-features = false, features = ["perf", "unicode"] }
reqwest                  = { version = "=0.12.15", default-features = false, features = ["rustls-tls"] }
roaring                  = { version = "=0.10.12", default-features = false }
rpds                     = { version = "=1.1.1", default-features = false }
rustc_version            = { version = "=0.4.1", default-features = false }
scc                      = { version = "=2.3.4", default-features = false }
semver                   = { version = "=1.0.26", default-features = false }
sentry                   = { version = "=0.37.0", default-features = false, features = ["backtrace", "contexts", "debug-images", "panic", "reqwest", "rustls", "tower-http", "tracing"] }
sentry-types             = { version = "=0.37.0", default-features = false }
seq-macro                = { version = "=0.3.6", default-features = false }
serde                    = { version = "=1.0.219", default-features = false }
serde_json               = { version = "=1.0.140" }
serde_plain              = { version = "=1.0.2", default-features = false }
serde_with               = { version = "=3.12.0", default-features = false }
sha2                     = { version = "=0.10.8", default-features = false }
similar-asserts          = { version = "=1.7.0", default-features = false }
simple-mermaid           = { version = "=0.2.0", default-features = false }
smallvec                 = { version = "=2.0.0-alpha.11", default-features = false }
smol_str                 = { version = "=0.3.2" }
supports-color           = { version = "=3.0.2", default-features = false }
supports-unicode         = { version = "=3.0.0", default-features = false }
syn                      = { version = "=2.0.101", default-features = false }
tachyonix                = { version = "=0.3.1", default-features = false }
tarpc                    = { version = "=0.36.0", default-features = false }
temporal-client          = { git = "https://github.com/temporalio/sdk-core", rev = "4a2368d" }
temporal-sdk-core-protos = { git = "https://github.com/temporalio/sdk-core", rev = "4a2368d" }
test-fuzz                = { version = "=7.1.1", default-features = false }
test-log                 = { version = "=0.2.17", default-features = false }
test-strategy            = { version = "=0.4.1", default-features = false }
text-size                = { version = "=1.1.1", default-features = false }
thiserror                = { version = "=2.0.12", default-features = false }
time                     = { version = "=0.3.41", default-features = false }
tokio                    = { version = "=1.44.2", default-features = false }
tokio-postgres           = { version = "=0.7.13", default-features = false }
tokio-stream             = { version = "=0.1.17", default-features = false }
tokio-test               = { version = "=0.4.4", default-features = false }
tokio-util               = { version = "=0.7.15", default-features = false }
tower                    = { version = "=0.5.2", default-features = false }
tower-http               = { version = "=0.6.2", features = ["trace"] }
tower-layer              = { version = "=0.3.3", default-features = false }
tower-service            = { version = "=0.3.3", default-features = false }
tower-test               = { version = "=0.4.0", default-features = false }
tracing                  = { version = "=0.1.41", default-features = false }
tracing-appender         = { version = "=0.2.3", default-features = false }
tracing-core             = { version = "=0.1.33", default-features = false }
tracing-error            = { version = "=0.2.1", default-features = false }
tracing-flame            = { version = "=0.2.0", default-features = false }
tracing-opentelemetry    = { version = "=0.30.0", default-features = false }
tracing-subscriber       = { version = "=0.3.19", default-features = false }
trait-variant            = { version = "=0.1.2", default-features = false }
trybuild                 = { version = "=1.0.104", default-features = false }
tsify-next               = { version = "=0.5.6", default-features = false }
unicode-ident            = { version = "=1.0.18", default-features = false }
unicode-normalization    = { version = "=0.1.24", default-features = false }
unicode-properties       = { version = "=0.1.3", default-features = false }
url                      = { version = "=2.5.4", default-features = false }
utoipa                   = { version = "=4.2.3", default-features = false }
uuid                     = { version = "=1.16.0", default-features = false }
walkdir                  = { version = "=2.5.0", default-features = false }
wasm-bindgen             = { version = "=0.2.100", default-features = false }
wasm-bindgen-test        = { version = "=0.3.50", default-features = false }
winnow                   = { version = "=0.7.7", default-features = false }

[profile.dev]
codegen-backend = "cranelift"

[profile.dev-llvm]
codegen-backend = "llvm"
inherits        = "dev"

# We use LLVM for non-workspace crates, mainly due to the lack of AVX2 support in Cranelift
[profile.dev.package."*"]
codegen-backend = "llvm"

[profile.test]
codegen-backend = "llvm"

# We use LLVM for non-workspace crates, mainly due to the lack of AVX2 support in Cranelift
[profile.test.package."*"]
codegen-backend = "llvm"

# We use `llvm-cov` which requires LLVM
[profile.coverage]
codegen-backend = "llvm"
inherits        = "test"

[profile.production]
inherits = "release"
lto      = "fat"
strip    = "none"

[workspace.lints.rust]
future_incompatible = { level = "warn", priority = -1 }
nonstandard_style   = { level = "warn", priority = -1 }

unreachable_pub = "warn"
unsafe_code     = "deny"

# TODO: Enable `cargo` lints when supported
# [workspace.lints.cargo]

[workspace.lints.clippy]
all         = { level = "warn", priority = -1 }
nursery     = { level = "warn", priority = -1 }
pedantic    = { level = "warn", priority = -1 }
restriction = { level = "warn", priority = -1 }

# Should be enabled:
absolute_paths                  = "allow"
allow_attributes_without_reason = "allow"
# With the current configuration option it's pretty much unusable. We'd like to
# use it for grouping in particular, but this comes with sorting by name as well.
# Needs to be further tested in a smaller scope.
arbitrary_source_item_ordering = "allow"
arithmetic_side_effects        = "allow"
as_conversions                 = "allow"
else_if_without_else           = "allow"
enum_variant_names             = "allow"
expect_used                    = "allow"
indexing_slicing               = "allow"
let_underscore_must_use        = "allow"
missing_assert_message         = "allow"
multiple_inherent_impl         = "allow"
panic                          = "allow"
partial_pub_fields             = "allow"
unwrap_in_result               = "allow"
wildcard_enum_match_arm        = "allow"

# Consider enabling:
default_numeric_fallback      = "allow"
impl_trait_in_params          = "allow"
iter_over_hash_type           = "allow"
multiple_unsafe_ops_per_block = "allow"
pattern_type_mismatch         = "allow"
shadow_unrelated              = "allow"
single_call_fn                = "allow"
single_char_lifetime_names    = "allow"
tests_outside_test_module     = "allow"
unimplemented                 = "allow"
unreachable                   = "allow"

# Does not apply to us:
blanket_clippy_restriction_lints = "allow"
exhaustive_enums                 = "allow"
exhaustive_structs               = "allow"
implicit_return                  = "allow"
missing_docs_in_private_items    = "allow"
missing_inline_in_public_items   = "allow"
missing_trait_methods            = "allow" # Should be enabled per `impl` instead of globally
mod_module_files                 = "allow" # Opposite of `clippy::self_named_module_files`
module_name_repetitions          = "allow"
pub_use                          = "allow"
pub_with_shorthand               = "allow" # Opposite of `clippy::pub_without_shorthand`
question_mark_used               = "allow"
redundant_pub_crate              = "allow" # Opposite of `unreachable_pub`
ref_patterns                     = "allow"
semicolon_outside_block          = "allow" # Opposite of `clippy::semicolon_inside_block`
separated_literal_suffix         = "allow" # Opposite of `clippy::unseparated_literal_suffix`
shadow_reuse                     = "allow"
shadow_same                      = "allow"
unneeded_field_pattern           = "allow" # Actually, the opposite would be a great lint

[workspace.metadata.cargo-shear]
# We use the `futures` crate but the dependencies are required for public dependencies
ignored = ["futures-core", "futures-io", "futures-sink"]
