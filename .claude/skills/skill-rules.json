{
  "version": "1.0",
  "description": "Skill activation triggers for HASH Claude Code. Controls when skills automatically suggest or block actions.",
  "skills": {
    "rust-error-stack": {
      "type": "domain",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Error handling patterns using error-stack crate for HASH Rust code",
      "promptTriggers": {
        "keywords": [
          "error handling",
          "error",
          "Result",
          "Report",
          "attach",
          "change_context",
          "error type",
          "define error",
          "propagate error",
          "error documentation"
        ],
        "intentPatterns": [
          "(handle|create|define|propagate).*?error",
          "(error|errors).*?(handling|propagation|definition|documentation)",
          "Result.*?Report"
        ]
      },
      "fileTriggers": {
        "pathPatterns": ["**/*.rs"],
        "contentPatterns": [
          "Result<",
          "Report<",
          "\\.attach",
          "\\.change_context",
          "error_stack::",
          "Error for"
        ]
      }
    },
    "cargo-dependencies": {
      "type": "domain",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Cargo.toml dependency management patterns for HASH workspace",
      "promptTriggers": {
        "keywords": [
          "cargo",
          "dependency",
          "dependencies",
          "Cargo.toml",
          "crate",
          "workspace dependency",
          "add dependency",
          "add crate",
          "public dependency",
          "dev-dependencies"
        ],
        "intentPatterns": [
          "add.*?(dependency|dependencies|crate)",
          "(cargo|Cargo\\.toml).*?(dependency|dependencies)",
          "workspace.*?dependency"
        ]
      },
      "fileTriggers": {
        "pathPatterns": ["**/Cargo.toml"],
        "contentPatterns": [
          "\\[dependencies\\]",
          "\\[dev-dependencies\\]",
          "workspace = true",
          "public = true"
        ]
      }
    },
    "writing-skills": {
      "type": "domain",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Meta-skill for creating and managing Claude Code skills in HASH repository",
      "promptTriggers": {
        "keywords": [
          "skill system",
          "create skill",
          "add skill",
          "new skill",
          "skill triggers",
          "skill rules",
          "skill-rules.json",
          "hook system",
          "skill development",
          "skill activation",
          "skill configuration",
          "SKILL.md",
          "skill best practices"
        ],
        "intentPatterns": [
          "(how do|how does|explain).*?skill",
          "(create|add|modify|build).*?skill",
          "skill.*?(work|trigger|activate|system|structure|template|pattern|configuration)",
          "(configure|setup|define).*?skill.*?(trigger|activation|rule)"
        ]
      },
      "fileTriggers": {
        "pathPatterns": [
          ".claude/skills/**/SKILL.md",
          ".claude/skills/skill-rules.json"
        ]
      }
    },
    "rust-documentation": {
      "type": "domain",
      "enforcement": "suggest",
      "priority": "high",
      "description": "Rust documentation practices for HASH codebase following rustdoc conventions",
      "promptTriggers": {
        "keywords": [
          "rust documentation",
          "doc comment",
          "doc comments",
          "rustdoc",
          "document rust",
          "documenting rust",
          "intra-doc link",
          "intra-doc links",
          "# Errors",
          "# Examples",
          "# Panics",
          "function documentation",
          "type documentation",
          "trait documentation",
          "module documentation"
        ],
        "intentPatterns": [
          "(write|add|create|update).*?(doc|documentation).*?(rust|function|type|trait|module)",
          "(document|documenting).*?(function|type|struct|enum|trait|module|error)",
          "how.*?(document|write docs).*?rust"
        ]
      },
      "fileTriggers": {
        "pathPatterns": ["**/*.rs"],
        "contentPatterns": [
          "^\\s*///",
          "^\\s*//!",
          "# Errors",
          "# Examples",
          "# Panics"
        ]
      }
    }
  },
  "notes": {
    "enforcement_types": {
      "suggest": "Skill suggestion appears but doesn't block execution",
      "block": "Requires skill to be used before proceeding (guardrail)",
      "warn": "Shows warning but allows proceeding"
    },
    "priority_levels": {
      "critical": "Highest - Always trigger when matched",
      "high": "Important - Trigger for most matches",
      "medium": "Moderate - Trigger for clear matches",
      "low": "Optional - Trigger only for explicit matches"
    },
    "customization": {
      "pathPatterns": "Adjust to match HASH project structure (libs/@local, apps/hash-*, etc.)",
      "keywords": "Add domain-specific terms relevant to HASH",
      "intentPatterns": "Use regex for flexible user intent matching"
    }
  }
}
