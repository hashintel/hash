thread 'rustc' panicked at /rustc-dev/839222065a44ac21c15df68ed2f2f3c0127b0b8e/compiler/rustc_query_system/src/query/plumbing.rs:739:9:
Found unstable fingerprints for lints_that_dont_need_to_run(0-0): UnordSet { inner: {LintId { lint: Lint { name: "RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES", default_level: Allow, desc: "detects closures affected by Rust 2021 changes", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "", reason: EditionSemanticsChange(Edition2021), explain_reason: false, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "NON_ASCII_IDENTS", default_level: Allow, desc: "detects non-ASCII identifiers", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: true, eval_always: false } }, LintId { lint: Lint { name: "RUST_2024_INCOMPATIBLE_PAT", default_level: Allow, desc: "detects patterns whose meaning will change in Rust 2024", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX", default_level: Allow, desc: "identifiers that will be parsed as a prefix in Rust 2021", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2021/reserving-syntax.html>", reason: EditionError(Edition2021), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: true, eval_always: false } }, LintId { lint: Lint { name: "clippy::NEGATIVE_FEATURE_NAMES", default_level: Allow, desc: "usage of a negative feature name", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::IMPL_TRAIT_IN_PARAMS", default_level: Allow, desc: "`impl Trait` is used in the function's parameters", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "ELIDED_LIFETIMES_IN_PATHS", default_level: Allow, desc: "hidden lifetime parameters in types are deprecated", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "SUPERTRAIT_ITEM_SHADOWING_DEFINITION", default_level: Allow, desc: "detects when a supertrait item is shadowed by a subtrait item", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("supertrait_item_shadowing"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::BLANKET_CLIPPY_RESTRICTION_LINTS", default_level: Warn, desc: "enabling the complete restriction group", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::MODULE_NAME_REPETITIONS", default_level: Allow, desc: "type names prefixed/postfixed with their containing module's name", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::MOD_MODULE_FILES", default_level: Allow, desc: "checks that module layout is consistent", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "KEYWORD_IDENTS_2024", default_level: Allow, desc: "detects edition keywords being used as an identifier", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/gen-keyword.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::LET_UNDERSCORE_MUST_USE", default_level: Allow, desc: "non-binding `let` on a `#[must_use]` expression", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MULTIPLE_SUPERTRAIT_UPCASTABLE", default_level: Allow, desc: "detect when a dyn-compatible trait has multiple supertraits", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("multiple_supertrait_upcastable"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNSTABLE_FEATURES", default_level: Allow, desc: "enabling unstable features", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "NON_EXHAUSTIVE_OMITTED_PATTERNS", default_level: Allow, desc: "detect when patterns of types marked `non_exhaustive` are missed", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("non_exhaustive_omitted_patterns_lint"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::PARTIAL_PUB_FIELDS", default_level: Allow, desc: "partial fields of a struct are public", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "FUZZY_PROVENANCE_CASTS", default_level: Allow, desc: "a fuzzy integer to pointer cast is used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("strict_provenance_lints"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::AS_CONVERSIONS", default_level: Allow, desc: "using a potentially dangerous silent `as` conversion", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "LINKER_MESSAGES", default_level: Allow, desc: "warnings emitted at runtime by the target-specific linker program", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "CLOSURE_RETURNING_ASYNC_BLOCK", default_level: Allow, desc: "closure that returns `async {}` could be rewritten as an async closure", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_QUALIFICATIONS", default_level: Allow, desc: "detects unnecessarily qualified names", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::MISSING_DOCS_IN_PRIVATE_ITEMS", default_level: Allow, desc: "detects missing documentation for private members", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::SINGLE_CHAR_LIFETIME_NAMES", default_level: Allow, desc: "warns against single-character lifetime names", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "TAIL_EXPR_DROP_ORDER", default_level: Allow, desc: "Detect and warn on significant change in drop order in tail expression location", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/temporary-tail-expr-scope.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2024_PRELUDE_COLLISIONS", default_level: Allow, desc: "detects the usage of trait methods which are ambiguous with traits added to the prelude in future editions", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/prelude.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::UNWRAP_IN_RESULT", default_level: Allow, desc: "functions of type `Result<..>` or `Option`<...> that contain `expect()` or `unwrap()`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "DEPRECATED_IN_FUTURE", default_level: Allow, desc: "detects use of items that will be deprecated in a future version", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2024_GUARDED_STRING_INCOMPATIBLE_SYNTAX", default_level: Allow, desc: "will be parsed as a guarded string in Rust 2024", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/reserved-syntax.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: true, eval_always: false } }, LintId { lint: Lint { name: "clippy::UNIMPLEMENTED", default_level: Allow, desc: "`unimplemented!` should not be present in production code", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::SHADOW_SAME", default_level: Allow, desc: "rebinding a name to itself, e.g., `let mut x = &mut x`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::TESTS_OUTSIDE_TEST_MODULE", default_level: Allow, desc: "A test function is outside the testing module.", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::PUB_WITH_SHORTHAND", default_level: Allow, desc: "disallows usage of `pub(<loc>)`, without `in`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::WILDCARD_DEPENDENCIES", default_level: Allow, desc: "wildcard dependencies being used", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MISSING_DEBUG_IMPLEMENTATIONS", default_level: Allow, desc: "detects missing implementations of Debug", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::ALLOW_ATTRIBUTES_WITHOUT_REASON", default_level: Allow, desc: "ensures that all `allow` and `expect` attributes have a reason", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::SINGLE_CALL_FN", default_level: Allow, desc: "checks for functions that are only used once", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MISSING_UNSAFE_ON_EXTERN", default_level: Allow, desc: "detects missing unsafe keyword on extern declarations", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-extern.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2021_INCOMPATIBLE_OR_PATTERNS", default_level: Allow, desc: "detects usage of old versions of or-patterns", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2021/or-patterns-macro-rules.html>", reason: EditionError(Edition2021), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::EXHAUSTIVE_STRUCTS", default_level: Allow, desc: "detects exported structs that have not been marked #[non_exhaustive]", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "KEYWORD_IDENTS_2018", default_level: Allow, desc: "detects edition keywords being used as an identifier", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "issue #49716 <https://github.com/rust-lang/rust/issues/49716>", reason: EditionError(Edition2018), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::ARITHMETIC_SIDE_EFFECTS", default_level: Allow, desc: "any arithmetic expression that can cause side effects like overflows or panics", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNNAMEABLE_TYPES", default_level: Allow, desc: "effective visibility of a type is larger than the area in which it can be named", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MACRO_USE_EXTERN_CRATE", default_level: Allow, desc: "the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "DEREF_INTO_DYN_SUPERTRAIT", default_level: Allow, desc: "`Deref` implementation with a supertrait trait object for output is shadowed by trait upcasting", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::UNNEEDED_FIELD_PATTERN", default_level: Allow, desc: "struct fields bound to a wildcard instead of using `..`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::ABSOLUTE_PATHS", default_level: Allow, desc: "checks for usage of an item without a `use` statement", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNIT_BINDINGS", default_level: Allow, desc: "binding is useless because it has the unit `()` type", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::DEFAULT_NUMERIC_FALLBACK", default_level: Allow, desc: "usage of unconstrained numeric literals which may cause default numeric fallback.", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_IMPORT_BRACES", default_level: Allow, desc: "unnecessary braces around an imported item", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_RESULTS", default_level: Allow, desc: "unused result of an expression in a statement", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2021_PRELUDE_COLLISIONS", default_level: Allow, desc: "detects the usage of trait methods which are ambiguous with traits added to the prelude in future editions", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2021/prelude.html>", reason: EditionError(Edition2021), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "SINGLE_USE_LIFETIMES", default_level: Allow, desc: "detects lifetime parameters that are only used once", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::MULTIPLE_INHERENT_IMPL", default_level: Allow, desc: "Multiple inherent impl that could be grouped", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::IMPLICIT_RETURN", default_level: Allow, desc: "use a return statement like `return expr` instead of an expression", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::UNREACHABLE", default_level: Allow, desc: "usage of the `unreachable!` macro", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "REDUNDANT_LIFETIMES", default_level: Allow, desc: "detects lifetime parameters that are redundant because they are equal to some other named lifetime", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::REDUNDANT_FEATURE_NAMES", default_level: Allow, desc: "usage of a redundant feature name", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_MACRO_RULES", default_level: Allow, desc: "detects macro rules that were not used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_CRATE_DEPENDENCIES", default_level: Allow, desc: "crate dependencies that are never used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: true, eval_always: false } }, LintId { lint: Lint { name: "ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE", default_level: Allow, desc: "fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "issue #53130 <https://github.com/rust-lang/rust/issues/53130>", reason: EditionError(Edition2018), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::CARGO_COMMON_METADATA", default_level: Allow, desc: "common metadata is defined in `Cargo.toml`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::EXPECT_USED", default_level: Allow, desc: "using `.expect()` on `Result` or `Option`, which might be better handled", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::PATTERN_TYPE_MISMATCH", default_level: Allow, desc: "type of pattern does not match the expression type", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::REDUNDANT_PUB_CRATE", default_level: Allow, desc: "Using `pub(crate)` visibility on items that are not crate visible due to the visibility of the module that contains them.", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::MISSING_INLINE_IN_PUBLIC_ITEMS", default_level: Allow, desc: "detects missing `#[inline]` attribute for public callables (functions, trait methods, methods...)", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "AMBIGUOUS_NEGATIVE_LITERALS", default_level: Allow, desc: "ambiguous negative literals operations", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::EXHAUSTIVE_ENUMS", default_level: Allow, desc: "detects exported enums that have not been marked #[non_exhaustive]", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNQUALIFIED_LOCAL_IMPORTS", default_level: Allow, desc: "`use` of a local item without leading `self::`, `super::`, or `crate::`", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("unqualified_local_imports"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MUST_NOT_SUSPEND", default_level: Allow, desc: "use of a `#[must_not_suspend]` value across a yield point", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("must_not_suspend"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "LOSSY_PROVENANCE_CASTS", default_level: Allow, desc: "a lossy pointer to integer cast is used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("strict_provenance_lints"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "SUPERTRAIT_ITEM_SHADOWING_USAGE", default_level: Allow, desc: "detects when a supertrait item is shadowed by a subtrait item", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("supertrait_item_shadowing"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "IMPL_TRAIT_OVERCAPTURES", default_level: Allow, desc: "`impl Trait` will capture more lifetimes than possibly intended in edition 2024", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/rpit-lifetime-capture.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "LET_UNDERSCORE_DROP", default_level: Allow, desc: "non-binding let on a type that has a destructor", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "EXPLICIT_OUTLIVES_REQUIREMENTS", default_level: Allow, desc: "outlives requirements can be inferred", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::MULTIPLE_UNSAFE_OPS_PER_BLOCK", default_level: Allow, desc: "more than one unsafe operation per `unsafe` block", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "VARIANT_SIZE_DIFFERENCES", default_level: Allow, desc: "detects enums with widely varying variant sizes", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MISSING_DOCS", default_level: Allow, desc: "detects missing documentation for public members", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "TRIVIAL_NUMERIC_CASTS", default_level: Allow, desc: "detects trivial casts of numeric types which could be removed", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_EXTERN_CRATES", default_level: Allow, desc: "extern crates that are never used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::PUB_USE", default_level: Allow, desc: "restricts the usage of `pub use`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "META_VARIABLE_MISUSE", default_level: Allow, desc: "possible meta-variable misuse at macro definition", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::PANIC", default_level: Allow, desc: "usage of the `panic!` macro", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::SEMICOLON_OUTSIDE_BLOCK", default_level: Allow, desc: "add a semicolon outside the block", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::SHADOW_UNRELATED", default_level: Allow, desc: "rebinding a name without even using the original value", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNSAFE_ATTR_OUTSIDE_UNSAFE", default_level: Allow, desc: "detects unsafe attributes outside of unsafe", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-attributes.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::ITER_OVER_HASH_TYPE", default_level: Allow, desc: "iterating over unordered hash-based types (`HashMap` and `HashSet`)", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::MULTIPLE_CRATE_VERSIONS", default_level: Allow, desc: "multiple versions of the same crate being used", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::REF_PATTERNS", default_level: Allow, desc: "use of a ref pattern, e.g. Some(ref value)", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MISSING_COPY_IMPLEMENTATIONS", default_level: Allow, desc: "detects potentially-forgotten implementations of `Copy`", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::MISSING_ASSERT_MESSAGE", default_level: Allow, desc: "checks assertions without a custom panic message", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "REDUNDANT_IMPORTS", default_level: Allow, desc: "imports that are redundant due to being imported already", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::QUESTION_MARK_USED", default_level: Allow, desc: "checks if the `?` operator is used", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "EDITION_2024_EXPR_FRAGMENT_SPECIFIER", default_level: Allow, desc: "The `expr` fragment specifier will accept more expressions in the 2024 edition. To keep the existing behavior, use the `expr_2021` fragment specifier.", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "Migration Guide <https://doc.rust-lang.org/edition-guide/rust-2024/macro-fragment-specifiers.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_LIFETIMES", default_level: Allow, desc: "detects lifetime parameters that are never used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::SEPARATED_LITERAL_SUFFIX", default_level: Allow, desc: "literals whose suffix is separated by an underscore", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "FFI_UNWIND_CALLS", default_level: Allow, desc: "call to foreign functions or function pointers with FFI-unwind ABI", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "IF_LET_RESCOPE", default_level: Allow, desc: "`if let` assigns a shorter lifetime to temporary values being pattern-matched against in Edition 2024 and rewriting in `match` is an option to preserve the semantics up to Edition 2021", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/temporary-if-let-scope.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::ARBITRARY_SOURCE_ITEM_ORDERING", default_level: Allow, desc: "arbitrary source item ordering", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "IMPL_TRAIT_REDUNDANT_CAPTURES", default_level: Allow, desc: "redundant precise-capturing `use<...>` syntax on an `impl Trait`", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "TRIVIAL_CASTS", default_level: Allow, desc: "detects trivial casts which could be removed", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "DEPRECATED_SAFE_2024", default_level: Allow, desc: "detects unsafe functions being used as safe functions", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/newly-unsafe-functions.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::MISSING_TRAIT_METHODS", default_level: Allow, desc: "trait implementation uses default provided method", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "clippy::SHADOW_REUSE", default_level: Allow, desc: "rebinding a name to an expression that reuses the original value, e.g., `let x = x + 1`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }} }
stack backtrace:
   0:        0x111e72358 - std::backtrace::Backtrace::create::h1191c58fd1a88d3f
   1:        0x10fe8abf4 - std[c596dd8289943069]::panicking::update_hook::<alloc[8e4cc986875c46d6]::boxed::Box<rustc_driver_impl[1361f1fb3b81c8f5]::install_ice_hook::{closure#1}>>::{closure#0}
   2:        0x111e73284 - std::panicking::panic_with_hook::h0407c1d1eb31be34
   3:        0x111e72f34 - std::panicking::panic_handler::{{closure}}::ha652ee60c7095e62
   4:        0x111e6c5c8 - std::sys::backtrace::__rust_end_short_backtrace::hfab76c66df7b3f4f
   5:        0x111e50bf8 - __rustc[38e0a62eac12ee08]::rust_begin_unwind
   6:        0x114bda058 - core::panicking::panic_fmt::hf477297641b9ef92
   7:        0x114c9fc60 - rustc_query_system[686166cc3e1519eb]::query::plumbing::incremental_verify_ich_failed::<rustc_middle[77ecb329a6274e31]::ty::context::TyCtxt>
   8:        0x1113fcec4 - rustc_query_system[686166cc3e1519eb]::query::plumbing::incremental_verify_ich::<rustc_middle[77ecb329a6274e31]::ty::context::TyCtxt, rustc_middle[77ecb329a6274e31]::query::erase::Erased<[u8; 8usize]>>
   9:        0x11137daf0 - rustc_query_system[686166cc3e1519eb]::query::plumbing::try_execute_query::<rustc_query_impl[c37641ad2e09e5ac]::DynamicConfig<rustc_query_system[686166cc3e1519eb]::query::caches::SingleCache<rustc_middle[77ecb329a6274e31]::query::erase::Erased<[u8; 8usize]>>, false, false, false>, rustc_query_impl[c37641ad2e09e5ac]::plumbing::QueryCtxt, true>
  10:        0x1114dea38 - rustc_query_impl[c37641ad2e09e5ac]::query_impl::lints_that_dont_need_to_run::get_query_incr::__rust_end_short_backtrace
  11:        0x1108afe18 - rustc_lint[68db60aac39fe0b2]::late::check_crate::{closure#0}
  12:        0x1108de120 - rustc_lint[68db60aac39fe0b2]::late::check_crate
  13:        0x1107610bc - rustc_interface[909ed7fe4859ae05]::passes::analysis::{closure#0}
  14:        0x11078aff8 - rustc_interface[909ed7fe4859ae05]::passes::analysis
  15:        0x111357864 - rustc_query_impl[c37641ad2e09e5ac]::plumbing::__rust_begin_short_backtrace::<rustc_query_impl[c37641ad2e09e5ac]::query_impl::analysis::dynamic_query::{closure#2}::{closure#0}, rustc_middle[77ecb329a6274e31]::query::erase::Erased<[u8; 0usize]>>
  16:        0x111374004 - rustc_query_system[686166cc3e1519eb]::query::plumbing::try_execute_query::<rustc_query_impl[c37641ad2e09e5ac]::DynamicConfig<rustc_query_system[686166cc3e1519eb]::query::caches::SingleCache<rustc_middle[77ecb329a6274e31]::query::erase::Erased<[u8; 0usize]>>, false, false, false>, rustc_query_impl[c37641ad2e09e5ac]::plumbing::QueryCtxt, true>
  17:        0x1114e7d7c - rustc_query_impl[c37641ad2e09e5ac]::query_impl::analysis::get_query_incr::__rust_end_short_backtrace
  18:        0x10fe7a778 - rustc_interface[909ed7fe4859ae05]::passes::create_and_enter_global_ctxt::<core[1e1ae767f76bfe86]::option::Option<rustc_interface[909ed7fe4859ae05]::queries::Linker>, rustc_driver_impl[1361f1fb3b81c8f5]::run_compiler::{closure#0}::{closure#2}>
  19:        0x10fe88fc8 - rustc_interface[909ed7fe4859ae05]::interface::run_compiler::<(), rustc_driver_impl[1361f1fb3b81c8f5]::run_compiler::{closure#0}>::{closure#1}
  20:        0x10fe7d648 - std[c596dd8289943069]::sys::backtrace::__rust_begin_short_backtrace::<rustc_interface[909ed7fe4859ae05]::util::run_in_thread_with_globals<rustc_interface[909ed7fe4859ae05]::util::run_in_thread_pool_with_globals<rustc_interface[909ed7fe4859ae05]::interface::run_compiler<(), rustc_driver_impl[1361f1fb3b81c8f5]::run_compiler::{closure#0}>::{closure#1}, ()>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>
  21:        0x10fe8f808 - <<std[c596dd8289943069]::thread::Builder>::spawn_unchecked_<rustc_interface[909ed7fe4859ae05]::util::run_in_thread_with_globals<rustc_interface[909ed7fe4859ae05]::util::run_in_thread_pool_with_globals<rustc_interface[909ed7fe4859ae05]::interface::run_compiler<(), rustc_driver_impl[1361f1fb3b81c8f5]::run_compiler::{closure#0}>::{closure#1}, ()>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>::{closure#1} as core[1e1ae767f76bfe86]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}
  22:        0x111e68fb4 - std::sys::thread::unix::Thread::new::thread_start::h8e434ea001a83201
  23:        0x1852f3c0c - __pthread_cond_wait


rustc version: 1.92.0-nightly (839222065 2025-10-05)
platform: aarch64-apple-darwin

query stack during panic:
#0 [lints_that_dont_need_to_run] Computing all lints that are explicitly enabled or with a default level greater than Allow
#1 [analysis] running analysis passes on this crate
end of query stack
