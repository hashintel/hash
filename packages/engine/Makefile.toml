extend = { path = "../../.github/scripts/rust/Makefile.toml" }

[env]
CARGO_HACK_FLAGS = "--feature-powerset --features build-nng --exclude-features default --ignore-unknown-features --optional-deps clap"

[tasks.default]
alias = "run"

# The `test` task will execute these task in the folloing order:
#  1. Run unit tests
#  2. Build the test dependencies (CI only)
#  3. Setup python (CI only)
#  4. Run the integration tests
# This workaround is needed as `tasks.setup-python` must only be executed from the workspace root, so `tasks.test` has
# `workspace` set to `false`.

[tasks.test]
clear = true
workspace = false
description = "Runs the test suite"
category = "Test"
run_task = { name = ["run-test-suite", "run-integrations"] }

[tasks.build-test-deps]
condition = { env_true = ["CARGO_MAKE_CI" ] }
private = true
extend = "build"
args = ["build", "-p", "memory", "--profile", "${CARGO_MAKE_CARGO_PROFILE}"]

[tasks.setup-python]
condition = { env_true = ["CARGO_MAKE_CI" ] }
private = true
command = "bash"
args = ["lib/execution/src/runner/python/setup.sh", "python3.7"]
dependencies = ["build-test-deps"]

[tasks.run-test-suite]
private = true
run_task = { name = "run-tests", fork = true }

[tasks.run-tests]
private = true
command = "cargo"
args = ["hack", "test", "--no-fail-fast", "@@split(CARGO_HACK_FLAGS, )", "--profile", "${CARGO_MAKE_CARGO_PROFILE}"]

[tasks.run-integrations]
private = true
command = "cargo"
args = ["test", "--workspace", "--test", "integration", "--no-fail-fast", "--profile", "${CARGO_MAKE_CARGO_PROFILE}", "--all-features"]
dependencies = ["setup-python"]


# Rustdoc must not be executed on the workspace root.
[tasks.doc-task-ci-public]
condition = { env_false = ["CARGO_MAKE_CRATE_IS_WORKSPACE"] }

[tasks.doc-task-ci-private]
condition = { env_false = ["CARGO_MAKE_CRATE_IS_WORKSPACE"] }
