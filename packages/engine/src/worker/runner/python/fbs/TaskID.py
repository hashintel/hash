# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TaskId(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 16

    # TaskId
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TaskId
    def Inner(self): return [self._tab.Get(flatbuffers.number_types.Int8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0 + i * 1)) for i in range(16)]
    # TaskId
    def InnerLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(0))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskId
    def InnerIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(0))
        return o == 0


def CreateTaskId(builder, inner):
    builder.Prep(1, 16)
    for _idx0 in range(16 , 0, -1):
        builder.PrependInt8(inner[_idx0-1])
    return builder.Offset()
