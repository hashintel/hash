include "serialized.fbs";
include "sync_context_batch.fbs";
include "sync_state_interim.fbs";
include "sync_state_snapshot.fbs";
include "sync_state.fbs";
include "new_simulation_run.fbs";

// A Task UUID
//
// This is duplicated in multiple files since it is a struct
// and cannot be a root type.
//
// fields:
//    `inner` : the uuid as bytes 
struct TaskId {
  inner:[byte:16];
}

// A task message for a Task (run by a package) 
// which is inbound to a worker.
//
// fields:
//    `package_sid`    : the short id for the packge
//    `task_id`        : the uuid for the task
//    `metaversioning` : included when any batches have changed
//                       (possibly since the last `StateSync`)
//    `payload`        : payload for the task message (json)
table TaskMsg {
  package_sid:uint64;
  task_id:TaskId;
  metaversioning:StateInterimSync;
  payload:Serialized (required);
}

// A message for a Task (run by a package) to be cancelled
//
// fields:
//    `task_id`        : the uuid for the task
table CancelTask {
  task_id:TaskId;
}

// `TerminateRunner` Message Body Type.
//
// Used by the engine process to signal language runners to exit their process
table TerminateRunner {}

// `TerminateSimulationRun` Message Body Type.
//
// Used by the engine to signal language runners to terminate a simulation
// run.
table TerminateSimulationRun {}

// The payload for the `RunnerInboundMsg` type
//
// There is a collection of built-in types. When building
// packages and adding Tasks, the TaskMsg type can be used
// to add new payload types.
union RunnerInboundMsgPayload {
  TaskMsg,
  CancelTask,
  StateSync,
  StateSnapshotSync,
  ContextBatchSync,
  StateInterimSync,
  TerminateSimulationRun,
  TerminateRunner,
  NewSimulationRun
}

// The top-level message sent between the runners and the engine
//
// May be a simulation run specific, but when sim_sid=0, it is
// a top-level message.
//
// fields:string
//    `sim_sid` : short simulation id
//    `payload` : payload for the message
table RunnerInboundMsg {
  sim_sid:uint = 0;
  payload:RunnerInboundMsgPayload (required);
}

root_type RunnerInboundMsg;
