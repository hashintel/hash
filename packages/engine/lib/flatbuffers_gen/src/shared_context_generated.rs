#![allow(
    clippy::module_name_repetitions,
    clippy::must_use_candidate,
    clippy::cast_sign_loss,
    clippy::empty_enum,
    clippy::used_underscore_binding,
    clippy::redundant_static_lifetimes,
    clippy::redundant_field_names,
    unused_imports
)]
// automatically generated by the FlatBuffers compiler, do not modify

use std::{cmp::Ordering, mem};

use super::{batch_generated::*, metaversion_generated::*};

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum SharedContextOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SharedContext<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SharedContext<'a> {
    type Inner = SharedContext<'a>;

    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf, loc },
        }
    }
}

impl<'a> SharedContext<'a> {
    pub const VT_DATASETS: flatbuffers::VOffsetT = 4;

    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SharedContext { _tab: table }
    }

    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SharedContextArgs<'args>,
    ) -> flatbuffers::WIPOffset<SharedContext<'bldr>> {
        let mut builder = SharedContextBuilder::new(_fbb);
        if let Some(x) = args.datasets {
            builder.add_datasets(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn datasets(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Batch<'a>>> {
        self._tab
            .get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Batch>>,
            >>(SharedContext::VT_DATASETS, None)
            .unwrap()
    }
}

impl flatbuffers::Verifiable for SharedContext<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Batch>>,
            >>(&"datasets", Self::VT_DATASETS, true)?
            .finish();
        Ok(())
    }
}
pub struct SharedContextArgs<'a> {
    pub datasets: Option<
        flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Batch<'a>>>>,
    >,
}
impl<'a> Default for SharedContextArgs<'a> {
    #[inline]
    fn default() -> Self {
        SharedContextArgs {
            datasets: None, // required field
        }
    }
}
pub struct SharedContextBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SharedContextBuilder<'a, 'b> {
    #[inline]
    pub fn add_datasets(
        &mut self,
        datasets: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Batch<'b>>>,
        >,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(SharedContext::VT_DATASETS, datasets);
    }

    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SharedContextBuilder<'a, 'b> {
        let start = _fbb.start_table();
        SharedContextBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }

    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<SharedContext<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_
            .required(o, SharedContext::VT_DATASETS, "datasets");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl std::fmt::Debug for SharedContext<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut ds = f.debug_struct("SharedContext");
        ds.field("datasets", &self.datasets());
        ds.finish()
    }
}
