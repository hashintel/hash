#![allow(
    clippy::module_name_repetitions,
    clippy::must_use_candidate,
    clippy::cast_sign_loss,
    clippy::empty_enum,
    clippy::used_underscore_binding,
    clippy::redundant_static_lifetimes,
    clippy::redundant_field_names,
    unused_imports
)]
// automatically generated by the FlatBuffers compiler, do not modify

use std::{cmp::Ordering, mem};

use super::{batch_generated::*, metaversion_generated::*};

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum ContextBatchSyncOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContextBatchSync<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContextBatchSync<'a> {
    type Inner = ContextBatchSync<'a>;

    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf, loc },
        }
    }
}

impl<'a> ContextBatchSync<'a> {
    pub const VT_CONTEXT_BATCH: flatbuffers::VOffsetT = 4;
    pub const VT_CURRENT_STEP: flatbuffers::VOffsetT = 6;

    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ContextBatchSync { _tab: table }
    }

    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ContextBatchSyncArgs<'args>,
    ) -> flatbuffers::WIPOffset<ContextBatchSync<'bldr>> {
        let mut builder = ContextBatchSyncBuilder::new(_fbb);
        builder.add_current_step(args.current_step);
        if let Some(x) = args.context_batch {
            builder.add_context_batch(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn context_batch(&self) -> Batch<'a> {
        self._tab
            .get::<flatbuffers::ForwardsUOffset<Batch>>(ContextBatchSync::VT_CONTEXT_BATCH, None)
            .unwrap()
    }

    #[inline]
    pub fn current_step(&self) -> i64 {
        self._tab
            .get::<i64>(ContextBatchSync::VT_CURRENT_STEP, Some(0))
            .unwrap()
    }
}

impl flatbuffers::Verifiable for ContextBatchSync<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<Batch>>(
                &"context_batch",
                Self::VT_CONTEXT_BATCH,
                true,
            )?
            .visit_field::<i64>(&"current_step", Self::VT_CURRENT_STEP, false)?
            .finish();
        Ok(())
    }
}
pub struct ContextBatchSyncArgs<'a> {
    pub context_batch: Option<flatbuffers::WIPOffset<Batch<'a>>>,
    pub current_step: i64,
}
impl<'a> Default for ContextBatchSyncArgs<'a> {
    #[inline]
    fn default() -> Self {
        ContextBatchSyncArgs {
            context_batch: None, // required field
            current_step: 0,
        }
    }
}
pub struct ContextBatchSyncBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ContextBatchSyncBuilder<'a, 'b> {
    #[inline]
    pub fn add_context_batch(&mut self, context_batch: flatbuffers::WIPOffset<Batch<'b>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Batch>>(
            ContextBatchSync::VT_CONTEXT_BATCH,
            context_batch,
        );
    }

    #[inline]
    pub fn add_current_step(&mut self, current_step: i64) {
        self.fbb_
            .push_slot::<i64>(ContextBatchSync::VT_CURRENT_STEP, current_step, 0);
    }

    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> ContextBatchSyncBuilder<'a, 'b> {
        let start = _fbb.start_table();
        ContextBatchSyncBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }

    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<ContextBatchSync<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_
            .required(o, ContextBatchSync::VT_CONTEXT_BATCH, "context_batch");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl std::fmt::Debug for ContextBatchSync<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut ds = f.debug_struct("ContextBatchSync");
        ds.field("context_batch", &self.context_batch());
        ds.field("current_step", &self.current_step());
        ds.finish()
    }
}
#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_context_batch_sync<'a>(buf: &'a [u8]) -> ContextBatchSync<'a> {
    unsafe { flatbuffers::root_unchecked::<ContextBatchSync<'a>>(buf) }
}

#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_context_batch_sync<'a>(buf: &'a [u8]) -> ContextBatchSync<'a> {
    unsafe { flatbuffers::size_prefixed_root_unchecked::<ContextBatchSync<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `ContextBatchSync`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_context_batch_sync_unchecked`.
pub fn root_as_context_batch_sync(
    buf: &[u8],
) -> Result<ContextBatchSync, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<ContextBatchSync>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ContextBatchSync` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_context_batch_sync_unchecked`.
pub fn size_prefixed_root_as_context_batch_sync(
    buf: &[u8],
) -> Result<ContextBatchSync, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<ContextBatchSync>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ContextBatchSync` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_context_batch_sync_unchecked`.
pub fn root_as_context_batch_sync_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<ContextBatchSync<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<ContextBatchSync<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ContextBatchSync` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_context_batch_sync_unchecked`.
pub fn size_prefixed_root_as_context_batch_sync_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<ContextBatchSync<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<ContextBatchSync<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ContextBatchSync and returns
/// it. # Safety
/// Callers must trust the given bytes do indeed contain a valid `ContextBatchSync`.
pub unsafe fn root_as_context_batch_sync_unchecked(buf: &[u8]) -> ContextBatchSync {
    flatbuffers::root_unchecked::<ContextBatchSync>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ContextBatchSync
/// and returns it. # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ContextBatchSync`.
pub unsafe fn size_prefixed_root_as_context_batch_sync_unchecked(buf: &[u8]) -> ContextBatchSync {
    flatbuffers::size_prefixed_root_unchecked::<ContextBatchSync>(buf)
}
#[inline]
pub fn finish_context_batch_sync_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ContextBatchSync<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_context_batch_sync_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ContextBatchSync<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
