#![allow(
    clippy::module_name_repetitions,
    clippy::must_use_candidate,
    clippy::cast_sign_loss,
    clippy::empty_enum,
    clippy::used_underscore_binding,
    clippy::redundant_static_lifetimes,
    clippy::redundant_field_names,
    unused_imports
)]
// automatically generated by the FlatBuffers compiler, do not modify

use std::{cmp::Ordering, mem};

use super::metaversion_generated::*;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum BatchOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Batch<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Batch<'a> {
    type Inner = Batch<'a>;

    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf, loc },
        }
    }
}

impl<'a> Batch<'a> {
    pub const VT_BATCH_ID: flatbuffers::VOffsetT = 4;
    pub const VT_METAVERSION: flatbuffers::VOffsetT = 6;

    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Batch { _tab: table }
    }

    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BatchArgs<'args>,
    ) -> flatbuffers::WIPOffset<Batch<'bldr>> {
        let mut builder = BatchBuilder::new(_fbb);
        if let Some(x) = args.metaversion {
            builder.add_metaversion(x);
        }
        if let Some(x) = args.batch_id {
            builder.add_batch_id(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn batch_id(&self) -> &'a str {
        self._tab
            .get::<flatbuffers::ForwardsUOffset<&str>>(Batch::VT_BATCH_ID, None)
            .unwrap()
    }

    #[inline]
    pub fn metaversion(&self) -> Metaversion<'a> {
        self._tab
            .get::<flatbuffers::ForwardsUOffset<Metaversion>>(Batch::VT_METAVERSION, None)
            .unwrap()
    }
}

impl flatbuffers::Verifiable for Batch<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                &"batch_id",
                Self::VT_BATCH_ID,
                true,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<Metaversion>>(
                &"metaversion",
                Self::VT_METAVERSION,
                true,
            )?
            .finish();
        Ok(())
    }
}
pub struct BatchArgs<'a> {
    pub batch_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub metaversion: Option<flatbuffers::WIPOffset<Metaversion<'a>>>,
}
impl<'a> Default for BatchArgs<'a> {
    #[inline]
    fn default() -> Self {
        BatchArgs {
            batch_id: None,    // required field
            metaversion: None, // required field
        }
    }
}
pub struct BatchBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BatchBuilder<'a, 'b> {
    #[inline]
    pub fn add_batch_id(&mut self, batch_id: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(Batch::VT_BATCH_ID, batch_id);
    }

    #[inline]
    pub fn add_metaversion(&mut self, metaversion: flatbuffers::WIPOffset<Metaversion<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<Metaversion>>(
                Batch::VT_METAVERSION,
                metaversion,
            );
    }

    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BatchBuilder<'a, 'b> {
        let start = _fbb.start_table();
        BatchBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }

    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<Batch<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_.required(o, Batch::VT_BATCH_ID, "batch_id");
        self.fbb_.required(o, Batch::VT_METAVERSION, "metaversion");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl std::fmt::Debug for Batch<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut ds = f.debug_struct("Batch");
        ds.field("batch_id", &self.batch_id());
        ds.field("metaversion", &self.metaversion());
        ds.finish()
    }
}
#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_batch<'a>(buf: &'a [u8]) -> Batch<'a> {
    unsafe { flatbuffers::root_unchecked::<Batch<'a>>(buf) }
}

#[inline]
#[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_batch<'a>(buf: &'a [u8]) -> Batch<'a> {
    unsafe { flatbuffers::size_prefixed_root_unchecked::<Batch<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Batch`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_batch_unchecked`.
pub fn root_as_batch(buf: &[u8]) -> Result<Batch, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<Batch>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Batch` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_batch_unchecked`.
pub fn size_prefixed_root_as_batch(buf: &[u8]) -> Result<Batch, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<Batch>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Batch` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_batch_unchecked`.
pub fn root_as_batch_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<Batch<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<Batch<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Batch` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_batch_unchecked`.
pub fn size_prefixed_root_as_batch_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<Batch<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<Batch<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Batch and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Batch`.
pub unsafe fn root_as_batch_unchecked(buf: &[u8]) -> Batch {
    flatbuffers::root_unchecked::<Batch>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Batch and returns
/// it. # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Batch`.
pub unsafe fn size_prefixed_root_as_batch_unchecked(buf: &[u8]) -> Batch {
    flatbuffers::size_prefixed_root_unchecked::<Batch>(buf)
}
#[inline]
pub fn finish_batch_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Batch<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_batch_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Batch<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
