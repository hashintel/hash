# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StateInterimSync(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StateInterimSync()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStateInterimSync(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StateInterimSync
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StateInterimSync
    def GroupIdx(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # StateInterimSync
    def GroupIdxAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # StateInterimSync
    def GroupIdxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StateInterimSync
    def GroupIdxIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StateInterimSync
    def AgentBatches(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Batch import Batch
            obj = Batch()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StateInterimSync
    def AgentBatchesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StateInterimSync
    def AgentBatchesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StateInterimSync
    def MessageBatches(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Batch import Batch
            obj = Batch()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StateInterimSync
    def MessageBatchesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StateInterimSync
    def MessageBatchesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def Start(builder): builder.StartObject(3)
def StateInterimSyncStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddGroupIdx(builder, groupIdx): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupIdx), 0)
def StateInterimSyncAddGroupIdx(builder, groupIdx):
    """This method is deprecated. Please switch to AddGroupIdx."""
    return AddGroupIdx(builder, groupIdx)
def StartGroupIdxVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StateInterimSyncStartGroupIdxVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartGroupIdxVector(builder, numElems)
def AddAgentBatches(builder, agentBatches): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(agentBatches), 0)
def StateInterimSyncAddAgentBatches(builder, agentBatches):
    """This method is deprecated. Please switch to AddAgentBatches."""
    return AddAgentBatches(builder, agentBatches)
def StartAgentBatchesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StateInterimSyncStartAgentBatchesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartAgentBatchesVector(builder, numElems)
def AddMessageBatches(builder, messageBatches): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(messageBatches), 0)
def StateInterimSyncAddMessageBatches(builder, messageBatches):
    """This method is deprecated. Please switch to AddMessageBatches."""
    return AddMessageBatches(builder, messageBatches)
def StartMessageBatchesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StateInterimSyncStartMessageBatchesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMessageBatchesVector(builder, numElems)
def End(builder): return builder.EndObject()
def StateInterimSyncEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)