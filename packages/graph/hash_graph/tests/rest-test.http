# This file either runs with JetBrains' http requests or using httpYac (https://httpyac.github.io).

### Insert Text data type
POST http://127.0.0.1:3000/data-type
Content-Type: application/json
Accept: application/json

{
  "account_id": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "dataType",
    "$id": "https://blockprotocol.org/@blockprotocol/types/data-type/text/v/1",
    "title": "Text",
    "type": "string"
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get Text data type
GET http://127.0.0.1:3000/data-type/https%3A%2F%2Fblockprotocol.org%2F%40blockprotocol%2Ftypes%2Fdata-type%2Ftext%2Fv%2F1

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Update Text data type
PUT http://127.0.0.1:3000/data-type
Content-Type: application/json
Accept: application/json

{
  "account_id": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "dataType",
    "$id": "https://blockprotocol.org/@blockprotocol/types/data-type/text/v/2",
    "title": "Text",
    "description": "An ordered sequence of characters",
    "type": "string"
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Insert Name property type
POST http://127.0.0.1:3000/property-type
Content-Type: application/json
Accept: application/json

{
  "account_id": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "propertyType",
    "$id": "https://blockprotocol.org/@alice/types/property-type/name/v/1",
    "title": "Name",
    "oneOf": [
      {
        "$ref": "https://blockprotocol.org/@blockprotocol/types/data-type/text/v/1"
      }
    ]
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get Name property type
GET http://127.0.0.1:3000/property-type/https%3A%2F%2Fblockprotocol.org%2F%40alice%2Ftypes%2Fproperty-type%2Fname%2Fv%2F1

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Update Name property type
PUT http://127.0.0.1:3000/property-type
Content-Type: application/json
Accept: application/json

{
  "account_id": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "propertyType",
    "$id": "https://blockprotocol.org/@alice/types/property-type/name/v/2",
    "title": "Name",
    "oneOf": [
      {
        "$ref": "https://blockprotocol.org/@blockprotocol/types/data-type/text/v/2"
      }
    ]
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Insert FriendOf link type
POST http://127.0.0.1:3000/link-type
Content-Type: application/json
Accept: application/json

{
  "account_id": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "linkType",
    "$id": "https://blockprotocol.org/@alice/types/link-type/friend-of/v/1",
    "title": "Friend Of",
    "description": "Someone who has a shared bond of mutual affection",
    "relatedKeywords": []
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get FriendOf link type
GET http://127.0.0.1:3000/link-type/https%3A%2F%2Fblockprotocol.org%2F%40alice%2Ftypes%2Flink-type%2Ffriend-of%2Fv%2F1

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Update FriendOf link type
PUT http://127.0.0.1:3000/link-type
Content-Type: application/json
Accept: application/json

{
  "account_id": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "linkType",
    "$id": "https://blockprotocol.org/@alice/types/link-type/friend-of/v/2",
    "title": "Friend Of",
    "description": "Someone who has a shared bond of mutual affection",
    "relatedKeywords": ["social"]
  }

}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}


### Insert Person entity type
POST http://127.0.0.1:3000/entity-type
Content-Type: application/json
Accept: application/json

{
  "account_id": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "entityType",
    "$id": "https://blockprotocol.org/@alice/types/entity-type/person/v/1",
    "type": "object",
    "title": "Person",
    "properties": {
      "https://blockprotocol.org/@alice/types/property-type/name": {
        "$ref": "https://blockprotocol.org/@alice/types/property-type/name/v/1"
      }
    }
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get Person entity type
GET http://127.0.0.1:3000/entity-type/https%3A%2F%2Fblockprotocol.org%2F%40alice%2Ftypes%2Fentity-type%2Fperson%2Fv%2F1

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Update Person entity type
PUT http://127.0.0.1:3000/entity-type
Content-Type: application/json
Accept: application/json

{
  "account_id": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "entityType",
    "$id": "https://blockprotocol.org/@alice/types/entity-type/person/v/2",
    "type": "object",
    "title": "Person",
    "properties": {
      "https://blockprotocol.org/@alice/types/property-type/name": {
        "$ref": "https://blockprotocol.org/@alice/types/property-type/name/v/2"
      }
    },
    "links": {
      "https://blockprotocol.org/@alice/types/link-type/friend-of/v/2": {
        "type": "array",
        "items": {
          "$ref": "https://blockprotocol.org/@alice/types/entity-type/person/v/2"
        },
        "ordered": false
      }
    }
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}
