# This file either runs with JetBrains' http requests or using httpYac (https://httpyac.github.io).

### Get all data types
GET http://127.0.0.1:4000/data-types

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length === 6, "Unexpected number of data types"); // The number of primitive data types
    });
%}

### Insert Text data type
POST http://127.0.0.1:4000/data-types
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "dataType",
    "$id": "https://example.com/data-type/text/v/1",
    "title": "Text",
    "type": "string"
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.global.set("text_data_type_uri", encodeURIComponent(response.body.uri));
%}

### Get Text data type
GET http://127.0.0.1:4000/data-types/{{text_data_type_uri}}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Update Text data type
PUT http://127.0.0.1:4000/data-types
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "dataType",
    "$id": "https://example.com/data-type/text/v/2",
    "title": "Text",
    "description": "An ordered sequence of characters",
    "type": "string"
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Insert Name property type
POST http://127.0.0.1:4000/property-types
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "propertyType",
    "$id": "https://blockprotocol.org/@alice/types/property-type/name/v/1",
    "title": "Name",
    "oneOf": [
      {
        "$ref": "https://example.com/data-type/text/v/1"
      }
    ]
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.global.set("person_property_type_uri", encodeURIComponent(response.body.uri));
%}

### Get Name property type
GET http://127.0.0.1:4000/property-types/{{person_property_type_uri}}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Update Name property type
PUT http://127.0.0.1:4000/property-types
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "propertyType",
    "$id": "https://blockprotocol.org/@alice/types/property-type/name/v/2",
    "title": "Name",
    "oneOf": [
      {
        "$ref": "https://example.com/data-type/text/v/2"
      }
    ]
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get all property types
GET http://127.0.0.1:4000/property-types

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length === 1, "Unexpected number of property types");
    });
%}

### Insert FriendOf link type
POST http://127.0.0.1:4000/link-types
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "linkType",
    "$id": "https://blockprotocol.org/@alice/types/link-type/friend-of/v/1",
    "title": "Friend Of",
    "description": "Someone who has a shared bond of mutual affection",
    "relatedKeywords": []
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.global.set("friend_of_link_type_uri", encodeURIComponent(response.body.uri));
    client.global.set("friend_of_link_type_uri_raw", response.body.uri);
%}

### Get FriendOf link type
GET http://127.0.0.1:4000/link-types/{{friend_of_link_type_uri}}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Update FriendOf link type
PUT http://127.0.0.1:4000/link-types
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "linkType",
    "$id": "https://blockprotocol.org/@alice/types/link-type/friend-of/v/2",
    "title": "Friend Of",
    "description": "Someone who has a shared bond of mutual affection",
    "relatedKeywords": ["social"]
  }

}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get all link types
GET http://127.0.0.1:4000/link-types

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length === 1, "Unexpected number of link types");
    });
%}


### Insert Person entity type
POST http://127.0.0.1:4000/entity-types
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "entityType",
    "$id": "https://blockprotocol.org/@alice/types/entity-type/person/v/1",
    "type": "object",
    "title": "Person",
    "properties": {
      "https://blockprotocol.org/@alice/types/property-type/name": {
        "$ref": "https://blockprotocol.org/@alice/types/property-type/name/v/1"
      }
    }
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.global.set("person_entity_type_uri", encodeURIComponent(response.body.uri));
%}

### Get Person entity type
GET http://127.0.0.1:4000/entity-types/{{person_entity_type_uri}}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Update Person entity type
PUT http://127.0.0.1:4000/entity-types
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "schema": {
    "kind": "entityType",
    "$id": "https://blockprotocol.org/@alice/types/entity-type/person/v/2",
    "type": "object",
    "title": "Person",
    "properties": {
      "https://blockprotocol.org/@alice/types/property-type/name": {
        "$ref": "https://blockprotocol.org/@alice/types/property-type/name/v/2"
      }
    },
    "links": {
      "https://blockprotocol.org/@alice/types/link-type/friend-of/v/2": {
        "type": "array",
        "items": {
          "$ref": "https://blockprotocol.org/@alice/types/entity-type/person/v/2"
        },
        "ordered": false
      }
    }
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get all entity types
GET http://127.0.0.1:4000/entity-types

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length === 1, "Unexpected number of entity types");
    });
%}


### Insert Person entity
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "entity": {
    "https://blockprotocol.org/@alice/types/property-type/name": "Alice"
  },
  "entityTypeUri": "https://blockprotocol.org/@alice/types/entity-type/person/v/1"
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.global.set("person_a_entity_id", encodeURIComponent(response.body.entityId));
%}

### Get Person entity
GET http://127.0.0.1:4000/entities/{{person_a_entity_id}}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Update Person entity
PUT http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "entityId": "{{person_a_entity_id}}",
  "entityTypeUri": "https://blockprotocol.org/@alice/types/entity-type/person/v/2",
  "entity": {
    "https://blockprotocol.org/@alice/types/property-type/name": "Alice Allison"
  }
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Insert another Person entity
POST http://127.0.0.1:4000/entities
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "entity": {
    "https://blockprotocol.org/@alice/types/property-type/name": "Bob"
  },
  "entityTypeUri": "https://blockprotocol.org/@alice/types/entity-type/person/v/1"
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.global.set("person_b_entity_id", encodeURIComponent(response.body.entityId));
%}

### Get all entities
GET http://127.0.0.1:4000/entities

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length === 2, "Unexpected number of entities");
    });
%}

### Insert link between entities
POST http://127.0.0.1:4000/entities/{{person_a_entity_id}}/links
Content-Type: application/json
Accept: application/json

{
  "accountId": "00000000-0000-0000-0000-000000000000",
  "targetEntity": "{{person_b_entity_id}}",
  "linkTypeUri": "{{friend_of_link_type_uri_raw}}"
}

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Get person "a" links
GET http://127.0.0.1:4000/entities/{{person_a_entity_id}}/links
Content-Type: application/json
Accept: application/json

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    const expected = client.global.get("person_b_entity_id")
    const actual = response.body[client.global.get("friend_of_link_type_uri_raw")];
    client.assert(expected == actual, "Link has wrong target entity ID")
%}

### Inactivate person "a" to person "b" link
DELETE http://127.0.0.1:4000/entities/{{person_a_entity_id}}/links
Content-Type: application/json
Accept: application/json

{
  "targetEntity": "{{person_b_entity_id}}",
  "linkTypeUri": "{{friend_of_link_type_uri_raw}}"
}

> {%
    client.test("status", function() {
        client.assert(response.status === 204, "Response status is not 204");
    });
%}

### Check inactivated person "a" to person "b" link
GET http://127.0.0.1:4000/entities/{{person_a_entity_id}}/links
Content-Type: application/json
Accept: application/json

> {%
    client.test("status", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    client.assert(Object.keys(response.body).length === 0, "Link has wrong target entity ID")
%}
