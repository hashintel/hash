//! The Axum webserver for accessing the Graph API operations.
//!
//! Handler methods are grouped by routes that make up the REST API.

mod api_resource;
mod data_type;
mod entity;
mod entity_type;
mod link;
mod link_type;
mod property_type;

use std::sync::Arc;

use axum::{
    body::{self, Empty, Full},
    extract::Path,
    http::{header, HeaderValue, Response, StatusCode},
    response::IntoResponse,
    routing::get,
    Extension, Json, Router,
};
use include_dir::{include_dir, Dir};
use utoipa::{openapi, Modify, OpenApi};

use self::api_resource::RoutedResource;
use crate::GraphPool;

static STATIC_SCHEMAS: Dir<'_> = include_dir!("$CARGO_MANIFEST_DIR/src/api/rest/json_schemas");

fn api_resources<P: GraphPool>() -> Vec<Router> {
    vec![
        data_type::DataTypeResource::routes::<P>(),
        property_type::PropertyTypeResource::routes::<P>(),
        link_type::LinkTypeResource::routes::<P>(),
        entity_type::EntityTypeResource::routes::<P>(),
        entity::EntityResource::routes::<P>(),
        link::LinkResource::routes::<P>(),
    ]
}

fn api_documentation() -> Vec<openapi::OpenApi> {
    vec![
        data_type::DataTypeResource::documentation(),
        property_type::PropertyTypeResource::documentation(),
        link_type::LinkTypeResource::documentation(),
        entity_type::EntityTypeResource::documentation(),
        entity::EntityResource::documentation(),
        link::LinkResource::documentation(),
    ]
}

pub fn rest_api_router<P: GraphPool>(store: Arc<P>) -> Router {
    // All api resources are merged together into a super-router.
    let merged_routes = api_resources::<P>()
        .into_iter()
        .fold(Router::new(), axum::Router::merge);

    // OpenAPI documentation is also generated by merging resources
    let open_api_doc = OpenApiDocumentation::openapi();

    // super-router can then be used as any other router.
    merged_routes
        // Make sure extensions are added at the end so they are made available to merged routers.
        .layer(Extension(store))
        .nest("/api-doc", Router::new().route(
            "/openapi.json",
            get({
                let doc = open_api_doc;
                move || async { Json(doc) }
            })).route("/models/*path", get(static_schemas)),
        )
}

#[allow(
    clippy::unused_async,
    reason = "This route does not need async capabilities, but axum requires it in trait bounds."
)]
async fn static_schemas<'a>(Path(path): Path<String>) -> impl IntoResponse {
    let path = path.trim_start_matches('/');

    match STATIC_SCHEMAS.get_file(path) {
        None => Response::builder()
            .status(StatusCode::NOT_FOUND)
            .body(body::boxed(Empty::new()))
            .expect("could not create empty 404 response"),
        Some(file) => Response::builder()
            .status(StatusCode::OK)
            .header(
                header::CONTENT_TYPE,
                HeaderValue::from_str("application/json")
                    .expect("could not create JSON content type header value"),
            )
            .body(body::boxed(Full::from(file.contents())))
            .expect("could not construct OK response"),
    }
}

#[derive(OpenApi)]
#[openapi(
        tags(
            (name = "Graph", description = "HASH Graph API")
        ),
        modifiers(&MergeAddon, &ExternalRefAddon)
    )]
struct OpenApiDocumentation;

/// Addon to merge multiple [`OpenApi`] documents together.
///
/// [`OpenApi`]: utoipa::openapi::OpenApi
struct MergeAddon;

impl Modify for MergeAddon {
    fn modify(&self, openapi: &mut utoipa::openapi::OpenApi) {
        let api_documentation = api_documentation();

        let api_components = api_documentation
            .iter()
            .cloned()
            .filter_map(|api_docs| {
                api_docs
                    .components
                    .map(|components| components.schemas.into_iter())
            })
            .flatten();

        let mut components = openapi.components.take().unwrap_or_default();
        components.schemas.extend(api_components);
        openapi.components = Some(components);

        let mut tags = openapi.tags.take().unwrap_or_default();
        tags.extend(
            api_documentation
                .iter()
                .cloned()
                .filter_map(|api_docs| api_docs.tags)
                .flatten(),
        );
        openapi.tags = Some(tags);

        openapi.paths.paths.extend(
            api_documentation
                .iter()
                .cloned()
                .flat_map(|api_docs| api_docs.paths.paths.into_iter()),
        );
    }
}

/// Addon to allow external references in schemas.
///
/// Any component that starts with `EXTERNAL_` will transform into a relative URL in the schema and
/// receive a `.json` ending.
///
/// For example the `EXTERNAL_Entity` component will be transformed into `./models/Entity.json`
struct ExternalRefAddon;

impl Modify for ExternalRefAddon {
    fn modify(&self, openapi: &mut openapi::OpenApi) {
        for path_item in openapi.paths.paths.values_mut() {
            for operation in path_item.operations.values_mut() {
                if let Some(request_body) = &mut operation.request_body {
                    modify_component_references(&mut request_body.content);
                }

                for response in &mut operation.responses.responses.values_mut() {
                    modify_component_references(&mut response.content);
                }
            }
        }
    }
}

fn modify_component_references(content: &mut std::collections::HashMap<String, openapi::Content>) {
    static REF_PREFIX: &str = "#/components/schemas/EXTERNAL_";

    for content in content.values_mut() {
        if let openapi::Component::Ref(reference) = &mut content.schema {
            if reference.ref_location.starts_with(REF_PREFIX) {
                reference
                    .ref_location
                    .replace_range(0..REF_PREFIX.len(), "./models/");
                reference.ref_location.make_ascii_lowercase();
                reference.ref_location.push_str(".json");
            };
        }
    }
}
