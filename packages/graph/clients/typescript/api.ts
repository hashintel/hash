/* tslint:disable */
/* eslint-disable */
/**
 * graph
 * HASH Graph API
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact:
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface CreateDataTypeRequest
 */
export interface CreateDataTypeRequest {
  /**
   *
   * @type {string}
   * @memberof CreateDataTypeRequest
   */
  accountId: string;
  /**
   *
   * @type {DataType}
   * @memberof CreateDataTypeRequest
   */
  schema: DataType;
}
/**
 *
 * @export
 * @interface CreateEntityRequest
 */
export interface CreateEntityRequest {
  /**
   *
   * @type {string}
   * @memberof CreateEntityRequest
   */
  accountId: string;
  /**
   *
   * @type {object}
   * @memberof CreateEntityRequest
   */
  entity: object;
  /**
   *
   * @type {string}
   * @memberof CreateEntityRequest
   */
  entityId?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEntityRequest
   */
  entityTypeUri: string;
}
/**
 *
 * @export
 * @interface CreateEntityTypeRequest
 */
export interface CreateEntityTypeRequest {
  /**
   *
   * @type {string}
   * @memberof CreateEntityTypeRequest
   */
  accountId: string;
  /**
   *
   * @type {EntityType}
   * @memberof CreateEntityTypeRequest
   */
  schema: EntityType;
}
/**
 *
 * @export
 * @interface CreateLinkRequest
 */
export interface CreateLinkRequest {
  /**
   *
   * @type {string}
   * @memberof CreateLinkRequest
   */
  createdBy: string;
  /**
   *
   * @type {string}
   * @memberof CreateLinkRequest
   */
  linkTypeUri: string;
  /**
   *
   * @type {string}
   * @memberof CreateLinkRequest
   */
  targetEntityId: string;
}
/**
 *
 * @export
 * @interface CreateLinkTypeRequest
 */
export interface CreateLinkTypeRequest {
  /**
   *
   * @type {string}
   * @memberof CreateLinkTypeRequest
   */
  accountId: string;
  /**
   *
   * @type {LinkType}
   * @memberof CreateLinkTypeRequest
   */
  schema: LinkType;
}
/**
 *
 * @export
 * @interface CreatePropertyTypeRequest
 */
export interface CreatePropertyTypeRequest {
  /**
   *
   * @type {string}
   * @memberof CreatePropertyTypeRequest
   */
  accountId: string;
  /**
   *
   * @type {PropertyType}
   * @memberof CreatePropertyTypeRequest
   */
  schema: PropertyType;
}
/**
 * Specifies the structure of a Data Type
 * @export
 * @interface DataType
 */
export interface DataType {
  [key: string]: any;

  /**
   *
   * @type {string}
   * @memberof DataType
   */
  $id: string;
  /**
   *
   * @type {string}
   * @memberof DataType
   */
  description?: string;
  /**
   *
   * @type {object}
   * @memberof DataType
   */
  kind: DataTypeKindEnum;
  /**
   *
   * @type {string}
   * @memberof DataType
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof DataType
   */
  type: string;
}

export const DataTypeKindEnum = {
  DataType: "dataType",
} as const;

export type DataTypeKindEnum =
  typeof DataTypeKindEnum[keyof typeof DataTypeKindEnum];

/**
 * Query to read [`DataType`]s, which are matching the [`Expression`].
 * @export
 * @interface DataTypeQuery
 */
export interface DataTypeQuery {
  /**
   *
   * @type {number}
   * @memberof DataTypeQuery
   */
  dataTypeQueryDepth: number;
  /**
   *
   * @type {object}
   * @memberof DataTypeQuery
   */
  query: object;
}
/**
 *
 * @export
 * @interface DataTypeReference
 */
export interface DataTypeReference {
  /**
   *
   * @type {string}
   * @memberof DataTypeReference
   */
  $ref: string;
}
/**
 *
 * @export
 * @interface DataTypeReferenceUpdate
 */
export interface DataTypeReferenceUpdate {
  /**
   *
   * @type {string}
   * @memberof DataTypeReferenceUpdate
   */
  $ref: string;
}
/**
 *
 * @export
 * @interface DataTypeRootedSubgraph
 */
export interface DataTypeRootedSubgraph {
  /**
   *
   * @type {PersistedDataType}
   * @memberof DataTypeRootedSubgraph
   */
  dataType: PersistedDataType;
}
/**
 * Specifies the structure of an Entity Type
 * @export
 * @interface EntityType
 */
export interface EntityType {
  /**
   *
   * @type {string}
   * @memberof EntityType
   */
  $id: string;
  /**
   *
   * @type {object}
   * @memberof EntityType
   */
  default?: object;
  /**
   *
   * @type {string}
   * @memberof EntityType
   */
  description?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof EntityType
   */
  examples?: Array<object>;
  /**
   *
   * @type {object}
   * @memberof EntityType
   */
  kind: EntityTypeKindEnum;
  /**
   *
   * @type {object}
   * @memberof EntityType
   */
  links?: object;
  /**
   *
   * @type {string}
   * @memberof EntityType
   */
  pluralTitle: string;
  /**
   *
   * @type {object}
   * @memberof EntityType
   */
  properties: object;
  /**
   *
   * @type {Array<string>}
   * @memberof EntityType
   */
  required?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof EntityType
   */
  requiredLinks?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof EntityType
   */
  title: string;
  /**
   *
   * @type {object}
   * @memberof EntityType
   */
  type: EntityTypeTypeEnum;
}

export const EntityTypeKindEnum = {
  EntityType: "entityType",
} as const;

export type EntityTypeKindEnum =
  typeof EntityTypeKindEnum[keyof typeof EntityTypeKindEnum];
export const EntityTypeTypeEnum = {
  Object: "object",
} as const;

export type EntityTypeTypeEnum =
  typeof EntityTypeTypeEnum[keyof typeof EntityTypeTypeEnum];

/**
 * Query to read [`EntityType`]s, which are matching the [`Expression`].
 * @export
 * @interface EntityTypeQuery
 */
export interface EntityTypeQuery {
  /**
   *
   * @type {number}
   * @memberof EntityTypeQuery
   */
  dataTypeQueryDepth: number;
  /**
   *
   * @type {number}
   * @memberof EntityTypeQuery
   */
  entityTypeQueryDepth: number;
  /**
   *
   * @type {number}
   * @memberof EntityTypeQuery
   */
  linkTypeQueryDepth: number;
  /**
   *
   * @type {number}
   * @memberof EntityTypeQuery
   */
  propertyTypeQueryDepth: number;
  /**
   *
   * @type {object}
   * @memberof EntityTypeQuery
   */
  query: object;
}
/**
 *
 * @export
 * @interface EntityTypeRootedSubgraph
 */
export interface EntityTypeRootedSubgraph {
  /**
   *
   * @type {PersistedEntityType}
   * @memberof EntityTypeRootedSubgraph
   */
  entityType: PersistedEntityType;
  /**
   *
   * @type {Array<PersistedDataType>}
   * @memberof EntityTypeRootedSubgraph
   */
  referencedDataTypes: Array<PersistedDataType>;
  /**
   *
   * @type {Array<PersistedEntityType>}
   * @memberof EntityTypeRootedSubgraph
   */
  referencedEntityTypes: Array<PersistedEntityType>;
  /**
   *
   * @type {Array<PersistedLinkType>}
   * @memberof EntityTypeRootedSubgraph
   */
  referencedLinkTypes: Array<PersistedLinkType>;
  /**
   *
   * @type {Array<PersistedPropertyType>}
   * @memberof EntityTypeRootedSubgraph
   */
  referencedPropertyTypes: Array<PersistedPropertyType>;
}
/**
 * A Link between a source and a target entity identified by [`EntityId`]s.
 * @export
 * @interface Link
 */
export interface Link {
  /**
   *
   * @type {string}
   * @memberof Link
   */
  linkTypeUri: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  sourceEntityId: string;
  /**
   *
   * @type {string}
   * @memberof Link
   */
  targetEntityId: string;
}
/**
 * Specifies the structure of a Link Type
 * @export
 * @interface LinkType
 */
export interface LinkType {
  /**
   *
   * @type {string}
   * @memberof LinkType
   */
  $id: string;
  /**
   *
   * @type {string}
   * @memberof LinkType
   */
  description: string;
  /**
   *
   * @type {object}
   * @memberof LinkType
   */
  kind: LinkTypeKindEnum;
  /**
   *
   * @type {string}
   * @memberof LinkType
   */
  pluralTitle: string;
  /**
   *
   * @type {Array<string>}
   * @memberof LinkType
   */
  relatedKeywords?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof LinkType
   */
  title: string;
}

export const LinkTypeKindEnum = {
  LinkType: "linkType",
} as const;

export type LinkTypeKindEnum =
  typeof LinkTypeKindEnum[keyof typeof LinkTypeKindEnum];

/**
 * Query to read [`LinkType`]s, which are matching the [`Expression`].
 * @export
 * @interface LinkTypeQuery
 */
export interface LinkTypeQuery {
  /**
   *
   * @type {object}
   * @memberof LinkTypeQuery
   */
  query: object;
}
/**
 *
 * @export
 * @interface LinkTypeRootedSubgraph
 */
export interface LinkTypeRootedSubgraph {
  /**
   *
   * @type {PersistedLinkType}
   * @memberof LinkTypeRootedSubgraph
   */
  linkType: PersistedLinkType;
}
/**
 *
 * @export
 * @interface PersistedDataType
 */
export interface PersistedDataType {
  /**
   *
   * @type {PersistedOntologyIdentifier}
   * @memberof PersistedDataType
   */
  identifier: PersistedOntologyIdentifier;
  /**
   *
   * @type {DataType}
   * @memberof PersistedDataType
   */
  inner: DataType;
}
/**
 * A record of an [`Entity`] that has been persisted in the datastore, with its associated
 * @export
 * @interface PersistedEntity
 */
export interface PersistedEntity {
  /**
   *
   * @type {PersistedEntityIdentifier}
   * @memberof PersistedEntity
   */
  identifier: PersistedEntityIdentifier;
  /**
   *
   * @type {object}
   * @memberof PersistedEntity
   */
  inner: object;
  /**
   *
   * @type {string}
   * @memberof PersistedEntity
   */
  typeVersionedUri: string;
}
/**
 * The metadata required to uniquely identify an instance of an [`Entity`] that has been persisted
 * @export
 * @interface PersistedEntityIdentifier
 */
export interface PersistedEntityIdentifier {
  /**
   *
   * @type {string}
   * @memberof PersistedEntityIdentifier
   */
  createdBy: string;
  /**
   *
   * @type {string}
   * @memberof PersistedEntityIdentifier
   */
  entityId: string;
  /**
   *
   * @type {string}
   * @memberof PersistedEntityIdentifier
   */
  version: string;
}
/**
 *
 * @export
 * @interface PersistedEntityType
 */
export interface PersistedEntityType {
  /**
   *
   * @type {PersistedOntologyIdentifier}
   * @memberof PersistedEntityType
   */
  identifier: PersistedOntologyIdentifier;
  /**
   *
   * @type {EntityType}
   * @memberof PersistedEntityType
   */
  inner: EntityType;
}
/**
 *
 * @export
 * @interface PersistedLinkType
 */
export interface PersistedLinkType {
  /**
   *
   * @type {PersistedOntologyIdentifier}
   * @memberof PersistedLinkType
   */
  identifier: PersistedOntologyIdentifier;
  /**
   *
   * @type {LinkType}
   * @memberof PersistedLinkType
   */
  inner: LinkType;
}
/**
 * The metadata required to uniquely identify an ontology element that has been persisted in the
 * @export
 * @interface PersistedOntologyIdentifier
 */
export interface PersistedOntologyIdentifier {
  /**
   *
   * @type {string}
   * @memberof PersistedOntologyIdentifier
   */
  createdBy: string;
  /**
   *
   * @type {string}
   * @memberof PersistedOntologyIdentifier
   */
  uri: string;
}
/**
 *
 * @export
 * @interface PersistedPropertyType
 */
export interface PersistedPropertyType {
  /**
   *
   * @type {PersistedOntologyIdentifier}
   * @memberof PersistedPropertyType
   */
  identifier: PersistedOntologyIdentifier;
  /**
   *
   * @type {PropertyType}
   * @memberof PersistedPropertyType
   */
  inner: PropertyType;
}
/**
 *
 * @export
 * @interface PropertyArrayValue
 */
export interface PropertyArrayValue {
  /**
   *
   * @type {PropertyArrayValueItems}
   * @memberof PropertyArrayValue
   */
  items: PropertyArrayValueItems;
  /**
   *
   * @type {number}
   * @memberof PropertyArrayValue
   */
  maxItems?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyArrayValue
   */
  minItems?: number;
  /**
   *
   * @type {string}
   * @memberof PropertyArrayValue
   */
  type: PropertyArrayValueTypeEnum;
}

export const PropertyArrayValueTypeEnum = {
  Array: "array",
} as const;

export type PropertyArrayValueTypeEnum =
  typeof PropertyArrayValueTypeEnum[keyof typeof PropertyArrayValueTypeEnum];

/**
 *
 * @export
 * @interface PropertyArrayValueItems
 */
export interface PropertyArrayValueItems {
  /**
   *
   * @type {Array<PropertyValues>}
   * @memberof PropertyArrayValueItems
   */
  oneOf: Array<PropertyValues>;
}
/**
 *
 * @export
 * @interface PropertyArrayValueUpdate
 */
export interface PropertyArrayValueUpdate {
  /**
   *
   * @type {PropertyArrayValueUpdateItems}
   * @memberof PropertyArrayValueUpdate
   */
  items: PropertyArrayValueUpdateItems;
  /**
   *
   * @type {number}
   * @memberof PropertyArrayValueUpdate
   */
  maxItems?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyArrayValueUpdate
   */
  minItems?: number;
  /**
   *
   * @type {string}
   * @memberof PropertyArrayValueUpdate
   */
  type: PropertyArrayValueUpdateTypeEnum;
}

export const PropertyArrayValueUpdateTypeEnum = {
  Array: "array",
} as const;

export type PropertyArrayValueUpdateTypeEnum =
  typeof PropertyArrayValueUpdateTypeEnum[keyof typeof PropertyArrayValueUpdateTypeEnum];

/**
 *
 * @export
 * @interface PropertyArrayValueUpdateItems
 */
export interface PropertyArrayValueUpdateItems {
  /**
   *
   * @type {Array<PropertyValuesUpdate>}
   * @memberof PropertyArrayValueUpdateItems
   */
  oneOf: Array<PropertyValuesUpdate>;
}
/**
 *
 * @export
 * @interface PropertyObjectValue
 */
export interface PropertyObjectValue {
  /**
   *
   * @type {object}
   * @memberof PropertyObjectValue
   */
  properties: object;
  /**
   *
   * @type {string}
   * @memberof PropertyObjectValue
   */
  type: PropertyObjectValueTypeEnum;
}

export const PropertyObjectValueTypeEnum = {
  Object: "object",
} as const;

export type PropertyObjectValueTypeEnum =
  typeof PropertyObjectValueTypeEnum[keyof typeof PropertyObjectValueTypeEnum];

/**
 * Specifies the structure of a Property Type
 * @export
 * @interface PropertyType
 */
export interface PropertyType {
  /**
   *
   * @type {string}
   * @memberof PropertyType
   */
  $id: string;
  /**
   *
   * @type {string}
   * @memberof PropertyType
   */
  description?: string;
  /**
   *
   * @type {object}
   * @memberof PropertyType
   */
  kind: PropertyTypeKindEnum;
  /**
   *
   * @type {Array<PropertyValues>}
   * @memberof PropertyType
   */
  oneOf: Array<PropertyValues>;
  /**
   *
   * @type {string}
   * @memberof PropertyType
   */
  pluralTitle: string;
  /**
   *
   * @type {string}
   * @memberof PropertyType
   */
  title: string;
}

export const PropertyTypeKindEnum = {
  PropertyType: "propertyType",
} as const;

export type PropertyTypeKindEnum =
  typeof PropertyTypeKindEnum[keyof typeof PropertyTypeKindEnum];

/**
 * Query to read [`PropertyType`]s, which are matching the [`Expression`].
 * @export
 * @interface PropertyTypeQuery
 */
export interface PropertyTypeQuery {
  /**
   *
   * @type {number}
   * @memberof PropertyTypeQuery
   */
  dataTypeQueryDepth: number;
  /**
   *
   * @type {number}
   * @memberof PropertyTypeQuery
   */
  propertyTypeQueryDepth: number;
  /**
   *
   * @type {object}
   * @memberof PropertyTypeQuery
   */
  query: object;
}
/**
 *
 * @export
 * @interface PropertyTypeRootedSubgraph
 */
export interface PropertyTypeRootedSubgraph {
  /**
   *
   * @type {PersistedPropertyType}
   * @memberof PropertyTypeRootedSubgraph
   */
  propertyType: PersistedPropertyType;
  /**
   *
   * @type {Array<PersistedDataType>}
   * @memberof PropertyTypeRootedSubgraph
   */
  referencedDataTypes: Array<PersistedDataType>;
  /**
   *
   * @type {Array<PersistedPropertyType>}
   * @memberof PropertyTypeRootedSubgraph
   */
  referencedPropertyTypes: Array<PersistedPropertyType>;
}
/**
 * @type PropertyValues
 * @export
 */
export type PropertyValues =
  | DataTypeReference
  | PropertyArrayValue
  | PropertyObjectValue;

/**
 * @type PropertyValuesUpdate
 * @export
 */
export type PropertyValuesUpdate =
  | DataTypeReferenceUpdate
  | PropertyArrayValueUpdate
  | PropertyObjectValue;

/**
 *
 * @export
 * @interface RemoveLinkRequest
 */
export interface RemoveLinkRequest {
  /**
   *
   * @type {string}
   * @memberof RemoveLinkRequest
   */
  linkTypeUri: string;
  /**
   *
   * @type {string}
   * @memberof RemoveLinkRequest
   */
  removedBy: string;
  /**
   *
   * @type {string}
   * @memberof RemoveLinkRequest
   */
  targetEntityId: string;
}
/**
 * The contents of a Data Type update request
 * @export
 * @interface UpdateDataType
 */
export interface UpdateDataType {
  [key: string]: any;

  /**
   *
   * @type {string}
   * @memberof UpdateDataType
   */
  description?: string;
  /**
   *
   * @type {object}
   * @memberof UpdateDataType
   */
  kind: UpdateDataTypeKindEnum;
  /**
   *
   * @type {string}
   * @memberof UpdateDataType
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof UpdateDataType
   */
  type: string;
}

export const UpdateDataTypeKindEnum = {
  DataType: "dataType",
} as const;

export type UpdateDataTypeKindEnum =
  typeof UpdateDataTypeKindEnum[keyof typeof UpdateDataTypeKindEnum];

/**
 *
 * @export
 * @interface UpdateDataTypeRequest
 */
export interface UpdateDataTypeRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateDataTypeRequest
   */
  accountId: string;
  /**
   *
   * @type {UpdateDataType}
   * @memberof UpdateDataTypeRequest
   */
  schema: UpdateDataType;
  /**
   *
   * @type {string}
   * @memberof UpdateDataTypeRequest
   */
  typeToUpdate: string;
}
/**
 *
 * @export
 * @interface UpdateEntityRequest
 */
export interface UpdateEntityRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateEntityRequest
   */
  accountId: string;
  /**
   *
   * @type {object}
   * @memberof UpdateEntityRequest
   */
  entity: object;
  /**
   *
   * @type {string}
   * @memberof UpdateEntityRequest
   */
  entityId: string;
  /**
   *
   * @type {string}
   * @memberof UpdateEntityRequest
   */
  entityTypeUri: string;
}
/**
 * The contents of an Entity Type update request
 * @export
 * @interface UpdateEntityType
 */
export interface UpdateEntityType {
  /**
   *
   * @type {object}
   * @memberof UpdateEntityType
   */
  default?: object;
  /**
   *
   * @type {string}
   * @memberof UpdateEntityType
   */
  description?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof UpdateEntityType
   */
  examples?: Array<object>;
  /**
   *
   * @type {object}
   * @memberof UpdateEntityType
   */
  kind: UpdateEntityTypeKindEnum;
  /**
   *
   * @type {object}
   * @memberof UpdateEntityType
   */
  links?: object;
  /**
   *
   * @type {string}
   * @memberof UpdateEntityType
   */
  pluralTitle: string;
  /**
   *
   * @type {object}
   * @memberof UpdateEntityType
   */
  properties: object;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateEntityType
   */
  required?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateEntityType
   */
  requiredLinks?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof UpdateEntityType
   */
  title: string;
  /**
   *
   * @type {object}
   * @memberof UpdateEntityType
   */
  type: UpdateEntityTypeTypeEnum;
}

export const UpdateEntityTypeKindEnum = {
  EntityType: "entityType",
} as const;

export type UpdateEntityTypeKindEnum =
  typeof UpdateEntityTypeKindEnum[keyof typeof UpdateEntityTypeKindEnum];
export const UpdateEntityTypeTypeEnum = {
  Object: "object",
} as const;

export type UpdateEntityTypeTypeEnum =
  typeof UpdateEntityTypeTypeEnum[keyof typeof UpdateEntityTypeTypeEnum];

/**
 *
 * @export
 * @interface UpdateEntityTypeRequest
 */
export interface UpdateEntityTypeRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateEntityTypeRequest
   */
  accountId: string;
  /**
   *
   * @type {UpdateEntityType}
   * @memberof UpdateEntityTypeRequest
   */
  schema: UpdateEntityType;
  /**
   *
   * @type {string}
   * @memberof UpdateEntityTypeRequest
   */
  typeToUpdate: string;
}
/**
 * The contents of a Link Type update request
 * @export
 * @interface UpdateLinkType
 */
export interface UpdateLinkType {
  /**
   *
   * @type {string}
   * @memberof UpdateLinkType
   */
  description: string;
  /**
   *
   * @type {object}
   * @memberof UpdateLinkType
   */
  kind: UpdateLinkTypeKindEnum;
  /**
   *
   * @type {string}
   * @memberof UpdateLinkType
   */
  pluralTitle: string;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateLinkType
   */
  relatedKeywords?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof UpdateLinkType
   */
  title: string;
}

export const UpdateLinkTypeKindEnum = {
  LinkType: "linkType",
} as const;

export type UpdateLinkTypeKindEnum =
  typeof UpdateLinkTypeKindEnum[keyof typeof UpdateLinkTypeKindEnum];

/**
 *
 * @export
 * @interface UpdateLinkTypeRequest
 */
export interface UpdateLinkTypeRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateLinkTypeRequest
   */
  accountId: string;
  /**
   *
   * @type {UpdateLinkType}
   * @memberof UpdateLinkTypeRequest
   */
  schema: UpdateLinkType;
  /**
   *
   * @type {string}
   * @memberof UpdateLinkTypeRequest
   */
  typeToUpdate: string;
}
/**
 * The contents of a Property Type update request
 * @export
 * @interface UpdatePropertyType
 */
export interface UpdatePropertyType {
  /**
   *
   * @type {string}
   * @memberof UpdatePropertyType
   */
  description?: string;
  /**
   *
   * @type {object}
   * @memberof UpdatePropertyType
   */
  kind: UpdatePropertyTypeKindEnum;
  /**
   *
   * @type {Array<PropertyValuesUpdate>}
   * @memberof UpdatePropertyType
   */
  oneOf: Array<PropertyValuesUpdate>;
  /**
   *
   * @type {string}
   * @memberof UpdatePropertyType
   */
  pluralTitle: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePropertyType
   */
  title: string;
}

export const UpdatePropertyTypeKindEnum = {
  PropertyType: "propertyType",
} as const;

export type UpdatePropertyTypeKindEnum =
  typeof UpdatePropertyTypeKindEnum[keyof typeof UpdatePropertyTypeKindEnum];

/**
 *
 * @export
 * @interface UpdatePropertyTypeRequest
 */
export interface UpdatePropertyTypeRequest {
  /**
   *
   * @type {string}
   * @memberof UpdatePropertyTypeRequest
   */
  accountId: string;
  /**
   *
   * @type {UpdatePropertyType}
   * @memberof UpdatePropertyTypeRequest
   */
  schema: UpdatePropertyType;
  /**
   *
   * @type {string}
   * @memberof UpdatePropertyTypeRequest
   */
  typeToUpdate: string;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountId: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/accounts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAccountId(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAccountId(
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AccountApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountId(options?: any): AxiosPromise<string> {
      return localVarFp
        .createAccountId(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AccountApi - interface
 * @export
 * @interface AccountApi
 */
export interface AccountApiInterface {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApiInterface
   */
  createAccountId(options?: AxiosRequestConfig): AxiosPromise<string>;
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI implements AccountApiInterface {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public createAccountId(options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .createAccountId(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DataTypeApi - axios parameter creator
 * @export
 */
export const DataTypeApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateDataTypeRequest} createDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDataType: async (
      createDataTypeRequest: CreateDataTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createDataTypeRequest' is not null or undefined
      assertParamExists(
        "createDataType",
        "createDataTypeRequest",
        createDataTypeRequest,
      );
      const localVarPath = `/data-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createDataTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} uri The URI of the data type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataType: async (
      uri: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uri' is not null or undefined
      assertParamExists("getDataType", "uri", uri);
      const localVarPath = `/data-types/{uri}`.replace(
        `{${"uri"}}`,
        encodeURIComponent(String(uri)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataTypesByQuery: async (
      body: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists("getDataTypesByQuery", "body", body);
      const localVarPath = `/data-types/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestDataTypes: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/data-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateDataTypeRequest} updateDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataType: async (
      updateDataTypeRequest: UpdateDataTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateDataTypeRequest' is not null or undefined
      assertParamExists(
        "updateDataType",
        "updateDataTypeRequest",
        updateDataTypeRequest,
      );
      const localVarPath = `/data-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateDataTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DataTypeApi - functional programming interface
 * @export
 */
export const DataTypeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DataTypeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateDataTypeRequest} createDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDataType(
      createDataTypeRequest: CreateDataTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createDataType(
        createDataTypeRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} uri The URI of the data type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataType(
      uri: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedDataType>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataType(
        uri,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataTypesByQuery(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<DataTypeRootedSubgraph>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDataTypesByQuery(body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestDataTypes(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedDataType>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestDataTypes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UpdateDataTypeRequest} updateDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateDataType(
      updateDataTypeRequest: UpdateDataTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateDataType(
        updateDataTypeRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * DataTypeApi - factory interface
 * @export
 */
export const DataTypeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DataTypeApiFp(configuration);
  return {
    /**
     *
     * @param {CreateDataTypeRequest} createDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDataType(
      createDataTypeRequest: CreateDataTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .createDataType(createDataTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} uri The URI of the data type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataType(uri: string, options?: any): AxiosPromise<PersistedDataType> {
      return localVarFp
        .getDataType(uri, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataTypesByQuery(
      body: object,
      options?: any,
    ): AxiosPromise<Array<DataTypeRootedSubgraph>> {
      return localVarFp
        .getDataTypesByQuery(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestDataTypes(options?: any): AxiosPromise<Array<PersistedDataType>> {
      return localVarFp
        .getLatestDataTypes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateDataTypeRequest} updateDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataType(
      updateDataTypeRequest: UpdateDataTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .updateDataType(updateDataTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DataTypeApi - interface
 * @export
 * @interface DataTypeApi
 */
export interface DataTypeApiInterface {
  /**
   *
   * @param {CreateDataTypeRequest} createDataTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataTypeApiInterface
   */
  createDataType(
    createDataTypeRequest: CreateDataTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {string} uri The URI of the data type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataTypeApiInterface
   */
  getDataType(
    uri: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedDataType>;

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataTypeApiInterface
   */
  getDataTypesByQuery(
    body: object,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<DataTypeRootedSubgraph>>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataTypeApiInterface
   */
  getLatestDataTypes(
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedDataType>>;

  /**
   *
   * @param {UpdateDataTypeRequest} updateDataTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataTypeApiInterface
   */
  updateDataType(
    updateDataTypeRequest: UpdateDataTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;
}

/**
 * DataTypeApi - object-oriented interface
 * @export
 * @class DataTypeApi
 * @extends {BaseAPI}
 */
export class DataTypeApi extends BaseAPI implements DataTypeApiInterface {
  /**
   *
   * @param {CreateDataTypeRequest} createDataTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataTypeApi
   */
  public createDataType(
    createDataTypeRequest: CreateDataTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return DataTypeApiFp(this.configuration)
      .createDataType(createDataTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} uri The URI of the data type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataTypeApi
   */
  public getDataType(uri: string, options?: AxiosRequestConfig) {
    return DataTypeApiFp(this.configuration)
      .getDataType(uri, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataTypeApi
   */
  public getDataTypesByQuery(body: object, options?: AxiosRequestConfig) {
    return DataTypeApiFp(this.configuration)
      .getDataTypesByQuery(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataTypeApi
   */
  public getLatestDataTypes(options?: AxiosRequestConfig) {
    return DataTypeApiFp(this.configuration)
      .getLatestDataTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateDataTypeRequest} updateDataTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataTypeApi
   */
  public updateDataType(
    updateDataTypeRequest: UpdateDataTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return DataTypeApiFp(this.configuration)
      .updateDataType(updateDataTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * EntityApi - axios parameter creator
 * @export
 */
export const EntityApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateEntityRequest} createEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntity: async (
      createEntityRequest: CreateEntityRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createEntityRequest' is not null or undefined
      assertParamExists(
        "createEntity",
        "createEntityRequest",
        createEntityRequest,
      );
      const localVarPath = `/entities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createEntityRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntitiesByQuery: async (
      body: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists("getEntitiesByQuery", "body", body);
      const localVarPath = `/entities/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} entityId The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity: async (
      entityId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entityId' is not null or undefined
      assertParamExists("getEntity", "entityId", entityId);
      const localVarPath = `/entities/{entityId}`.replace(
        `{${"entityId"}}`,
        encodeURIComponent(String(entityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEntities: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/entities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateEntityRequest} updateEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntity: async (
      updateEntityRequest: UpdateEntityRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateEntityRequest' is not null or undefined
      assertParamExists(
        "updateEntity",
        "updateEntityRequest",
        updateEntityRequest,
      );
      const localVarPath = `/entities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateEntityRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EntityApi - functional programming interface
 * @export
 */
export const EntityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EntityApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateEntityRequest} createEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createEntity(
      createEntityRequest: CreateEntityRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedEntityIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createEntity(
        createEntityRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntitiesByQuery(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedEntity>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEntitiesByQuery(body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} entityId The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntity(
      entityId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedEntity>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEntity(
        entityId,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestEntities(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedEntity>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestEntities(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UpdateEntityRequest} updateEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateEntity(
      updateEntityRequest: UpdateEntityRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedEntityIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntity(
        updateEntityRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * EntityApi - factory interface
 * @export
 */
export const EntityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = EntityApiFp(configuration);
  return {
    /**
     *
     * @param {CreateEntityRequest} createEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntity(
      createEntityRequest: CreateEntityRequest,
      options?: any,
    ): AxiosPromise<PersistedEntityIdentifier> {
      return localVarFp
        .createEntity(createEntityRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntitiesByQuery(
      body: object,
      options?: any,
    ): AxiosPromise<Array<PersistedEntity>> {
      return localVarFp
        .getEntitiesByQuery(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} entityId The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity(entityId: string, options?: any): AxiosPromise<PersistedEntity> {
      return localVarFp
        .getEntity(entityId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEntities(options?: any): AxiosPromise<Array<PersistedEntity>> {
      return localVarFp
        .getLatestEntities(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateEntityRequest} updateEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntity(
      updateEntityRequest: UpdateEntityRequest,
      options?: any,
    ): AxiosPromise<PersistedEntityIdentifier> {
      return localVarFp
        .updateEntity(updateEntityRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * EntityApi - interface
 * @export
 * @interface EntityApi
 */
export interface EntityApiInterface {
  /**
   *
   * @param {CreateEntityRequest} createEntityRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityApiInterface
   */
  createEntity(
    createEntityRequest: CreateEntityRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedEntityIdentifier>;

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityApiInterface
   */
  getEntitiesByQuery(
    body: object,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedEntity>>;

  /**
   *
   * @param {string} entityId The ID of the entity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityApiInterface
   */
  getEntity(
    entityId: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedEntity>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityApiInterface
   */
  getLatestEntities(
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedEntity>>;

  /**
   *
   * @param {UpdateEntityRequest} updateEntityRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityApiInterface
   */
  updateEntity(
    updateEntityRequest: UpdateEntityRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedEntityIdentifier>;
}

/**
 * EntityApi - object-oriented interface
 * @export
 * @class EntityApi
 * @extends {BaseAPI}
 */
export class EntityApi extends BaseAPI implements EntityApiInterface {
  /**
   *
   * @param {CreateEntityRequest} createEntityRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityApi
   */
  public createEntity(
    createEntityRequest: CreateEntityRequest,
    options?: AxiosRequestConfig,
  ) {
    return EntityApiFp(this.configuration)
      .createEntity(createEntityRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityApi
   */
  public getEntitiesByQuery(body: object, options?: AxiosRequestConfig) {
    return EntityApiFp(this.configuration)
      .getEntitiesByQuery(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} entityId The ID of the entity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityApi
   */
  public getEntity(entityId: string, options?: AxiosRequestConfig) {
    return EntityApiFp(this.configuration)
      .getEntity(entityId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityApi
   */
  public getLatestEntities(options?: AxiosRequestConfig) {
    return EntityApiFp(this.configuration)
      .getLatestEntities(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateEntityRequest} updateEntityRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityApi
   */
  public updateEntity(
    updateEntityRequest: UpdateEntityRequest,
    options?: AxiosRequestConfig,
  ) {
    return EntityApiFp(this.configuration)
      .updateEntity(updateEntityRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * EntityTypeApi - axios parameter creator
 * @export
 */
export const EntityTypeApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateEntityTypeRequest} createEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityType: async (
      createEntityTypeRequest: CreateEntityTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createEntityTypeRequest' is not null or undefined
      assertParamExists(
        "createEntityType",
        "createEntityTypeRequest",
        createEntityTypeRequest,
      );
      const localVarPath = `/entity-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createEntityTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} uri The URI of the entity type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityType: async (
      uri: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uri' is not null or undefined
      assertParamExists("getEntityType", "uri", uri);
      const localVarPath = `/entity-types/{uri}`.replace(
        `{${"uri"}}`,
        encodeURIComponent(String(uri)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EntityTypeQuery} entityTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityTypesByQuery: async (
      entityTypeQuery: EntityTypeQuery,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entityTypeQuery' is not null or undefined
      assertParamExists(
        "getEntityTypesByQuery",
        "entityTypeQuery",
        entityTypeQuery,
      );
      const localVarPath = `/entity-types/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        entityTypeQuery,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEntityTypes: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/entity-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateEntityTypeRequest} updateEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityType: async (
      updateEntityTypeRequest: UpdateEntityTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateEntityTypeRequest' is not null or undefined
      assertParamExists(
        "updateEntityType",
        "updateEntityTypeRequest",
        updateEntityTypeRequest,
      );
      const localVarPath = `/entity-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateEntityTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EntityTypeApi - functional programming interface
 * @export
 */
export const EntityTypeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    EntityTypeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateEntityTypeRequest} createEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createEntityType(
      createEntityTypeRequest: CreateEntityTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createEntityType(
          createEntityTypeRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} uri The URI of the entity type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntityType(
      uri: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedEntityType>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityType(
        uri,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {EntityTypeQuery} entityTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntityTypesByQuery(
      entityTypeQuery: EntityTypeQuery,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<EntityTypeRootedSubgraph>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEntityTypesByQuery(
          entityTypeQuery,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestEntityTypes(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedEntityType>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestEntityTypes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UpdateEntityTypeRequest} updateEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateEntityType(
      updateEntityTypeRequest: UpdateEntityTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateEntityType(
          updateEntityTypeRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * EntityTypeApi - factory interface
 * @export
 */
export const EntityTypeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = EntityTypeApiFp(configuration);
  return {
    /**
     *
     * @param {CreateEntityTypeRequest} createEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityType(
      createEntityTypeRequest: CreateEntityTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .createEntityType(createEntityTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} uri The URI of the entity type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityType(
      uri: string,
      options?: any,
    ): AxiosPromise<PersistedEntityType> {
      return localVarFp
        .getEntityType(uri, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {EntityTypeQuery} entityTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityTypesByQuery(
      entityTypeQuery: EntityTypeQuery,
      options?: any,
    ): AxiosPromise<Array<EntityTypeRootedSubgraph>> {
      return localVarFp
        .getEntityTypesByQuery(entityTypeQuery, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEntityTypes(
      options?: any,
    ): AxiosPromise<Array<PersistedEntityType>> {
      return localVarFp
        .getLatestEntityTypes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateEntityTypeRequest} updateEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityType(
      updateEntityTypeRequest: UpdateEntityTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .updateEntityType(updateEntityTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * EntityTypeApi - interface
 * @export
 * @interface EntityTypeApi
 */
export interface EntityTypeApiInterface {
  /**
   *
   * @param {CreateEntityTypeRequest} createEntityTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityTypeApiInterface
   */
  createEntityType(
    createEntityTypeRequest: CreateEntityTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {string} uri The URI of the entity type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityTypeApiInterface
   */
  getEntityType(
    uri: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedEntityType>;

  /**
   *
   * @param {EntityTypeQuery} entityTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityTypeApiInterface
   */
  getEntityTypesByQuery(
    entityTypeQuery: EntityTypeQuery,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<EntityTypeRootedSubgraph>>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityTypeApiInterface
   */
  getLatestEntityTypes(
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedEntityType>>;

  /**
   *
   * @param {UpdateEntityTypeRequest} updateEntityTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityTypeApiInterface
   */
  updateEntityType(
    updateEntityTypeRequest: UpdateEntityTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;
}

/**
 * EntityTypeApi - object-oriented interface
 * @export
 * @class EntityTypeApi
 * @extends {BaseAPI}
 */
export class EntityTypeApi extends BaseAPI implements EntityTypeApiInterface {
  /**
   *
   * @param {CreateEntityTypeRequest} createEntityTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityTypeApi
   */
  public createEntityType(
    createEntityTypeRequest: CreateEntityTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return EntityTypeApiFp(this.configuration)
      .createEntityType(createEntityTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} uri The URI of the entity type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityTypeApi
   */
  public getEntityType(uri: string, options?: AxiosRequestConfig) {
    return EntityTypeApiFp(this.configuration)
      .getEntityType(uri, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {EntityTypeQuery} entityTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityTypeApi
   */
  public getEntityTypesByQuery(
    entityTypeQuery: EntityTypeQuery,
    options?: AxiosRequestConfig,
  ) {
    return EntityTypeApiFp(this.configuration)
      .getEntityTypesByQuery(entityTypeQuery, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityTypeApi
   */
  public getLatestEntityTypes(options?: AxiosRequestConfig) {
    return EntityTypeApiFp(this.configuration)
      .getLatestEntityTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateEntityTypeRequest} updateEntityTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntityTypeApi
   */
  public updateEntityType(
    updateEntityTypeRequest: UpdateEntityTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return EntityTypeApiFp(this.configuration)
      .updateEntityType(updateEntityTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GraphApi - axios parameter creator
 * @export
 */
export const GraphApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountId: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/accounts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateDataTypeRequest} createDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDataType: async (
      createDataTypeRequest: CreateDataTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createDataTypeRequest' is not null or undefined
      assertParamExists(
        "createDataType",
        "createDataTypeRequest",
        createDataTypeRequest,
      );
      const localVarPath = `/data-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createDataTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateEntityRequest} createEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntity: async (
      createEntityRequest: CreateEntityRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createEntityRequest' is not null or undefined
      assertParamExists(
        "createEntity",
        "createEntityRequest",
        createEntityRequest,
      );
      const localVarPath = `/entities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createEntityRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateEntityTypeRequest} createEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityType: async (
      createEntityTypeRequest: CreateEntityTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createEntityTypeRequest' is not null or undefined
      assertParamExists(
        "createEntityType",
        "createEntityTypeRequest",
        createEntityTypeRequest,
      );
      const localVarPath = `/entity-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createEntityTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {CreateLinkRequest} createLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLink: async (
      entityId: string,
      createLinkRequest: CreateLinkRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entityId' is not null or undefined
      assertParamExists("createLink", "entityId", entityId);
      // verify required parameter 'createLinkRequest' is not null or undefined
      assertParamExists("createLink", "createLinkRequest", createLinkRequest);
      const localVarPath = `/entities/{entityId}/links`.replace(
        `{${"entityId"}}`,
        encodeURIComponent(String(entityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createLinkRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateLinkTypeRequest} createLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLinkType: async (
      createLinkTypeRequest: CreateLinkTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createLinkTypeRequest' is not null or undefined
      assertParamExists(
        "createLinkType",
        "createLinkTypeRequest",
        createLinkTypeRequest,
      );
      const localVarPath = `/link-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createLinkTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreatePropertyTypeRequest} createPropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyType: async (
      createPropertyTypeRequest: CreatePropertyTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createPropertyTypeRequest' is not null or undefined
      assertParamExists(
        "createPropertyType",
        "createPropertyTypeRequest",
        createPropertyTypeRequest,
      );
      const localVarPath = `/property-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPropertyTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} uri The URI of the data type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataType: async (
      uri: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uri' is not null or undefined
      assertParamExists("getDataType", "uri", uri);
      const localVarPath = `/data-types/{uri}`.replace(
        `{${"uri"}}`,
        encodeURIComponent(String(uri)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataTypesByQuery: async (
      body: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists("getDataTypesByQuery", "body", body);
      const localVarPath = `/data-types/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntitiesByQuery: async (
      body: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists("getEntitiesByQuery", "body", body);
      const localVarPath = `/entities/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} entityId The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity: async (
      entityId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entityId' is not null or undefined
      assertParamExists("getEntity", "entityId", entityId);
      const localVarPath = `/entities/{entityId}`.replace(
        `{${"entityId"}}`,
        encodeURIComponent(String(entityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLinks: async (
      entityId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entityId' is not null or undefined
      assertParamExists("getEntityLinks", "entityId", entityId);
      const localVarPath = `/entities/{entityId}/links`.replace(
        `{${"entityId"}}`,
        encodeURIComponent(String(entityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} uri The URI of the entity type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityType: async (
      uri: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uri' is not null or undefined
      assertParamExists("getEntityType", "uri", uri);
      const localVarPath = `/entity-types/{uri}`.replace(
        `{${"uri"}}`,
        encodeURIComponent(String(uri)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {EntityTypeQuery} entityTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityTypesByQuery: async (
      entityTypeQuery: EntityTypeQuery,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entityTypeQuery' is not null or undefined
      assertParamExists(
        "getEntityTypesByQuery",
        "entityTypeQuery",
        entityTypeQuery,
      );
      const localVarPath = `/entity-types/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        entityTypeQuery,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestDataTypes: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/data-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEntities: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/entities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEntityTypes: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/entity-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestLinkTypes: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/link-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestPropertyTypes: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/property-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} uri The URI of the link type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkType: async (
      uri: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uri' is not null or undefined
      assertParamExists("getLinkType", "uri", uri);
      const localVarPath = `/link-types/{uri}`.replace(
        `{${"uri"}}`,
        encodeURIComponent(String(uri)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LinkTypeQuery} linkTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkTypesByQuery: async (
      linkTypeQuery: LinkTypeQuery,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'linkTypeQuery' is not null or undefined
      assertParamExists("getLinkTypesByQuery", "linkTypeQuery", linkTypeQuery);
      const localVarPath = `/link-types/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        linkTypeQuery,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinksByQuery: async (
      body: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists("getLinksByQuery", "body", body);
      const localVarPath = `/links/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} uri The URI of the property type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertyType: async (
      uri: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uri' is not null or undefined
      assertParamExists("getPropertyType", "uri", uri);
      const localVarPath = `/property-types/{uri}`.replace(
        `{${"uri"}}`,
        encodeURIComponent(String(uri)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PropertyTypeQuery} propertyTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertyTypesByQuery: async (
      propertyTypeQuery: PropertyTypeQuery,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'propertyTypeQuery' is not null or undefined
      assertParamExists(
        "getPropertyTypesByQuery",
        "propertyTypeQuery",
        propertyTypeQuery,
      );
      const localVarPath = `/property-types/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        propertyTypeQuery,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {RemoveLinkRequest} removeLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeLink: async (
      entityId: string,
      removeLinkRequest: RemoveLinkRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entityId' is not null or undefined
      assertParamExists("removeLink", "entityId", entityId);
      // verify required parameter 'removeLinkRequest' is not null or undefined
      assertParamExists("removeLink", "removeLinkRequest", removeLinkRequest);
      const localVarPath = `/entities/{entityId}/links`.replace(
        `{${"entityId"}}`,
        encodeURIComponent(String(entityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        removeLinkRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateDataTypeRequest} updateDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataType: async (
      updateDataTypeRequest: UpdateDataTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateDataTypeRequest' is not null or undefined
      assertParamExists(
        "updateDataType",
        "updateDataTypeRequest",
        updateDataTypeRequest,
      );
      const localVarPath = `/data-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateDataTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateEntityRequest} updateEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntity: async (
      updateEntityRequest: UpdateEntityRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateEntityRequest' is not null or undefined
      assertParamExists(
        "updateEntity",
        "updateEntityRequest",
        updateEntityRequest,
      );
      const localVarPath = `/entities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateEntityRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateEntityTypeRequest} updateEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityType: async (
      updateEntityTypeRequest: UpdateEntityTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateEntityTypeRequest' is not null or undefined
      assertParamExists(
        "updateEntityType",
        "updateEntityTypeRequest",
        updateEntityTypeRequest,
      );
      const localVarPath = `/entity-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateEntityTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateLinkTypeRequest} updateLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkType: async (
      updateLinkTypeRequest: UpdateLinkTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateLinkTypeRequest' is not null or undefined
      assertParamExists(
        "updateLinkType",
        "updateLinkTypeRequest",
        updateLinkTypeRequest,
      );
      const localVarPath = `/link-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateLinkTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdatePropertyTypeRequest} updatePropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePropertyType: async (
      updatePropertyTypeRequest: UpdatePropertyTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updatePropertyTypeRequest' is not null or undefined
      assertParamExists(
        "updatePropertyType",
        "updatePropertyTypeRequest",
        updatePropertyTypeRequest,
      );
      const localVarPath = `/property-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePropertyTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GraphApi - functional programming interface
 * @export
 */
export const GraphApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GraphApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAccountId(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAccountId(
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {CreateDataTypeRequest} createDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDataType(
      createDataTypeRequest: CreateDataTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createDataType(
        createDataTypeRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {CreateEntityRequest} createEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createEntity(
      createEntityRequest: CreateEntityRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedEntityIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createEntity(
        createEntityRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {CreateEntityTypeRequest} createEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createEntityType(
      createEntityTypeRequest: CreateEntityTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createEntityType(
          createEntityTypeRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {CreateLinkRequest} createLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createLink(
      entityId: string,
      createLinkRequest: CreateLinkRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Link>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createLink(
        entityId,
        createLinkRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {CreateLinkTypeRequest} createLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createLinkType(
      createLinkTypeRequest: CreateLinkTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createLinkType(
        createLinkTypeRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {CreatePropertyTypeRequest} createPropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyType(
      createPropertyTypeRequest: CreatePropertyTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createPropertyType(
          createPropertyTypeRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} uri The URI of the data type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataType(
      uri: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedDataType>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDataType(
        uri,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataTypesByQuery(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<DataTypeRootedSubgraph>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDataTypesByQuery(body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntitiesByQuery(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedEntity>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEntitiesByQuery(body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} entityId The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntity(
      entityId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedEntity>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEntity(
        entityId,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntityLinks(
      entityId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Link>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityLinks(
        entityId,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} uri The URI of the entity type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntityType(
      uri: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedEntityType>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityType(
        uri,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {EntityTypeQuery} entityTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntityTypesByQuery(
      entityTypeQuery: EntityTypeQuery,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<EntityTypeRootedSubgraph>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getEntityTypesByQuery(
          entityTypeQuery,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestDataTypes(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedDataType>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestDataTypes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestEntities(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedEntity>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestEntities(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestEntityTypes(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedEntityType>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestEntityTypes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestLinkTypes(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedLinkType>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestLinkTypes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestPropertyTypes(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedPropertyType>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestPropertyTypes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} uri The URI of the link type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLinkType(
      uri: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedLinkType>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLinkType(
        uri,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {LinkTypeQuery} linkTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLinkTypesByQuery(
      linkTypeQuery: LinkTypeQuery,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<LinkTypeRootedSubgraph>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLinkTypesByQuery(
          linkTypeQuery,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLinksByQuery(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Link>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLinksByQuery(
        body,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} uri The URI of the property type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPropertyType(
      uri: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedPropertyType>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPropertyType(
        uri,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {PropertyTypeQuery} propertyTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPropertyTypesByQuery(
      propertyTypeQuery: PropertyTypeQuery,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PropertyTypeRootedSubgraph>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPropertyTypesByQuery(
          propertyTypeQuery,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {RemoveLinkRequest} removeLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeLink(
      entityId: string,
      removeLinkRequest: RemoveLinkRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeLink(
        entityId,
        removeLinkRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UpdateDataTypeRequest} updateDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateDataType(
      updateDataTypeRequest: UpdateDataTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateDataType(
        updateDataTypeRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UpdateEntityRequest} updateEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateEntity(
      updateEntityRequest: UpdateEntityRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedEntityIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntity(
        updateEntityRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UpdateEntityTypeRequest} updateEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateEntityType(
      updateEntityTypeRequest: UpdateEntityTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateEntityType(
          updateEntityTypeRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UpdateLinkTypeRequest} updateLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateLinkType(
      updateLinkTypeRequest: UpdateLinkTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateLinkType(
        updateLinkTypeRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UpdatePropertyTypeRequest} updatePropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePropertyType(
      updatePropertyTypeRequest: UpdatePropertyTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updatePropertyType(
          updatePropertyTypeRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * GraphApi - factory interface
 * @export
 */
export const GraphApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GraphApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountId(options?: any): AxiosPromise<string> {
      return localVarFp
        .createAccountId(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateDataTypeRequest} createDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDataType(
      createDataTypeRequest: CreateDataTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .createDataType(createDataTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateEntityRequest} createEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntity(
      createEntityRequest: CreateEntityRequest,
      options?: any,
    ): AxiosPromise<PersistedEntityIdentifier> {
      return localVarFp
        .createEntity(createEntityRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateEntityTypeRequest} createEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityType(
      createEntityTypeRequest: CreateEntityTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .createEntityType(createEntityTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {CreateLinkRequest} createLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLink(
      entityId: string,
      createLinkRequest: CreateLinkRequest,
      options?: any,
    ): AxiosPromise<Link> {
      return localVarFp
        .createLink(entityId, createLinkRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateLinkTypeRequest} createLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLinkType(
      createLinkTypeRequest: CreateLinkTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .createLinkType(createLinkTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreatePropertyTypeRequest} createPropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyType(
      createPropertyTypeRequest: CreatePropertyTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .createPropertyType(createPropertyTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} uri The URI of the data type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataType(uri: string, options?: any): AxiosPromise<PersistedDataType> {
      return localVarFp
        .getDataType(uri, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataTypesByQuery(
      body: object,
      options?: any,
    ): AxiosPromise<Array<DataTypeRootedSubgraph>> {
      return localVarFp
        .getDataTypesByQuery(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntitiesByQuery(
      body: object,
      options?: any,
    ): AxiosPromise<Array<PersistedEntity>> {
      return localVarFp
        .getEntitiesByQuery(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} entityId The ID of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntity(entityId: string, options?: any): AxiosPromise<PersistedEntity> {
      return localVarFp
        .getEntity(entityId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLinks(entityId: string, options?: any): AxiosPromise<Array<Link>> {
      return localVarFp
        .getEntityLinks(entityId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} uri The URI of the entity type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityType(
      uri: string,
      options?: any,
    ): AxiosPromise<PersistedEntityType> {
      return localVarFp
        .getEntityType(uri, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {EntityTypeQuery} entityTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityTypesByQuery(
      entityTypeQuery: EntityTypeQuery,
      options?: any,
    ): AxiosPromise<Array<EntityTypeRootedSubgraph>> {
      return localVarFp
        .getEntityTypesByQuery(entityTypeQuery, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestDataTypes(options?: any): AxiosPromise<Array<PersistedDataType>> {
      return localVarFp
        .getLatestDataTypes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEntities(options?: any): AxiosPromise<Array<PersistedEntity>> {
      return localVarFp
        .getLatestEntities(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestEntityTypes(
      options?: any,
    ): AxiosPromise<Array<PersistedEntityType>> {
      return localVarFp
        .getLatestEntityTypes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestLinkTypes(options?: any): AxiosPromise<Array<PersistedLinkType>> {
      return localVarFp
        .getLatestLinkTypes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestPropertyTypes(
      options?: any,
    ): AxiosPromise<Array<PersistedPropertyType>> {
      return localVarFp
        .getLatestPropertyTypes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} uri The URI of the link type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkType(uri: string, options?: any): AxiosPromise<PersistedLinkType> {
      return localVarFp
        .getLinkType(uri, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LinkTypeQuery} linkTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkTypesByQuery(
      linkTypeQuery: LinkTypeQuery,
      options?: any,
    ): AxiosPromise<Array<LinkTypeRootedSubgraph>> {
      return localVarFp
        .getLinkTypesByQuery(linkTypeQuery, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinksByQuery(body: object, options?: any): AxiosPromise<Array<Link>> {
      return localVarFp
        .getLinksByQuery(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} uri The URI of the property type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertyType(
      uri: string,
      options?: any,
    ): AxiosPromise<PersistedPropertyType> {
      return localVarFp
        .getPropertyType(uri, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PropertyTypeQuery} propertyTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertyTypesByQuery(
      propertyTypeQuery: PropertyTypeQuery,
      options?: any,
    ): AxiosPromise<Array<PropertyTypeRootedSubgraph>> {
      return localVarFp
        .getPropertyTypesByQuery(propertyTypeQuery, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {RemoveLinkRequest} removeLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeLink(
      entityId: string,
      removeLinkRequest: RemoveLinkRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .removeLink(entityId, removeLinkRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateDataTypeRequest} updateDataTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDataType(
      updateDataTypeRequest: UpdateDataTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .updateDataType(updateDataTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateEntityRequest} updateEntityRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntity(
      updateEntityRequest: UpdateEntityRequest,
      options?: any,
    ): AxiosPromise<PersistedEntityIdentifier> {
      return localVarFp
        .updateEntity(updateEntityRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateEntityTypeRequest} updateEntityTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityType(
      updateEntityTypeRequest: UpdateEntityTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .updateEntityType(updateEntityTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateLinkTypeRequest} updateLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkType(
      updateLinkTypeRequest: UpdateLinkTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .updateLinkType(updateLinkTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdatePropertyTypeRequest} updatePropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePropertyType(
      updatePropertyTypeRequest: UpdatePropertyTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .updatePropertyType(updatePropertyTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GraphApi - interface
 * @export
 * @interface GraphApi
 */
export interface GraphApiInterface {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  createAccountId(options?: AxiosRequestConfig): AxiosPromise<string>;

  /**
   *
   * @param {CreateDataTypeRequest} createDataTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  createDataType(
    createDataTypeRequest: CreateDataTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {CreateEntityRequest} createEntityRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  createEntity(
    createEntityRequest: CreateEntityRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedEntityIdentifier>;

  /**
   *
   * @param {CreateEntityTypeRequest} createEntityTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  createEntityType(
    createEntityTypeRequest: CreateEntityTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {CreateLinkRequest} createLinkRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  createLink(
    entityId: string,
    createLinkRequest: CreateLinkRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Link>;

  /**
   *
   * @param {CreateLinkTypeRequest} createLinkTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  createLinkType(
    createLinkTypeRequest: CreateLinkTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {CreatePropertyTypeRequest} createPropertyTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  createPropertyType(
    createPropertyTypeRequest: CreatePropertyTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {string} uri The URI of the data type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getDataType(
    uri: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedDataType>;

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getDataTypesByQuery(
    body: object,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<DataTypeRootedSubgraph>>;

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getEntitiesByQuery(
    body: object,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedEntity>>;

  /**
   *
   * @param {string} entityId The ID of the entity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getEntity(
    entityId: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedEntity>;

  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getEntityLinks(
    entityId: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<Link>>;

  /**
   *
   * @param {string} uri The URI of the entity type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getEntityType(
    uri: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedEntityType>;

  /**
   *
   * @param {EntityTypeQuery} entityTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getEntityTypesByQuery(
    entityTypeQuery: EntityTypeQuery,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<EntityTypeRootedSubgraph>>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getLatestDataTypes(
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedDataType>>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getLatestEntities(
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedEntity>>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getLatestEntityTypes(
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedEntityType>>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getLatestLinkTypes(
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedLinkType>>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getLatestPropertyTypes(
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedPropertyType>>;

  /**
   *
   * @param {string} uri The URI of the link type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getLinkType(
    uri: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedLinkType>;

  /**
   *
   * @param {LinkTypeQuery} linkTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getLinkTypesByQuery(
    linkTypeQuery: LinkTypeQuery,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<LinkTypeRootedSubgraph>>;

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getLinksByQuery(
    body: object,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<Link>>;

  /**
   *
   * @param {string} uri The URI of the property type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getPropertyType(
    uri: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedPropertyType>;

  /**
   *
   * @param {PropertyTypeQuery} propertyTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  getPropertyTypesByQuery(
    propertyTypeQuery: PropertyTypeQuery,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PropertyTypeRootedSubgraph>>;

  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {RemoveLinkRequest} removeLinkRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  removeLink(
    entityId: string,
    removeLinkRequest: RemoveLinkRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<void>;

  /**
   *
   * @param {UpdateDataTypeRequest} updateDataTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  updateDataType(
    updateDataTypeRequest: UpdateDataTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {UpdateEntityRequest} updateEntityRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  updateEntity(
    updateEntityRequest: UpdateEntityRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedEntityIdentifier>;

  /**
   *
   * @param {UpdateEntityTypeRequest} updateEntityTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  updateEntityType(
    updateEntityTypeRequest: UpdateEntityTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {UpdateLinkTypeRequest} updateLinkTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  updateLinkType(
    updateLinkTypeRequest: UpdateLinkTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {UpdatePropertyTypeRequest} updatePropertyTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApiInterface
   */
  updatePropertyType(
    updatePropertyTypeRequest: UpdatePropertyTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;
}

/**
 * GraphApi - object-oriented interface
 * @export
 * @class GraphApi
 * @extends {BaseAPI}
 */
export class GraphApi extends BaseAPI implements GraphApiInterface {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public createAccountId(options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .createAccountId(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateDataTypeRequest} createDataTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public createDataType(
    createDataTypeRequest: CreateDataTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .createDataType(createDataTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateEntityRequest} createEntityRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public createEntity(
    createEntityRequest: CreateEntityRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .createEntity(createEntityRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateEntityTypeRequest} createEntityTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public createEntityType(
    createEntityTypeRequest: CreateEntityTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .createEntityType(createEntityTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {CreateLinkRequest} createLinkRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public createLink(
    entityId: string,
    createLinkRequest: CreateLinkRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .createLink(entityId, createLinkRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateLinkTypeRequest} createLinkTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public createLinkType(
    createLinkTypeRequest: CreateLinkTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .createLinkType(createLinkTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreatePropertyTypeRequest} createPropertyTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public createPropertyType(
    createPropertyTypeRequest: CreatePropertyTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .createPropertyType(createPropertyTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} uri The URI of the data type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getDataType(uri: string, options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getDataType(uri, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getDataTypesByQuery(body: object, options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getDataTypesByQuery(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getEntitiesByQuery(body: object, options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getEntitiesByQuery(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} entityId The ID of the entity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getEntity(entityId: string, options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getEntity(entityId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getEntityLinks(entityId: string, options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getEntityLinks(entityId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} uri The URI of the entity type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getEntityType(uri: string, options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getEntityType(uri, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {EntityTypeQuery} entityTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getEntityTypesByQuery(
    entityTypeQuery: EntityTypeQuery,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .getEntityTypesByQuery(entityTypeQuery, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getLatestDataTypes(options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getLatestDataTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getLatestEntities(options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getLatestEntities(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getLatestEntityTypes(options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getLatestEntityTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getLatestLinkTypes(options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getLatestLinkTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getLatestPropertyTypes(options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getLatestPropertyTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} uri The URI of the link type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getLinkType(uri: string, options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getLinkType(uri, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LinkTypeQuery} linkTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getLinkTypesByQuery(
    linkTypeQuery: LinkTypeQuery,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .getLinkTypesByQuery(linkTypeQuery, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getLinksByQuery(body: object, options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getLinksByQuery(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} uri The URI of the property type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getPropertyType(uri: string, options?: AxiosRequestConfig) {
    return GraphApiFp(this.configuration)
      .getPropertyType(uri, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PropertyTypeQuery} propertyTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public getPropertyTypesByQuery(
    propertyTypeQuery: PropertyTypeQuery,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .getPropertyTypesByQuery(propertyTypeQuery, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {RemoveLinkRequest} removeLinkRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public removeLink(
    entityId: string,
    removeLinkRequest: RemoveLinkRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .removeLink(entityId, removeLinkRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateDataTypeRequest} updateDataTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public updateDataType(
    updateDataTypeRequest: UpdateDataTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .updateDataType(updateDataTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateEntityRequest} updateEntityRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public updateEntity(
    updateEntityRequest: UpdateEntityRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .updateEntity(updateEntityRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateEntityTypeRequest} updateEntityTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public updateEntityType(
    updateEntityTypeRequest: UpdateEntityTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .updateEntityType(updateEntityTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateLinkTypeRequest} updateLinkTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public updateLinkType(
    updateLinkTypeRequest: UpdateLinkTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .updateLinkType(updateLinkTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdatePropertyTypeRequest} updatePropertyTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GraphApi
   */
  public updatePropertyType(
    updatePropertyTypeRequest: UpdatePropertyTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return GraphApiFp(this.configuration)
      .updatePropertyType(updatePropertyTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * LinkApi - axios parameter creator
 * @export
 */
export const LinkApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {CreateLinkRequest} createLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLink: async (
      entityId: string,
      createLinkRequest: CreateLinkRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entityId' is not null or undefined
      assertParamExists("createLink", "entityId", entityId);
      // verify required parameter 'createLinkRequest' is not null or undefined
      assertParamExists("createLink", "createLinkRequest", createLinkRequest);
      const localVarPath = `/entities/{entityId}/links`.replace(
        `{${"entityId"}}`,
        encodeURIComponent(String(entityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createLinkRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLinks: async (
      entityId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entityId' is not null or undefined
      assertParamExists("getEntityLinks", "entityId", entityId);
      const localVarPath = `/entities/{entityId}/links`.replace(
        `{${"entityId"}}`,
        encodeURIComponent(String(entityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinksByQuery: async (
      body: object,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists("getLinksByQuery", "body", body);
      const localVarPath = `/links/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {RemoveLinkRequest} removeLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeLink: async (
      entityId: string,
      removeLinkRequest: RemoveLinkRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'entityId' is not null or undefined
      assertParamExists("removeLink", "entityId", entityId);
      // verify required parameter 'removeLinkRequest' is not null or undefined
      assertParamExists("removeLink", "removeLinkRequest", removeLinkRequest);
      const localVarPath = `/entities/{entityId}/links`.replace(
        `{${"entityId"}}`,
        encodeURIComponent(String(entityId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        removeLinkRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LinkApi - functional programming interface
 * @export
 */
export const LinkApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LinkApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {CreateLinkRequest} createLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createLink(
      entityId: string,
      createLinkRequest: CreateLinkRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Link>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createLink(
        entityId,
        createLinkRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEntityLinks(
      entityId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Link>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityLinks(
        entityId,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLinksByQuery(
      body: object,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Link>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLinksByQuery(
        body,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {RemoveLinkRequest} removeLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeLink(
      entityId: string,
      removeLinkRequest: RemoveLinkRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeLink(
        entityId,
        removeLinkRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * LinkApi - factory interface
 * @export
 */
export const LinkApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = LinkApiFp(configuration);
  return {
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {CreateLinkRequest} createLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLink(
      entityId: string,
      createLinkRequest: CreateLinkRequest,
      options?: any,
    ): AxiosPromise<Link> {
      return localVarFp
        .createLink(entityId, createLinkRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLinks(entityId: string, options?: any): AxiosPromise<Array<Link>> {
      return localVarFp
        .getEntityLinks(entityId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinksByQuery(body: object, options?: any): AxiosPromise<Array<Link>> {
      return localVarFp
        .getLinksByQuery(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} entityId The ID of the source entity
     * @param {RemoveLinkRequest} removeLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeLink(
      entityId: string,
      removeLinkRequest: RemoveLinkRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .removeLink(entityId, removeLinkRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * LinkApi - interface
 * @export
 * @interface LinkApi
 */
export interface LinkApiInterface {
  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {CreateLinkRequest} createLinkRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkApiInterface
   */
  createLink(
    entityId: string,
    createLinkRequest: CreateLinkRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Link>;

  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkApiInterface
   */
  getEntityLinks(
    entityId: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<Link>>;

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkApiInterface
   */
  getLinksByQuery(
    body: object,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<Link>>;

  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {RemoveLinkRequest} removeLinkRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkApiInterface
   */
  removeLink(
    entityId: string,
    removeLinkRequest: RemoveLinkRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<void>;
}

/**
 * LinkApi - object-oriented interface
 * @export
 * @class LinkApi
 * @extends {BaseAPI}
 */
export class LinkApi extends BaseAPI implements LinkApiInterface {
  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {CreateLinkRequest} createLinkRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkApi
   */
  public createLink(
    entityId: string,
    createLinkRequest: CreateLinkRequest,
    options?: AxiosRequestConfig,
  ) {
    return LinkApiFp(this.configuration)
      .createLink(entityId, createLinkRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkApi
   */
  public getEntityLinks(entityId: string, options?: AxiosRequestConfig) {
    return LinkApiFp(this.configuration)
      .getEntityLinks(entityId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkApi
   */
  public getLinksByQuery(body: object, options?: AxiosRequestConfig) {
    return LinkApiFp(this.configuration)
      .getLinksByQuery(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} entityId The ID of the source entity
   * @param {RemoveLinkRequest} removeLinkRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkApi
   */
  public removeLink(
    entityId: string,
    removeLinkRequest: RemoveLinkRequest,
    options?: AxiosRequestConfig,
  ) {
    return LinkApiFp(this.configuration)
      .removeLink(entityId, removeLinkRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * LinkTypeApi - axios parameter creator
 * @export
 */
export const LinkTypeApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateLinkTypeRequest} createLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLinkType: async (
      createLinkTypeRequest: CreateLinkTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createLinkTypeRequest' is not null or undefined
      assertParamExists(
        "createLinkType",
        "createLinkTypeRequest",
        createLinkTypeRequest,
      );
      const localVarPath = `/link-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createLinkTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestLinkTypes: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/link-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} uri The URI of the link type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkType: async (
      uri: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uri' is not null or undefined
      assertParamExists("getLinkType", "uri", uri);
      const localVarPath = `/link-types/{uri}`.replace(
        `{${"uri"}}`,
        encodeURIComponent(String(uri)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LinkTypeQuery} linkTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkTypesByQuery: async (
      linkTypeQuery: LinkTypeQuery,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'linkTypeQuery' is not null or undefined
      assertParamExists("getLinkTypesByQuery", "linkTypeQuery", linkTypeQuery);
      const localVarPath = `/link-types/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        linkTypeQuery,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateLinkTypeRequest} updateLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkType: async (
      updateLinkTypeRequest: UpdateLinkTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateLinkTypeRequest' is not null or undefined
      assertParamExists(
        "updateLinkType",
        "updateLinkTypeRequest",
        updateLinkTypeRequest,
      );
      const localVarPath = `/link-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateLinkTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LinkTypeApi - functional programming interface
 * @export
 */
export const LinkTypeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LinkTypeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateLinkTypeRequest} createLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createLinkType(
      createLinkTypeRequest: CreateLinkTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createLinkType(
        createLinkTypeRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestLinkTypes(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedLinkType>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestLinkTypes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} uri The URI of the link type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLinkType(
      uri: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedLinkType>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLinkType(
        uri,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {LinkTypeQuery} linkTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLinkTypesByQuery(
      linkTypeQuery: LinkTypeQuery,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<LinkTypeRootedSubgraph>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLinkTypesByQuery(
          linkTypeQuery,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UpdateLinkTypeRequest} updateLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateLinkType(
      updateLinkTypeRequest: UpdateLinkTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateLinkType(
        updateLinkTypeRequest,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * LinkTypeApi - factory interface
 * @export
 */
export const LinkTypeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = LinkTypeApiFp(configuration);
  return {
    /**
     *
     * @param {CreateLinkTypeRequest} createLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLinkType(
      createLinkTypeRequest: CreateLinkTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .createLinkType(createLinkTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestLinkTypes(options?: any): AxiosPromise<Array<PersistedLinkType>> {
      return localVarFp
        .getLatestLinkTypes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} uri The URI of the link type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkType(uri: string, options?: any): AxiosPromise<PersistedLinkType> {
      return localVarFp
        .getLinkType(uri, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LinkTypeQuery} linkTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkTypesByQuery(
      linkTypeQuery: LinkTypeQuery,
      options?: any,
    ): AxiosPromise<Array<LinkTypeRootedSubgraph>> {
      return localVarFp
        .getLinkTypesByQuery(linkTypeQuery, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateLinkTypeRequest} updateLinkTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLinkType(
      updateLinkTypeRequest: UpdateLinkTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .updateLinkType(updateLinkTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * LinkTypeApi - interface
 * @export
 * @interface LinkTypeApi
 */
export interface LinkTypeApiInterface {
  /**
   *
   * @param {CreateLinkTypeRequest} createLinkTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkTypeApiInterface
   */
  createLinkType(
    createLinkTypeRequest: CreateLinkTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkTypeApiInterface
   */
  getLatestLinkTypes(
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedLinkType>>;

  /**
   *
   * @param {string} uri The URI of the link type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkTypeApiInterface
   */
  getLinkType(
    uri: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedLinkType>;

  /**
   *
   * @param {LinkTypeQuery} linkTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkTypeApiInterface
   */
  getLinkTypesByQuery(
    linkTypeQuery: LinkTypeQuery,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<LinkTypeRootedSubgraph>>;

  /**
   *
   * @param {UpdateLinkTypeRequest} updateLinkTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkTypeApiInterface
   */
  updateLinkType(
    updateLinkTypeRequest: UpdateLinkTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;
}

/**
 * LinkTypeApi - object-oriented interface
 * @export
 * @class LinkTypeApi
 * @extends {BaseAPI}
 */
export class LinkTypeApi extends BaseAPI implements LinkTypeApiInterface {
  /**
   *
   * @param {CreateLinkTypeRequest} createLinkTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkTypeApi
   */
  public createLinkType(
    createLinkTypeRequest: CreateLinkTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return LinkTypeApiFp(this.configuration)
      .createLinkType(createLinkTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkTypeApi
   */
  public getLatestLinkTypes(options?: AxiosRequestConfig) {
    return LinkTypeApiFp(this.configuration)
      .getLatestLinkTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} uri The URI of the link type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkTypeApi
   */
  public getLinkType(uri: string, options?: AxiosRequestConfig) {
    return LinkTypeApiFp(this.configuration)
      .getLinkType(uri, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LinkTypeQuery} linkTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkTypeApi
   */
  public getLinkTypesByQuery(
    linkTypeQuery: LinkTypeQuery,
    options?: AxiosRequestConfig,
  ) {
    return LinkTypeApiFp(this.configuration)
      .getLinkTypesByQuery(linkTypeQuery, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateLinkTypeRequest} updateLinkTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LinkTypeApi
   */
  public updateLinkType(
    updateLinkTypeRequest: UpdateLinkTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return LinkTypeApiFp(this.configuration)
      .updateLinkType(updateLinkTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PropertyTypeApi - axios parameter creator
 * @export
 */
export const PropertyTypeApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreatePropertyTypeRequest} createPropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyType: async (
      createPropertyTypeRequest: CreatePropertyTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createPropertyTypeRequest' is not null or undefined
      assertParamExists(
        "createPropertyType",
        "createPropertyTypeRequest",
        createPropertyTypeRequest,
      );
      const localVarPath = `/property-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPropertyTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestPropertyTypes: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/property-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} uri The URI of the property type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertyType: async (
      uri: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'uri' is not null or undefined
      assertParamExists("getPropertyType", "uri", uri);
      const localVarPath = `/property-types/{uri}`.replace(
        `{${"uri"}}`,
        encodeURIComponent(String(uri)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PropertyTypeQuery} propertyTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertyTypesByQuery: async (
      propertyTypeQuery: PropertyTypeQuery,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'propertyTypeQuery' is not null or undefined
      assertParamExists(
        "getPropertyTypesByQuery",
        "propertyTypeQuery",
        propertyTypeQuery,
      );
      const localVarPath = `/property-types/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        propertyTypeQuery,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdatePropertyTypeRequest} updatePropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePropertyType: async (
      updatePropertyTypeRequest: UpdatePropertyTypeRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updatePropertyTypeRequest' is not null or undefined
      assertParamExists(
        "updatePropertyType",
        "updatePropertyTypeRequest",
        updatePropertyTypeRequest,
      );
      const localVarPath = `/property-types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePropertyTypeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PropertyTypeApi - functional programming interface
 * @export
 */
export const PropertyTypeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PropertyTypeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreatePropertyTypeRequest} createPropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPropertyType(
      createPropertyTypeRequest: CreatePropertyTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createPropertyType(
          createPropertyTypeRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLatestPropertyTypes(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PersistedPropertyType>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getLatestPropertyTypes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {string} uri The URI of the property type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPropertyType(
      uri: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedPropertyType>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPropertyType(
        uri,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {PropertyTypeQuery} propertyTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPropertyTypesByQuery(
      propertyTypeQuery: PropertyTypeQuery,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PropertyTypeRootedSubgraph>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPropertyTypesByQuery(
          propertyTypeQuery,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @param {UpdatePropertyTypeRequest} updatePropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePropertyType(
      updatePropertyTypeRequest: UpdatePropertyTypeRequest,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PersistedOntologyIdentifier>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updatePropertyType(
          updatePropertyTypeRequest,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * PropertyTypeApi - factory interface
 * @export
 */
export const PropertyTypeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PropertyTypeApiFp(configuration);
  return {
    /**
     *
     * @param {CreatePropertyTypeRequest} createPropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPropertyType(
      createPropertyTypeRequest: CreatePropertyTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .createPropertyType(createPropertyTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestPropertyTypes(
      options?: any,
    ): AxiosPromise<Array<PersistedPropertyType>> {
      return localVarFp
        .getLatestPropertyTypes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} uri The URI of the property type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertyType(
      uri: string,
      options?: any,
    ): AxiosPromise<PersistedPropertyType> {
      return localVarFp
        .getPropertyType(uri, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PropertyTypeQuery} propertyTypeQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPropertyTypesByQuery(
      propertyTypeQuery: PropertyTypeQuery,
      options?: any,
    ): AxiosPromise<Array<PropertyTypeRootedSubgraph>> {
      return localVarFp
        .getPropertyTypesByQuery(propertyTypeQuery, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdatePropertyTypeRequest} updatePropertyTypeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePropertyType(
      updatePropertyTypeRequest: UpdatePropertyTypeRequest,
      options?: any,
    ): AxiosPromise<PersistedOntologyIdentifier> {
      return localVarFp
        .updatePropertyType(updatePropertyTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PropertyTypeApi - interface
 * @export
 * @interface PropertyTypeApi
 */
export interface PropertyTypeApiInterface {
  /**
   *
   * @param {CreatePropertyTypeRequest} createPropertyTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertyTypeApiInterface
   */
  createPropertyType(
    createPropertyTypeRequest: CreatePropertyTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertyTypeApiInterface
   */
  getLatestPropertyTypes(
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PersistedPropertyType>>;

  /**
   *
   * @param {string} uri The URI of the property type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertyTypeApiInterface
   */
  getPropertyType(
    uri: string,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedPropertyType>;

  /**
   *
   * @param {PropertyTypeQuery} propertyTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertyTypeApiInterface
   */
  getPropertyTypesByQuery(
    propertyTypeQuery: PropertyTypeQuery,
    options?: AxiosRequestConfig,
  ): AxiosPromise<Array<PropertyTypeRootedSubgraph>>;

  /**
   *
   * @param {UpdatePropertyTypeRequest} updatePropertyTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertyTypeApiInterface
   */
  updatePropertyType(
    updatePropertyTypeRequest: UpdatePropertyTypeRequest,
    options?: AxiosRequestConfig,
  ): AxiosPromise<PersistedOntologyIdentifier>;
}

/**
 * PropertyTypeApi - object-oriented interface
 * @export
 * @class PropertyTypeApi
 * @extends {BaseAPI}
 */
export class PropertyTypeApi
  extends BaseAPI
  implements PropertyTypeApiInterface
{
  /**
   *
   * @param {CreatePropertyTypeRequest} createPropertyTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertyTypeApi
   */
  public createPropertyType(
    createPropertyTypeRequest: CreatePropertyTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return PropertyTypeApiFp(this.configuration)
      .createPropertyType(createPropertyTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertyTypeApi
   */
  public getLatestPropertyTypes(options?: AxiosRequestConfig) {
    return PropertyTypeApiFp(this.configuration)
      .getLatestPropertyTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} uri The URI of the property type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertyTypeApi
   */
  public getPropertyType(uri: string, options?: AxiosRequestConfig) {
    return PropertyTypeApiFp(this.configuration)
      .getPropertyType(uri, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PropertyTypeQuery} propertyTypeQuery
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertyTypeApi
   */
  public getPropertyTypesByQuery(
    propertyTypeQuery: PropertyTypeQuery,
    options?: AxiosRequestConfig,
  ) {
    return PropertyTypeApiFp(this.configuration)
      .getPropertyTypesByQuery(propertyTypeQuery, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdatePropertyTypeRequest} updatePropertyTypeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertyTypeApi
   */
  public updatePropertyType(
    updatePropertyTypeRequest: UpdatePropertyTypeRequest,
    options?: AxiosRequestConfig,
  ) {
    return PropertyTypeApiFp(this.configuration)
      .updatePropertyType(updatePropertyTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
