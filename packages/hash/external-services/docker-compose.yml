version: "3.9"

volumes:
  hash-postgres-data:

services:
  hash-dev-opensearch:
    deploy:
      restart_policy:
        condition: on-failure
    env_file:
      - ../../../.env
    environment:
      ## Tell OpenSearch that it's operating in single-node mode
      - discovery.type=single-node
      ## Disable the security module for development so we can connect over plain HTTP
      - plugins.security.disabled=true
      ## Docker volumes are ~10GB by default which is typically much smaller than the
      ## host's drive size. This can cause OpenSearch to shutdown if it thinks disk
      ## space is running low. Set the disk high watermark to 100% to ignore this.
      - cluster.routing.allocation.disk.watermark.high=100%
      - cluster.routing.allocation.disk.watermark.flood_stage=100%
    build:
      context: ./opensearch
    ports:
      - 9200:9200
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    ## Mouting open search data to a local directory may lead to java.nio.file.AccessDeniedException.
    ## Details: https://github.com/opensearch-project/OpenSearch/issues/1579.
    ## We can revisit the setup after upgrading base image or by fixing permissions in a custom image.
    # volumes:
    #   - ../../../var/external-services/opensearch/data:/usr/share/opensearch/data

  postgres:
    build:
      context: ./postgres
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      PGDATA: /data/pgdata
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      HASH_KRATOS_PG_USER: "${HASH_KRATOS_PG_USER}"
      HASH_KRATOS_PG_PASSWORD: "${HASH_KRATOS_PG_PASSWORD}"
      HASH_KRATOS_PG_DATABASE: "${HASH_KRATOS_PG_DEV_DATABASE}"
      HASH_GRAPH_PG_USER: "${HASH_GRAPH_PG_USER}"
      HASH_GRAPH_PG_PASSWORD: "${HASH_GRAPH_PG_PASSWORD}"
      HASH_GRAPH_PG_DATABASE: "${HASH_GRAPH_PG_DEV_DATABASE}"
      HASH_GRAPH_REALTIME_PG_USER: "${HASH_GRAPH_REALTIME_PG_USER}"
      HASH_GRAPH_REALTIME_PG_PASSWORD: "${HASH_GRAPH_REALTIME_PG_PASSWORD}"
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - hash-postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --username ${POSTGRES_USER}"]
      interval: 2s
      timeout: 2s
      retries: 5
    command: -c 'config_file=/etc/postgresql/postgresql.conf'

  graph-migrate:
    build:
      context: ../../graph
      dockerfile: deployment/migrations/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      HASH_GRAPH_PG_MIGRATION_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${HASH_GRAPH_PG_DEV_DATABASE}"

  graph:
    init: true
    depends_on:
      postgres:
        condition: service_healthy
      graph-migrate:
        condition: service_completed_successfully
    build:
      dockerfile: deployment/graph/Dockerfile
      context: ../../graph
      args:
        PROFILE: dev
    environment:
      HASH_GRAPH_PG_USER: "${HASH_GRAPH_PG_USER}"
      HASH_GRAPH_PG_PASSWORD: "${HASH_GRAPH_PG_PASSWORD}"
      HASH_GRAPH_PG_HOST: "postgres"
      HASH_GRAPH_PG_PORT: "5432"
      HASH_GRAPH_PG_DATABASE: "${HASH_GRAPH_PG_DEV_DATABASE}"
      HASH_GRAPH_LOG_FORMAT: "${HASH_GRAPH_LOG_FORMAT:-pretty}"
      RUST_LOG: "${HASH_GRAPH_LOG_LEVEL:-graph=trace,hash_graph=trace,tokio_postgres=debug}"
      RUST_BACKTRACE: 1
    ports:
      - "${HASH_GRAPH_API_PORT}:4000"

  hash-dev-redis:
    deploy:
      restart_policy:
        condition: on-failure
    image: redis:6.2
    ports:
      - 6379:6379

  kratos-migrate:
    depends_on:
      postgres:
        condition: service_healthy
    image: oryd/kratos:v0.10.1
    volumes:
      - type: bind
        source: ./kratos
        target: /etc/config/kratos
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_KRATOS_PG_DEV_DATABASE}
    command: -c /etc/config/kratos/kratos.dev.yml migrate sql -e --yes

  kratos:
    depends_on:
      - kratos-migrate
    image: oryd/kratos:v0.10.1
    ports:
      - "4433:4433" # public
      - "4434:4434" # admin
    restart: unless-stopped
    environment:
      SECRETS_COOKIE: "${KRATOS_SECRETS_COOKIE}"
      SECRETS_CIPHER: "${KRATOS_SECRETS_CIPHER}"
      COURIER_SMTP_CONNECTION_URI: "smtps://test:test@mailslurper:1025/?skip_ssl_verify=true"
      DSN: "postgres://${HASH_KRATOS_PG_USER}:${HASH_KRATOS_PG_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_KRATOS_PG_DEV_DATABASE}"
      # KRATOS_API_KEY: "${KRATOS_API_KEY}" Currently this cannot be set as an env variable :(
      LOG_LEVEL: trace
    command: serve -c /etc/config/kratos/kratos.dev.yml --dev --watch-courier
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - type: bind
        source: ./kratos
        target: /etc/config/kratos

  mailslurper:
    image: oryd/mailslurper:latest-smtps
    ports:
      - "4436:4436"
      - "4437:4437"
