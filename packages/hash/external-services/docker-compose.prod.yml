version: "3.9"

volumes:
  hash-postgres-data:

services:
  postgres:
    build:
      context: ./postgres
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      PGDATA: /data/pgdata
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      HASH_KRATOS_PG_USER: "${HASH_KRATOS_PG_USER}"
      HASH_KRATOS_PG_PASSWORD: "${HASH_KRATOS_PG_PASSWORD}"
      HASH_KRATOS_PG_DATABASE: "${HASH_KRATOS_PG_DEV_DATABASE}"
      HASH_GRAPH_PG_USER: "${HASH_GRAPH_PG_USER}"
      HASH_GRAPH_PG_PASSWORD: "${HASH_GRAPH_PG_PASSWORD}"
      HASH_GRAPH_PG_DATABASE: "${HASH_GRAPH_PG_DEV_DATABASE}"
      HASH_GRAPH_REALTIME_PG_USER: "${HASH_GRAPH_REALTIME_PG_USER}"
      HASH_GRAPH_REALTIME_PG_PASSWORD: "${HASH_GRAPH_REALTIME_PG_PASSWORD}"
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - hash-postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --username ${POSTGRES_USER}"]
      interval: 2s
      timeout: 2s
      retries: 5
    command: -c 'config_file=/etc/postgresql/postgresql.conf'

  graph-migrate:
    build:
      context: ../../graph
      dockerfile: deployment/migrations/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      HASH_GRAPH_PG_MIGRATION_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${HASH_GRAPH_PG_DEV_DATABASE}"

  graph:
    init: true
    depends_on:
      postgres:
        condition: service_healthy
      graph-migrate:
        condition: service_completed_successfully
    build:
      dockerfile: deployment/graph/Dockerfile
      context: ../../graph
      args:
        PROFILE: dev
    environment:
      HASH_GRAPH_PG_USER: "${HASH_GRAPH_PG_USER}"
      HASH_GRAPH_PG_PASSWORD: "${HASH_GRAPH_PG_PASSWORD}"
      HASH_GRAPH_PG_HOST: "postgres"
      HASH_GRAPH_PG_PORT: "5432"
      HASH_GRAPH_PG_DATABASE: "${HASH_GRAPH_PG_DEV_DATABASE}"
      HASH_GRAPH_LOG_FORMAT: "${HASH_GRAPH_LOG_FORMAT:-pretty}"
      RUST_LOG: "${HASH_GRAPH_LOG_LEVEL:-graph=trace,hash_graph=trace,tokio_postgres=debug}"
      RUST_BACKTRACE: 1
    ports:
      - "${HASH_GRAPH_API_PORT}:4000"

  kratos-migrate:
    depends_on:
      postgres:
        condition: service_healthy
    image: oryd/kratos:v0.10.1
    volumes:
      - type: bind
        source: ./kratos
        target: /etc/config/kratos
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_KRATOS_PG_DEV_DATABASE}
    command: -c /etc/config/kratos/kratos.dev.yml migrate sql -e --yes

  kratos:
    depends_on:
      - kratos-migrate
    image: oryd/kratos:v0.10.1
    # ports:
    #   - "4433:4433" # public, doesn't need to be exposed
    #   - "4434:4434" # admin, we don't want to expose this
    restart: unless-stopped
    environment:
      - SECRETS_COOKIE=VERY-INSECURE-AND-SHOULD-ONLY-BE-USED-IN-DEV
      - SECRETS_CIPHER=32-LONG-SECRET-NOT-SECURE-AT-ALL
      - COURIER_SMTP_CONNECTION_URI=smtps://test:test@mailslurper:1025/?skip_ssl_verify=true
      - DSN=postgres://${HASH_KRATOS_PG_USER}:${HASH_KRATOS_PG_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_KRATOS_PG_DEV_DATABASE}
      - LOG_LEVEL=warning
    command: serve -c /etc/config/kratos/kratos.dev.yml --dev --watch-courier
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - type: bind
        source: ./kratos
        target: /etc/config/kratos

  mailslurper:
    image: oryd/mailslurper:latest-smtps
    ports:
      - "4436:4436"
      - "4437:4437"

  hash-redis:
    image: redis:6.2
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 2s
      timeout: 2s
      retries: 5

  hash-api:
    build:
      context: ../../../
      dockerfile: packages/hash/docker/api/prod/Dockerfile
    depends_on:
      graph:
        condition: service_healthy
      hash-redis:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      FRONTEND_DOMAIN: "${FRONTEND_DOMAIN}"

      NEXT_PUBLIC_API_ORIGIN: "${NEXT_PUBLIC_API_ORIGIN}"
      SYSTEM_ACCOUNT_NAME: "${SYSTEM_ACCOUNT_NAME}"
      SYSTEM_ACCOUNT_SHORTNAME: "${SYSTEM_ACCOUNT_SHORTNAME}"
      SYSTEM_EMAIL_ADDRESS: "${SYSTEM_EMAIL_ADDRESS}"
      SYSTEM_EMAIL_SENDER_NAME: "${SYSTEM_EMAIL_SENDER_NAME}"

      HASH_GRAPH_API_HOST: "graph"
      HASH_GRAPH_API_PORT: "4000"
      LOG_LEVEL: "${LOG_LEVEL}"

      HASH_REDIS_HOST: "hash-redis"
      HASH_REDIS_PORT: "6379"

      HASH_OPENSEARCH_ENABLED: "false"

      HASH_TASK_EXECUTOR_HOST: "${HASH_TASK_EXECUTOR_HOST}"
      HASH_TASK_EXECUTOR_PORT: "${HASH_TASK_EXECUTOR_PORT}"

      SESSION_SECRET: "%{SESSION_SECRET}"
      ORY_KRATOS_PUBLIC_URL: "http://kratos:4433"
      ORY_KRATOS_ADMIN_URL: "http://kratos:4434"
      KRATOS_API_KEY: "${KRATOS_API_KEY}"
    ports:
      - "5001:5001"

  hash-frontend:
    build:
      context: ../../../
      dockerfile: packages/hash/docker/frontend/prod/Dockerfile
    depends_on:
      hash-api:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      NEXT_PUBLIC_API_ORIGIN: "${NEXT_PUBLIC_API_ORIGIN}"
      ORY_KRATOS_PUBLIC_URL: "http://kratos:4433"

    ports:
      - "3000:3000"
