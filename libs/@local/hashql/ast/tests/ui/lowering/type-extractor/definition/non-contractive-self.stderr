error[type-extractor::non-contractive-type]: Invalid recursive type definition
  ╭▸ 
5 │   "A",
  │    ─ ... in this recursive type definition
6 │   ["|", "A", "A"],
  │   ━━━━━━━━━━━━━━━ Type `A` cannot reference itself directly
  │
  ├ help: Add structure around the recursive reference. Such as, but not limited to, a struct, tuple, or union with at least one non-recursive alternative:
  │       - `type A = A | Null`
  │       - `type A = (value: A)`
  │       - `type A = (A, String)`
  ╰ note: Recursive types need some 'structure' between the type and itself (be 'contractive') to ensure type checking terminates. This means every recursive reference must be protected by at least one type constructor (struct, tuple, etc.). Direct self-references like `type T = T` are not allowed as they do not guarantee progression during type checking.