[31m[special-form-expander::invalid-type-expression] Error:[0m Special Form Expander
   â•­â”€[ <unknown>:3:44 ]
   â”‚
 3 â”‚ ["::kernel::special_form::newtype", "::x", { "#literal": 1 }, "x"]
   â”‚                                            â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€  
   â”‚                                                    â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Replace this literal with a type name
   â”‚ 
   â”‚ Help: Replace this expression with a valid type reference, struct type, or tuple type
   â”‚ 
   â”‚ Note: Valid type expressions include:
   â”‚       - Type names: String, Int, Float
   â”‚       - Struct types: {name: String, age: Int}
   â”‚       - Tuple types: (String, Int, Boolean)
   â”‚       - Unions: (| String Int)
   â”‚       - Intersections: (& String Int)
   â”‚       - Generic types: Array<String>, Option<Int>
â”€â”€â”€â•¯


[31m[special-form-expander::qualified-binding-name] Error:[0m Special Form Expander
   â•­â”€[ <unknown>:3:38 ]
   â”‚
 3 â”‚ ["::kernel::special_form::newtype", "::x", { "#literal": 1 }, "x"]
   â”‚                                      â”€â”¬â”€  
   â”‚                                       â•°â”€â”€â”€ Replace this with a simple identifier
   â”‚ 
   â”‚ Help: newtype binding names must be simple identifiers without any path qualification. Qualified paths cannot be used as binding names.
   â”‚ 
   â”‚ Note: Valid identifiers are simple names like 'x', 'counter', '+', or 'user_name' without any namespace qualification, generic parameters, or path separators.
â”€â”€â”€â•¯
