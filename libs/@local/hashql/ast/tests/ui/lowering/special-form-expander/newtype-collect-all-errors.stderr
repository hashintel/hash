[special-form-expander::invalid-type-expression] Error: Invalid type expression
   ╭─[ <unknown>:3:44 ]
   │
 3 │ ["::kernel::special_form::newtype", "::x", { "#literal": 1 }, "x"]
   │                                            ────────┬────────  
   │                                                    ╰────────── Replace this literal with a type name
   │ 
   │ Help: Replace this expression with a valid type reference, struct type, or tuple type
   │ 
   │ Note: Valid type expressions include:
   │       - Type names: String, Int, Float
   │       - Struct types: {name: String, age: Int}
   │       - Tuple types: (String, Int, Boolean)
   │       - Unions: (| String Int)
   │       - Intersections: (& String Int)
   │       - Generic types: Array<String>, Option<Int>
───╯


[special-form-expander::qualified-binding-name] Error: Qualified path used as binding name
   ╭─[ <unknown>:3:38 ]
   │
 3 │ ["::kernel::special_form::newtype", "::x", { "#literal": 1 }, "x"]
   │                                      ─┬─  
   │                                       ╰─── Replace this qualified path with a simple identifier
   │ 
   │ Help: The newtype binding requires a simple type name (like 'String' or 'MyType<T>'), not a qualified path (like 'std::string::String'). Remove the path segments.
   │ 
   │ Note: Valid type names are simple identifiers, optionally followed by generic arguments (e.g., 'Identifier' or 'Container<Param>'). They cannot contain '::' path separators in this context.
───╯
