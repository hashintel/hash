[31m[type-check::unconstrained-type-variable] Error:[0m Unconstrained type variable
   â•­â”€[ <unknown>:9:26 ]
   â”‚
 9 â”‚     { "#struct": { "a": "T", "b": "T" } },
   â”‚                          â”¬  
   â”‚                          â•°â”€â”€ Cannot infer type for this variable - no usage constraints available
   â”‚ 
   â”‚ Help: Add an explicit type annotation to provide the necessary context. For example:
   â”‚       - Change `let x = ...` to `let x: Type = ...`
   â”‚       - Provide type parameters like `function<T: SomeType>(...)`
   â”‚       - Use the value in a way that constrains its type
   â”‚ 
   â”‚ Note: Type inference needs constraints that come from how variables are used. When a variable lacks both usage context and explicit annotations, the type system cannot determine an appropriate type. This commonly occurs with empty collections, unused variables, or generic functions without type annotations.
â”€â”€â”€â•¯
