[31m[lower::type-check::type-mismatch] Error:[0m Type mismatch
   â•­â”€[ <unknown>:3:1 ]
   â”‚
 1 â”‚ //@ run: fail
   â”‚ â”‚ 
   â”‚ â•°â”€ This is of type `[34mNumber[0m`
   â”‚ 
 3 â”‚ ["input", "x", "Number", { "#literal": "42" }]
   â”‚ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€  
   â”‚                        â”‚                 â•°â”€â”€â”€â”€â”€â”€ This is of type `[34mString[0m`
   â”‚                        â”‚                        
   â”‚                        â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Type mismatch in this expression
   â”‚ 
   â”‚ Help: You can convert the string to a number using the `::core::number::parse/1` or `::core::number::parse/2` function
   â”‚ 
   â”‚ Note: This type system uses a combination of nominal and structural typing. Types are compatible when they have the same structure (same fields/elements with compatible types) or when they represent the same named type. Union types must have at least one compatible variant, and intersection types require all constraints to be satisfied.
â”€â”€â”€â•¯
