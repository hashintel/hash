[31m[lower::type-check::type-mismatch] Error:[0m Type mismatch
   â•­â”€[ <unknown>:3:1 ]
   â”‚
 1 â”‚ //@ run: fail
   â”‚ â”‚ 
   â”‚ â•°â”€ This is of type `[34mInteger[0m`
   â”‚ 
 3 â”‚ ["is", { "#literal": 42.12 }, "Integer"] // checking DOWN fails
   â”‚ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  
   â”‚                     â”‚  â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ This is of type `[34mNumber[0m`
   â”‚                     â”‚                     
   â”‚                     â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Type mismatch in this expression
   â”‚ 
   â”‚ Help: Expected an Integer but found a Number. While all Integers are Numbers, not all Numbers are Integers (e.g., decimals like 3.14).
   â”‚ 
   â”‚ Note: This type system uses a combination of nominal and structural typing. Types are compatible when they have the same structure (same fields/elements with compatible types) or when they represent the same named type. Union types must have at least one compatible variant, and intersection types require all constraints to be satisfied.
â”€â”€â”€â•¯
