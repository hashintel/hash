// TODO: This file is expected to be generated by a proc-macro

use crate::{
    __export::Report, ContextProvider, Migration, MigrationDefinition, MigrationDirection,
    MigrationError, MigrationInfo, MigrationList, MigrationRunner,
};

struct Cons<H, T>(H, T);
struct Nil;

macro_rules! tuples {
    () => { Nil };
    ($head:expr) => { Cons($head, Nil) };
    ($head:expr, $($tail:tt)*) => {
        Cons($head, tuples![$($tail)*])
    };
}

impl<Head, Tail, C> MigrationList<C> for Cons<MigrationDefinition<Head>, Tail>
where
    Head: Migration,
    Tail: MigrationList<C>,
    C: ContextProvider<Head::Context>,
{
    async fn traverse(
        self,
        runner: &impl MigrationRunner,
        context: &mut C,
        direction: MigrationDirection,
    ) -> Result<(), Report<MigrationError>> {
        if direction == MigrationDirection::Down {
            self.1.traverse(runner, context, direction).await?;
            runner
                .run_migration(self.0.migration, &self.0.info, context.provide())
                .await
        } else {
            runner
                .run_migration(self.0.migration, &self.0.info, context.provide())
                .await?;
            self.1.traverse(runner, context, direction).await
        }
    }
}

// Empty-list implementation.
impl<C> MigrationList<C> for Nil {
    async fn traverse(
        self,
        _: &impl MigrationRunner,
        _: &mut C,
        _: MigrationDirection,
    ) -> Result<(), Report<MigrationError>> {
        Ok(())
    }
}

macro_rules! define_migration {
    ($mod_name:ident, $file_path:expr, $struct_name:ident) => {
        #[path = $file_path]
        mod $mod_name;
        use self::$mod_name::$struct_name;
    };
}

define_migration!(v001, "../graph-migrations/v001__initial_setup.rs", V001);
define_migration!(v002, "../graph-migrations/v002__advanced_setup.rs", V002);

/// Returns a list of all migration files.
///
/// Migration files are expected to have the following format:
///
/// ```text
/// v{version_number}__{migration_name}.rs
/// ```
///
/// # Panics
///
/// Panics if a migration file is not found or if a migration file name is invalid.
#[must_use]
pub fn file_migrations<C>() -> impl MigrationList<C>
where
    C: ContextProvider<<V001 as Migration>::Context>
        + ContextProvider<<V002 as Migration>::Context>,
{
    macro_rules! migration_list {
        ($($struct_name:ident, $file_path:expr);* $(;)?) => {
            tuples![$(
                MigrationDefinition {
                    migration: $struct_name,
                    info: MigrationInfo::from_path($file_path).expect("migration file name should be valid")
                }
            ),*]
        };
    }

    migration_list!(
        V001, "graph-migrations/v001__initial_setup.rs";
        V002, "graph-migrations/v002__advanced_setup.rs";
    )
}
