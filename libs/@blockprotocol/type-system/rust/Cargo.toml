cargo-features = ["edition2024"]

[package]
name = "type-system"
description = "Definitions of types within the Block Protocol Type System"
version = "0.0.0"
edition.workspace = true
authors = ["HASH"]
publish = false
license = "MIT OR Apache-2.0"
repository = "https://github.com/hashintel/hash/tree/main/libs/@blockprotocol/type-system/rust"

[lib]
name = "type_system"
crate-type = ["cdylib", "rlib"]

[dependencies]
codec = { workspace = true, features = ["serde"] }

postgres-types = { workspace = true, features = ["derive", "with-serde_json-1"], optional = true }
serde = { version = "1.0.200", features = ["derive"] }
serde_json = "1.0.116"
thiserror = "1.0.59"
tsify = "0.4.5"
url = "2.5.0"
utoipa = { version = "4.2.0", features = ["url"], optional = true }
regex = "1.10.5"
error-stack = "0.4.1"
iso8601-duration = "0.2.0"
uuid = "1.9.1"
email_address = { version = "0.2.4", default-features = false }

[dev-dependencies]
tokio = { workspace = true, features = ["macros", "rt"] }
graph-test-data = { workspace = true }

[features]
postgres = ["dep:postgres-types"]
utoipa = ["dep:utoipa"]

[lints]
workspace = true

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = { version = "0.2.92", features = ["serde-serialize"] }
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7" }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = "0.3.42"
