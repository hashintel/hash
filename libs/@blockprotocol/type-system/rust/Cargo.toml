[package]
name              = "type-system"
description       = "Definitions of types within the Block Protocol Type System"
version.workspace = true
edition.workspace = true
license           = "MIT OR Apache-2.0"
publish.workspace = true
authors.workspace = true
repository        = "https://github.com/hashintel/hash/tree/main/libs/@blockprotocol/type-system/rust"

[lib]
name       = "type_system"
crate-type = ["cdylib", "rlib"]

[dependencies]
# Public workspace dependencies
error-stack                    = { workspace = true, public = true, features = ["unstable"] }
hash-codec                     = { workspace = true, public = true, features = ["serde", "numeric"] }
hash-graph-temporal-versioning = { workspace = true, public = true }

# Public third-party dependencies
bytes            = { workspace = true, public = true }
email_address    = { workspace = true, public = true }
iso8601-duration = { workspace = true, public = true }
postgres-types   = { workspace = true, public = true, features = ["derive", "with-uuid-1", "with-serde_json-1"], optional = true }
semver           = { workspace = true, public = true, features = ["serde"] }
serde_json       = { workspace = true, public = true }
time             = { workspace = true, public = true, features = ["serde"] }
url              = { workspace = true, public = true, features = ["serde"] }
utoipa           = { workspace = true, public = true, features = ["url"], optional = true }
uuid             = { workspace = true, public = true, features = ["v5", "serde", "std"] }

# Private workspace dependencies

# Private third-party dependencies
derive_more    = { workspace = true, features = ["display", "error", "from"] }
futures        = { workspace = true }
itertools      = { workspace = true, features = ["use_alloc"] }
regex          = { workspace = true, features = ["std"] }
serde          = { workspace = true, features = ["derive", "rc"] }
simple-mermaid = { workspace = true }
thiserror      = { workspace = true }

[dev-dependencies]
hash-graph-test-data = { workspace = true }
pretty_assertions    = { workspace = true }
tokio                = { workspace = true, features = ["macros", "rt"] }

[features]
postgres = ["dep:postgres-types", "hash-graph-temporal-versioning/postgres"]
utoipa   = ["dep:utoipa", "hash-graph-temporal-versioning/utoipa"]

[lints]
workspace = true

[target.'cfg(target_arch = "wasm32")'.dependencies]
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { workspace = true }
tsify-next               = { workspace = true, features = ["json"] }
wasm-bindgen             = { workspace = true, features = ["serde-serialize"] }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = { workspace = true }


[package.metadata.sync.turborepo]
extra-dependencies = [
    { name = "@local/advanced-types", version = "0.0.0-private" },
]
extra-dev-dependencies = [
    { name = "@local/tsconfig", version = "0.0.0-private" },
]
